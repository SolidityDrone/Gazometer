{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":2493699732489379546,"abi":{"parameters":[{"name":"alice_signature_nonce_1","type":{"kind":"array","length":65,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"alice_signature_nonce_2","type":{"kind":"array","length":65,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"chain_id","type":{"kind":"field"},"visibility":"public"},{"name":"block_number","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"message_nonce_1","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"message_nonce_2","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"pub_x_1","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"pub_y_1","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"pub_x_2","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"pub_y_2","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"contract_address","type":{"kind":"array","length":20,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"public"},{"name":"is_deposit","type":{"kind":"boolean"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"tuple","fields":[{"kind":"field"},{"kind":"field"},{"kind":"field"},{"kind":"field"},{"kind":"field"},{"kind":"field"},{"kind":"field"},{"kind":"field"}]},"visibility":"public"},"error_types":{"292786241566106125":{"error_kind":"fmtstring","length":31,"item_types":[{"kind":"string","length":17}]},"662911055836379074":{"error_kind":"string","string":"Cannot pop array: fragment is too short"},"808102636936227868":{"error_kind":"string","string":"Cannot push: fragment is full"},"1257039332889662951":{"error_kind":"string","string":"Unsupported chain ID"},"1702844987497767662":{"error_kind":"string","string":"number of header RLP fields does not match"},"1784090300352196074":{"error_kind":"string","string":"New max length is smaller than fragment length"},"1797804167342671480":{"error_kind":"string","string":"Invalid node type"},"1848132903095460097":{"error_kind":"string","string":"Expected RLP header to be maximum 1 byte long"},"1975296384129351436":{"error_kind":"string","string":"Decoded length of long string exceeds input length"},"2294458973011079183":{"error_kind":"string","string":"Expected a list"},"2446709291901099778":{"error_kind":"fmtstring","length":31,"item_types":[{"kind":"string","length":12}]},"2814641233417603000":{"error_kind":"fmtstring","length":32,"item_types":[{"kind":"string","length":12}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3492945213712566949":{"error_kind":"string","string":"Subarray index out of bound"},"3649116680727309155":{"error_kind":"string","string":"Expected to consume all key nibbles"},"3990714964858224170":{"error_kind":"string","string":"Value length mismatch"},"4649481178424447293":{"error_kind":"fmtstring","length":31,"item_types":[{"kind":"string","length":5}]},"4989950638959520334":{"error_kind":"fmtstring","length":32,"item_types":[{"kind":"string","length":17}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5493362915830397726":{"error_kind":"string","string":"Prefix must be 0, 1, 2 or 3"},"5655419122065692946":{"error_kind":"string","string":"Length of length exceeds input length"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"6236500010476601753":{"error_kind":"fmtstring","length":32,"item_types":[{"kind":"string","length":7}]},"6244776178728017007":{"error_kind":"string","string":"Initial state only supports deposits"},"6360937559958062612":{"error_kind":"string","string":"Cannot pop from an empty fragment"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6768678589290466106":{"error_kind":"fmtstring","length":30,"item_types":[{"kind":"string","length":9}]},"6797140530996405384":{"error_kind":"fmtstring","length":31,"item_types":[{"kind":"string","length":7}]},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"7512174461964532630":{"error_kind":"fmtstring","length":30,"item_types":[{"kind":"string","length":10}]},"7620558029691785338":{"error_kind":"string","string":"Insufficient balance for withdrawal"},"7673055947793783294":{"error_kind":"string","string":"Element is not a string of length < 56 bytes"},"7701088741439810963":{"error_kind":"string","string":"Expected a hash at the end of the extension node"},"7727927684323588447":{"error_kind":"string","string":"Expected a hash at position given by the key nibble"},"7729612060405699720":{"error_kind":"string","string":"Node RLP length exceeds MAX_LEN"},"7932861116973345373":{"error_kind":"string","string":"Value mismatch"},"7976774808975071288":{"error_kind":"string","string":"Bytes implicit data length must be at least 2 times larger than bytes explicit length"},"8449533356146759774":{"error_kind":"string","string":"Extension key part does not correspond to given key nibbles"},"8647927282746596079":{"error_kind":"fmtstring","length":30,"item_types":[{"kind":"string","length":13}]},"8764575204013396926":{"error_kind":"string","string":"Leaf parity prefix must be 2 or 3"},"8940778978892985534":{"error_kind":"string","string":"Key mismatch in the leaf"},"9003498225274356583":{"error_kind":"fmtstring","length":30,"item_types":[{"kind":"string","length":17}]},"9262262581089067316":{"error_kind":"string","string":"Length of length is zero"},"9610804029702890081":{"error_kind":"string","string":"Inconsistent rlp length"},"9733638806613941694":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32}]},"9931858164094679337":{"error_kind":"fmtstring","length":30,"item_types":[{"kind":"string","length":12}]},"10029016582456820804":{"error_kind":"string","string":"Fragment length exceeds data length"},"10459214753737813644":{"error_kind":"string","string":"Total length exceeds input length"},"10736731826012069778":{"error_kind":"fmtstring","length":31,"item_types":[{"kind":"string","length":9}]},"10854030354164654860":{"error_kind":"string","string":"Address mismatch"},"11183658210205501665":{"error_kind":"fmtstring","length":30,"item_types":[{"kind":"string","length":5}]},"11201295997920925782":{"error_kind":"string","string":"Expected a zero after a prefix of even parity"},"13113033765825030666":{"error_kind":"fmtstring","length":32,"item_types":[{"kind":"string","length":10}]},"13169712016435268629":{"error_kind":"string","string":"Decoded length of long list exceeds input length"},"13521589430615575074":{"error_kind":"fmtstring","length":31,"item_types":[{"kind":"string","length":13}]},"13851312983424125104":{"error_kind":"fmtstring","length":32,"item_types":[{"kind":"string","length":5}]},"13857984082167849225":{"error_kind":"string","string":"Invalid node hash"},"14130454602814610950":{"error_kind":"string","string":"Extension parity prefix must be 0 or 1"},"14177523539272545097":{"error_kind":"string","string":"Array index out of bound"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14384811266519685328":{"error_kind":"string","string":"Subfragment overflows fragment"},"14420715966409058246":{"error_kind":"string","string":"Length of length exceeds maximum"},"14462956016171063393":{"error_kind":"string","string":"Leaf expected to have 2 fields"},"14651816509643900852":{"error_kind":"string","string":"Decoded length of short string exceeds input length"},"14729908539421612020":{"error_kind":"fmtstring","length":30,"item_types":[{"kind":"string","length":7}]},"14911434386120940114":{"error_kind":"string","string":"Invalid number of fields in account RLP"},"15862946155048515401":{"error_kind":"string","string":"Decoded length of short list exceeds input length"},"15864849592686294349":{"error_kind":"fmtstring","length":32,"item_types":[{"kind":"string","length":9}]},"16538375868159084754":{"error_kind":"string","string":"Block number does not match the argument"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17362798791118512561":{"error_kind":"fmtstring","length":31,"item_types":[{"kind":"string","length":10}]},"17772659172029321311":{"error_kind":"fmtstring","length":32,"item_types":[{"kind":"string","length":13}]},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"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/fz+X5/f/+vz+399fv+vz+//9fn9vz6//9fn9//6/P5fn9//6/P7f315/68v7//15f2/vrz/15f3//ry/l9f3v/ry/t//efUttF9sNVEd6/42688p7Rfv0LvvbL9j/yrp/H2Eihvr4Dy9gIob//9y9t//tXNWd2c1c1Z3ZzVzVndnNXNWd2cN19Z3ZzVzVndnNXN+Y+9sro5q5tzmm7O63aGvP+Kvv9KebudwX89eODEeH/RvL9m3l4y758W7x8W758V7x8V758U7x8U758T7x8T758S7x8S758R7x8R758Q7x8Q758P7x8P758O7x8O758N7x8N758M7x8M758L7zf53+/xv9/if7/D/36DX97+m8vbf3N9+2+ub//N9e2/ub79N9e3/+b69t9c3/6b69t/c337b65v/83L23/z8vbf/HNUzqtSrrxd/JX3az/568G1Vs6wVl6+sWi///gbi/b7j7+xaL//+BuL9vuPv7Fov//4G4v2e+eVRfu9+8qi/d59ZdF+776yaL93X1m037uvLNrv3Vfqux2GP9B+r195f4xX3hzj3f6H/vXgutSuS+261K5L7brUrkvtutSuS+261K5L7brUrkvtutTOfql9/cqaZX33lff/+p9UJr9uNkAqk7f/Uf56cF3s18V+XezXxX5d7NfFfl3s18V+XezXxX5d7NfF/j/4yrrYr4v9hS/2r195/6//viaJ3hclvf3JsX/9069nvX7lfYnyc2HSyyZF/evBP/ySlaR0j4Ik+fZT3fzv/7p7uJaHFfr2qD95dDsI7v/uto/y94d/eWFIYBwIzHOBzKfAEBKYjASGkcAIEhhFAlOQwCDtwAVpBy5IO3BF2oEr0g5ckXbgirQDV6QduCLtwBVpB65IO3BF2oEr0g5sSDuwIe3AhrQD28Ad+Ne/L4P/fR3875fB/34d/O/b4H/fx/77ngb/+zT438+D//3B+euD89cH568Pzl8fnL8+OH99bP7+4deCO/77NPjfz4P/fR7878vgf18H//tl8L//8/w1svu///0nvZ8WYxuFeS/Gtr7W42Gvzx4udv+Ht4vyFyNg+ZmTj18Wr9W/P/q//fGnn6/mpE/gJKUZnKQZnMwzOMmhTub8wJ21vnYye74fC9n5C7mnZw/X9Hi45m8/mn7zUqbwUqfwskzhZZ3CS5vCS5/By5ym8JKm8DJP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","file_map":{"3":{"source":"use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        unsafe {\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n}\n","path":"std/array/mod.nr"},"5":{"source":"use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: StructDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: StructDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n","path":"std/cmp.nr"},"6":{"source":"use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"12":{"source":"// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n","path":"std/convert.nr"},"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"19":{"source":"use crate::runtime::is_unconstrained;\n\nglobal BLOCK_SIZE_IN_BYTES: u32 = 136; //(1600 - BITS * 2) / WORD_SIZE;\nglobal WORD_SIZE: u32 = 8; // Limbs are made up of u64s so 8 bytes each.\nglobal LIMBS_PER_BLOCK: u32 = BLOCK_SIZE_IN_BYTES / WORD_SIZE;\nglobal NUM_KECCAK_LANES: u32 = 25;\n\n#[foreign(keccakf1600)]\npub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {}\n\n#[no_predicates]\n#[deprecated(\"keccak256 is being deprecated from the stdlib, use https://github.com/noir-lang/keccak256 instead\")]\npub(crate) fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32] {\n    assert(N >= message_size);\n\n    // Copy input to block bytes. For that we'll need at least input bytes (N)\n    // but we want it to be padded to a multiple of BLOCK_SIZE_IN_BYTES.\n    let mut block_bytes = [0; ((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES];\n    if is_unconstrained() {\n        for i in 0..message_size {\n            block_bytes[i] = input[i];\n        }\n    } else {\n        for i in 0..N {\n            if i < message_size {\n                block_bytes[i] = input[i];\n            }\n        }\n    }\n\n    //1. format_input_lanes\n    let max_blocks = (N + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    //maximum number of bytes to hash\n    let real_max_blocks = (message_size + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    let real_blocks_bytes = real_max_blocks * BLOCK_SIZE_IN_BYTES;\n\n    block_bytes[message_size] = 1;\n    block_bytes[real_blocks_bytes - 1] = 0x80;\n\n    // populate a vector of 64-bit limbs from our byte array\n    let mut sliced_buffer =\n        [0; (((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES) / WORD_SIZE];\n    for i in 0..sliced_buffer.len() {\n        let limb_start = WORD_SIZE * i;\n\n        let mut sliced = 0;\n        let mut v = 1;\n        for k in 0..WORD_SIZE {\n            sliced += v * (block_bytes[limb_start + k] as Field);\n            v *= 256;\n        }\n\n        sliced_buffer[i] = sliced as u64;\n    }\n\n    //2. sponge_absorb\n    let mut state: [u64; NUM_KECCAK_LANES] = [0; NUM_KECCAK_LANES];\n    // When in an unconstrained runtime we can take advantage of runtime loop bounds,\n    // thus allowing us to simplify the loop body.\n    if is_unconstrained() {\n        for i in 0..real_max_blocks {\n            if (i == 0) {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = sliced_buffer[j];\n                }\n            } else {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\n                }\n            }\n            state = keccakf1600(state);\n        }\n    } else {\n        // `real_max_blocks` is guaranteed to at least be `1`\n        // We peel out the first block as to avoid a conditional inside of the loop.\n        // Otherwise, a dynamic predicate can cause a blowup in a constrained runtime.\n        for j in 0..LIMBS_PER_BLOCK {\n            state[j] = sliced_buffer[j];\n        }\n        state = keccakf1600(state);\n        for i in 1..max_blocks {\n            if i < real_max_blocks {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\n                }\n                state = keccakf1600(state);\n            }\n        }\n    }\n\n    //3. sponge_squeeze\n    let mut result = [0; 32];\n    for i in 0..4 {\n        let lane = state[i] as Field;\n        let lane_le: [u8; 8] = lane.to_le_bytes();\n        for j in 0..8 {\n            result[8 * i + j] = lane_le[j];\n        }\n    }\n    result\n}\n\nmod tests {\n    use super::keccak256;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x5a, 0x50, 0x2f, 0x9f, 0xca, 0x46, 0x7b, 0x26, 0x6d, 0x5b, 0x78, 0x33, 0x65, 0x19,\n            0x37, 0xe8, 0x05, 0x27, 0x0c, 0xa3, 0xf3, 0xaf, 0x1c, 0x0d, 0xd2, 0x46, 0x2d, 0xca,\n            0x4b, 0x3b, 0x1a, 0xbf,\n        ];\n        assert_eq(keccak256(input, input.len()), result);\n    }\n\n    #[test]\n    fn hash_hello_world() {\n        let input = \"Hello world!\".as_bytes();\n        let result = [\n            0xec, 0xd0, 0xe1, 0x8, 0xa9, 0x8e, 0x19, 0x2a, 0xf1, 0xd2, 0xc2, 0x50, 0x55, 0xf4, 0xe3,\n            0xbe, 0xd7, 0x84, 0xb5, 0xc8, 0x77, 0x20, 0x4e, 0x73, 0x21, 0x9a, 0x52, 0x3, 0x25, 0x1f,\n            0xea, 0xab,\n        ];\n        assert_eq(keccak256(input, input.len()), result);\n    }\n\n    #[test]\n    fn var_size_hash() {\n        let input = [\n            189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205,\n            206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222,\n            223,\n        ];\n        let result = [\n            226, 37, 115, 94, 94, 196, 72, 116, 194, 105, 79, 233, 65, 12, 30, 94, 181, 131, 170,\n            219, 171, 166, 236, 88, 143, 67, 255, 160, 248, 214, 39, 129,\n        ];\n        assert_eq(keccak256(input, 13), result);\n    }\n\n    #[test]\n    fn hash_longer_than_136_bytes() {\n        let input = \"123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789\"\n            .as_bytes();\n        assert(input.len() > 136);\n\n        let result = [\n            0x1d, 0xca, 0xeb, 0xdf, 0xd9, 0xd6, 0x24, 0x67, 0x1c, 0x18, 0x16, 0xda, 0xd, 0x8a, 0xeb,\n            0xa8, 0x75, 0x71, 0x2c, 0xc, 0x89, 0xe0, 0x25, 0x2, 0xe8, 0xb6, 0x5e, 0x16, 0x5, 0x55,\n            0xe4, 0x40,\n        ];\n        assert_eq(keccak256(input, input.len()), result);\n    }\n}\n","path":"std/hash/keccak.nr"},"20":{"source":"pub mod poseidon;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\nuse crate::uint128::U128;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n","path":"std/hash/mod.nr"},"29":{"source":"pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod merkle;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod sha256;\npub mod sha512;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod uint128;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n}\n","path":"std/lib.nr"},"59":{"source":"use crate::cmp::{Eq, Ord, Ordering};\nuse crate::ops::{Add, BitAnd, BitOr, BitXor, Div, Mul, Not, Rem, Shl, Shr, Sub};\nuse crate::static_assert;\nuse super::{convert::AsPrimitive, default::Default};\n\nglobal pow64: Field = 18446744073709551616; //2^64;\nglobal pow63: Field = 9223372036854775808; // 2^63;\npub struct U128 {\n    pub(crate) lo: Field,\n    pub(crate) hi: Field,\n}\n\nimpl U128 {\n\n    pub fn from_u64s_le(lo: u64, hi: u64) -> U128 {\n        // in order to handle multiplication, we need to represent the product of two u64 without overflow\n        assert(crate::field::modulus_num_bits() as u32 > 128);\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    pub fn from_u64s_be(hi: u64, lo: u64) -> U128 {\n        U128::from_u64s_le(lo, hi)\n    }\n\n    pub fn zero() -> U128 {\n        U128 { lo: 0, hi: 0 }\n    }\n\n    pub fn one() -> U128 {\n        U128 { lo: 1, hi: 0 }\n    }\n    pub fn from_le_bytes(bytes: [u8; 16]) -> U128 {\n        let mut lo = 0;\n        let mut base = 1;\n        for i in 0..8 {\n            lo += (bytes[i] as Field) * base;\n            base *= 256;\n        }\n        let mut hi = 0;\n        base = 1;\n        for i in 8..16 {\n            hi += (bytes[i] as Field) * base;\n            base *= 256;\n        }\n        U128 { lo, hi }\n    }\n\n    pub fn to_be_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_be_bytes();\n        let hi: [u8; 8] = self.hi.to_be_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = hi[i];\n            bytes[i + 8] = lo[i];\n        }\n        bytes\n    }\n\n    pub fn to_le_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_le_bytes();\n        let hi: [u8; 8] = self.hi.to_le_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = lo[i];\n            bytes[i + 8] = hi[i];\n        }\n        bytes\n    }\n\n    pub fn from_hex<let N: u32>(hex: str<N>) -> U128 {\n        let bytes = hex.as_bytes();\n        // string must starts with \"0x\"\n        assert((bytes[0] == 48) & (bytes[1] == 120), \"Invalid hexadecimal string\");\n        static_assert(N < 35, \"Input does not fit into a U128\");\n\n        let mut lo = 0;\n        let mut hi = 0;\n        let mut base = 1;\n        if N <= 18 {\n            for i in 0..N - 2 {\n                lo += U128::decode_ascii(bytes[N - i - 1]) * base;\n                base = base * 16;\n            }\n        } else {\n            for i in 0..16 {\n                lo += U128::decode_ascii(bytes[N - i - 1]) * base;\n                base = base * 16;\n            }\n            base = 1;\n            for i in 17..N - 1 {\n                hi += U128::decode_ascii(bytes[N - i]) * base;\n                base = base * 16;\n            }\n        }\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    unconstrained fn unconstrained_check_is_upper_ascii(ascii: u8) -> bool {\n        ((ascii >= 65) & (ascii <= 90)) // Between 'A' and 'Z'\n    }\n\n    pub(crate) fn decode_ascii(ascii: u8) -> Field {\n        (\n            if ascii < 58 {\n                ascii - 48\n            } else {\n                // Safety: optionally adds 32 and then check (below) the result is in 'a..f' range\n                let ascii =\n                    ascii + 32 * (unsafe { U128::unconstrained_check_is_upper_ascii(ascii) as u8 });\n                assert(ascii >= 97); // enforce >= 'a'\n                assert(ascii <= 102); // enforce <= 'f'\n                ascii - 87\n            }\n        ) as Field\n    }\n\n    // TODO: Replace with a faster version.\n    // A circuit that uses this function can be slow to compute\n    // (we're doing up to 127 calls to compute the quotient)\n    unconstrained fn unconstrained_div(self: Self, b: U128) -> (U128, U128) {\n        if b == U128::zero() {\n            // Return 0,0 to avoid eternal loop\n            (U128::zero(), U128::zero())\n        } else if self < b {\n            (U128::zero(), self)\n        } else if self == b {\n            (U128::one(), U128::zero())\n        } else {\n            let (q, r) = if b.hi as u64 >= pow63 as u64 {\n                // The result of multiplication by 2 would overflow\n                (U128::zero(), self)\n            } else {\n                self.unconstrained_div(b * U128::from_u64s_le(2, 0))\n            };\n            let q_mul_2 = q * U128::from_u64s_le(2, 0);\n            if r < b {\n                (q_mul_2, r)\n            } else {\n                (q_mul_2 + U128::one(), r - b)\n            }\n        }\n    }\n\n    pub fn from_integer<T>(i: T) -> U128\n    where\n        T: AsPrimitive<Field>,\n    {\n        let f = i.as_();\n        // Reject values which would overflow a u128\n        f.assert_max_bit_size::<128>();\n        let lo = f as u64 as Field;\n        let hi = (f - lo) / pow64;\n        U128 { lo, hi }\n    }\n\n    pub fn to_integer<T>(self) -> T\n    where\n        Field: AsPrimitive<T>,\n    {\n        AsPrimitive::as_(self.lo + self.hi * pow64)\n    }\n\n    fn wrapping_mul(self: Self, b: U128) -> U128 {\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.lo * b.hi + self.hi * b.lo + carry;\n        let hi = high as u64 as Field;\n        U128 { lo, hi }\n    }\n}\n\nimpl Add for U128 {\n    fn add(self: Self, b: U128) -> U128 {\n        let low = self.lo + b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.hi + b.hi + carry;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to add with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Sub for U128 {\n    fn sub(self: Self, b: U128) -> U128 {\n        let low = pow64 + self.lo - b.lo;\n        let lo = low as u64 as Field;\n        let borrow = (low == lo) as Field;\n        let high = self.hi - b.hi - borrow;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to subtract with underflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Mul for U128 {\n    fn mul(self: Self, b: U128) -> U128 {\n        assert(self.hi * b.hi == 0, \"attempt to multiply with overflow\");\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = if crate::field::modulus_num_bits() as u32 > 196 {\n            (self.lo + self.hi) * (b.lo + b.hi) - low + carry\n        } else {\n            self.lo * b.hi + self.hi * b.lo + carry\n        };\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to multiply with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Div for U128 {\n    fn div(self: Self, b: U128) -> U128 {\n        // Safety: euclidian division is asserted to be correct: assert(a == b * q + r); and assert(r < b);\n        // Furthermore, U128 addition and multiplication ensures that b * q + r does not overflow\n        unsafe {\n            let (q, r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n            q\n        }\n    }\n}\n\nimpl Rem for U128 {\n    fn rem(self: Self, b: U128) -> U128 {\n        // Safety: cf div() above\n        unsafe {\n            let (q, r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n\n            r\n        }\n    }\n}\n\nimpl Eq for U128 {\n    fn eq(self: Self, b: U128) -> bool {\n        (self.lo == b.lo) & (self.hi == b.hi)\n    }\n}\n\nimpl Ord for U128 {\n    fn cmp(self, other: Self) -> Ordering {\n        let hi_ordering = (self.hi as u64).cmp((other.hi as u64));\n        let lo_ordering = (self.lo as u64).cmp((other.lo as u64));\n\n        if hi_ordering == Ordering::equal() {\n            lo_ordering\n        } else {\n            hi_ordering\n        }\n    }\n}\n\nimpl Not for U128 {\n    fn not(self) -> U128 {\n        U128 { lo: (!(self.lo as u64)) as Field, hi: (!(self.hi as u64)) as Field }\n    }\n}\n\nimpl BitOr for U128 {\n    fn bitor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) | (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) | (other.hi as u64)) as Field,\n        }\n    }\n}\n\nimpl BitAnd for U128 {\n    fn bitand(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) & (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) & (other.hi as u64)) as Field,\n        }\n    }\n}\n\nimpl BitXor for U128 {\n    fn bitxor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) ^ (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) ^ (other.hi as u64)) as Field,\n        }\n    }\n}\n\nimpl Shl for U128 {\n    fn shl(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift left with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self.wrapping_mul(U128::from_integer(y))\n    }\n}\n\nimpl Shr for U128 {\n    fn shr(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift right with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self / U128::from_integer(y)\n    }\n}\n\nimpl Default for U128 {\n    fn default() -> Self {\n        U128::zero()\n    }\n}\n\nmod tests {\n    use crate::default::Default;\n    use crate::ops::Not;\n    use crate::uint128::{pow63, pow64, U128};\n\n    #[test]\n    fn test_not(lo: u64, hi: u64) {\n        let num = U128::from_u64s_le(lo, hi);\n        let not_num = num.not();\n\n        assert_eq(not_num.hi, (hi.not() as Field));\n        assert_eq(not_num.lo, (lo.not() as Field));\n\n        let not_not_num = not_num.not();\n        assert_eq(num, not_not_num);\n    }\n    #[test]\n    fn test_construction() {\n        // Check little-endian u64 is inversed with big-endian u64 construction\n        let a = U128::from_u64s_le(2, 1);\n        let b = U128::from_u64s_be(1, 2);\n        assert_eq(a, b);\n        // Check byte construction is equivalent\n        let c = U128::from_le_bytes([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n        let d = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        assert_eq(c, d);\n    }\n    #[test]\n    fn test_byte_decomposition() {\n        let a = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        // Get big-endian and little-endian byte decompostions\n        let le_bytes_a = a.to_le_bytes();\n        let be_bytes_a = a.to_be_bytes();\n\n        // Check equivalence\n        for i in 0..16 {\n            assert_eq(le_bytes_a[i], be_bytes_a[15 - i]);\n        }\n        // Reconstruct U128 from byte decomposition\n        let b = U128::from_le_bytes(le_bytes_a);\n        // Check that it's the same element\n        assert_eq(a, b);\n    }\n    #[test]\n    fn test_hex_constuction() {\n        let a = U128::from_u64s_le(0x1, 0x2);\n        let b = U128::from_hex(\"0x20000000000000001\");\n        assert_eq(a, b);\n\n        let c = U128::from_hex(\"0xffffffffffffffffffffffffffffffff\");\n        let d = U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff);\n        assert_eq(c, d);\n\n        let e = U128::from_hex(\"0x00000000000000000000000000000000\");\n        let f = U128::from_u64s_le(0, 0);\n        assert_eq(e, f);\n    }\n\n    // Ascii decode tests\n\n    #[test]\n    fn test_ascii_decode_correct_range() {\n        // '0'..'9' range\n        for i in 0..10 {\n            let decoded = U128::decode_ascii(48 + i);\n            assert_eq(decoded, i as Field);\n        }\n        // 'A'..'F' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(65 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n        // 'a'..'f' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(97 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_0() {\n        crate::println(U128::decode_ascii(0));\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_1() {\n        crate::println(U128::decode_ascii(47));\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_0() {\n        let _ = U128::decode_ascii(58);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_1() {\n        let _ = U128::decode_ascii(64);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_0() {\n        let _ = U128::decode_ascii(71);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_1() {\n        let _ = U128::decode_ascii(96);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_greater_than_102_fails() {\n        let _ = U128::decode_ascii(103);\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_regression() {\n        // This code will actually fail because of ascii_decode,\n        // but in the past it was possible to create a value > (1<<128)\n        let a = U128::from_hex(\"0x~fffffffffffffffffffffffffffffff\");\n        let b: Field = a.to_integer();\n        let c: [u8; 17] = b.to_le_bytes();\n        assert(c[16] != 0);\n    }\n\n    #[test]\n    fn test_unconstrained_div() {\n        // Test the potential overflow case\n        let a = U128::from_u64s_le(0x0, 0xffffffffffffffff);\n        let b = U128::from_u64s_le(0x0, 0xfffffffffffffffe);\n        let c = U128::one();\n        let d = U128::from_u64s_le(0x0, 0x1);\n        // Safety: testing context\n        unsafe {\n            let (q, r) = a.unconstrained_div(b);\n            assert_eq(q, c);\n            assert_eq(r, d);\n        }\n\n        let a = U128::from_u64s_le(2, 0);\n        let b = U128::one();\n        // Check the case where a is a multiple of b\n        // Safety: testing context\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (a, U128::zero()));\n        }\n\n        // Check where b is a multiple of a\n        // Safety: testing context\n        unsafe {\n            let (c, d) = b.unconstrained_div(a);\n            assert_eq((c, d), (U128::zero(), b));\n        }\n\n        // Dividing by zero returns 0,0\n        let a = U128::from_u64s_le(0x1, 0x0);\n        let b = U128::zero();\n        // Safety: testing context\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (U128::zero(), U128::zero()));\n        }\n        // Dividing 1<<127 by 1<<127 (special case)\n        let a = U128::from_u64s_le(0x0, pow63 as u64);\n        let b = U128::from_u64s_le(0x0, pow63 as u64);\n        // Safety: testing context\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (U128::one(), U128::zero()));\n        }\n    }\n\n    #[test]\n    fn integer_conversions() {\n        // Maximum\n        let start: Field = 0xffffffffffffffffffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Minimum\n        let start: Field = 0x0;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Low limb\n        let start: Field = 0xffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // High limb\n        let start: Field = 0xffffffffffffffff0000000000000000;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn integer_conversions_fuzz(lo: u64, hi: u64) {\n        let start: Field = (lo as Field) + pow64 * (hi as Field);\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        // 1*0==0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::one()));\n\n        // 0*1==0\n        assert_eq(U128::zero(), U128::one().wrapping_mul(U128::zero()));\n\n        // 1*1==1\n        assert_eq(U128::one(), U128::one().wrapping_mul(U128::one()));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::zero()));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::from_u64s_le(0, 1).wrapping_mul(U128::one()));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::one().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::from_u64s_le(0, 1)));\n        // -1 * -1 == 1\n        assert_eq(\n            U128::one(),\n            U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff).wrapping_mul(\n                U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff),\n            ),\n        );\n    }\n\n    #[test]\n    fn test_default() {\n        assert_eq(U128::default(), U128::zero());\n    }\n}\n","path":"std/uint128.nr"},"61":{"source":"use dep::ethereum::account_with_storage::{get_header, StorageWithinBlock};\r\nuse dep::ethereum::misc::types::{Address, Bytes32};\r\nuse dep::ethereum::account::{get_account, AccountWithinBlock, MAX_PREFIXED_KEY_NIBBLE_LEN};\r\nuse dep::ethereum::merkle_patricia_proofs::proof::{ProofInput, Key, Value, Proof, Node, Leaf, verify_merkle_proof};\r\nuse dep::ethereum::verifiers::storage::verify_storage_values;\r\nuse dep::ethereum::account_with_storage::get_account_with_storage;\r\nuse dep::hydra::bn254::{enc, dec};\r\nuse dep::keccak256::keccak256;\r\n\r\n\r\n// Alice sign nonce n & n-1\r\n// n-1 is hashed and check that keccak(sig(n-1))) exist in the storage of the contract\r\n// if it does, prove state of balanceCommit exist for that key(keccak(sig(n-1)))\r\n// use sig(n-1) to decrypt the balanceCommit of n-1 and save the value\r\n\r\n// updated Finalbalance = receipt_balance_change + n-1 decrypted balanceCommit\r\n// encrypt the FinalBalance with sign(n)\r\n\r\n// output chain_id, block_number, keccak(sign(n))[commit2], encrypted_FinalBalance\r\n\r\n\r\n// Helper function to create 64-byte signature from 65-byte input\r\nfn create_64_byte_signature(signature: [u8; 65]) -> [u8; 64] {\r\n    let mut sig_64: [u8; 64] = [0; 64];\r\n    for i in 0..64 {\r\n        sig_64[i] = signature[i];\r\n    }\r\n    sig_64\r\n}\r\n\r\n// Helper function to compute storage key\r\nfn compute_storage_key(commit_hash: [u8; 32], balance_commit_slot: u8) -> [u8; 32] {\r\n    let mut key_and_slot: [u8; 64] = [0; 64];\r\n    for i in 0..32 {\r\n        key_and_slot[i] = commit_hash[i];\r\n    }\r\n    key_and_slot[63] = balance_commit_slot;\r\n    keccak256(key_and_slot, 64)\r\n}\r\n\r\n// Helper function to compute final balance\r\nfn compute_final_balance(\r\n    decrypt_signature: [u8; 65],  // Signature to decrypt with (sig1)\r\n    encrypt_signature: [u8; 65],  // Signature to encrypt with (sig2)\r\n    encrypted_balance: Field,\r\n    amount: Field,\r\n    is_addition: bool\r\n) -> Field {\r\n    let iv = [0, 0, 0, 0];\r\n    \r\n    println(\"---- BALANCE COMPUTATION ----\");\r\n    println(\"Encrypted balance input:\");\r\n    println(encrypted_balance);\r\n    \r\n    // 1. Decrypt the balance using sig1\r\n    let decrypted_balance = decrypt_balance(decrypt_signature, encrypted_balance);\r\n    println(\"Decrypted balance:\");\r\n    println(decrypted_balance);\r\n    \r\n    // 2. Apply amount operation (add or subtract)\r\n    let new_balance = if is_addition {\r\n        decrypted_balance + amount\r\n    } else {\r\n        // For withdrawals, ensure we have enough balance\r\n        let balance_u64 = decrypted_balance as u64;\r\n        let amount_u64 = amount as u64;\r\n        assert(balance_u64 >= amount_u64, \"Insufficient balance for withdrawal\");\r\n        decrypted_balance - amount\r\n    };\r\n    println(\"New balance after operation:\");\r\n    println(new_balance);\r\n    \r\n    // 3. Encrypt the new balance using sig2\r\n    let new_key = derive_key_from_signature(encrypt_signature);\r\n    let balance_fields = [new_balance, 0, 0, 0, 0, 0, 0, 0];\r\n    let encrypted_fields = enc::encrypt(balance_fields, new_key, iv);\r\n    \r\n    println(\"Final encrypted balance:\");\r\n    println(encrypted_fields[0]);\r\n    println(\"---- END BALANCE COMPUTATION ----\");\r\n    \r\n    encrypted_fields[0]\r\n}\r\n\r\nfn main(\r\n    alice_signature_nonce_1: [u8; 65],\r\n    alice_signature_nonce_2: [u8; 65],\r\n    chain_id: pub Field,\r\n    block_number: u64,\r\n    message_nonce_1: u64,\r\n    message_nonce_2: u64,\r\n    pub_x_1: [u8; 32],\r\n    pub_y_1: [u8; 32],\r\n    pub_x_2: [u8; 32],\r\n    pub_y_2: [u8; 32],\r\n    contract_address: Address,\r\n    amount: pub Field,\r\n    is_deposit: bool,  // true for deposit, false for withdrawal\r\n) -> pub (Field, Field, Field, Field, Field, Field, Field, Field) {\r\n    // Create 64-byte signatures\r\n    let sig_64_1 = create_64_byte_signature(alice_signature_nonce_1);\r\n    let sig_64_2 = create_64_byte_signature(alice_signature_nonce_2);\r\n\r\n    // Compute hashed messages\r\n    let hashed_message_1 = hash_u64(message_nonce_1);\r\n    let hashed_message_2 = hash_u64(message_nonce_2);\r\n\r\n    // Verify signatures\r\n    assert(std::ecdsa_secp256k1::verify_signature(pub_x_1, pub_y_1, sig_64_1, hashed_message_1));\r\n    if message_nonce_1 != 0 {\r\n        assert(std::ecdsa_secp256k1::verify_signature(pub_x_2, pub_y_2, sig_64_2, hashed_message_2));\r\n    }\r\n\r\n    // Compute commitment hashes\r\n    let commit_1_hash = keccak256(hex_bytes_to_ascii(alice_signature_nonce_1), 132);\r\n    let commit_2_hash = keccak256(hex_bytes_to_ascii(alice_signature_nonce_2), 132);\r\n\r\n    // Initialize variables that will be used in both branches\r\n    let mut final_chain_id = chain_id;\r\n    let mut final_block_number = block_number as Field;\r\n    let mut final_contract_address = address_to_field(contract_address);\r\n    let mut final_block_hash: Field = 0;\r\n    let mut final_nullifier: [u8; 32] = [0; 32];\r\n    let mut final_encrypted_balance: Field = 0;\r\n    let mut final_commit_hash: [u8; 32] = [0; 32];\r\n    let mut final_amount = amount;\r\n\r\n    // Handle initial state (message_nonce_1 == 0)\r\n    if message_nonce_1 == 0 {\r\n        // For initial state, we only allow deposits\r\n        assert(is_deposit, \"Initial state only supports deposits\");\r\n        \r\n        final_nullifier = keccak256(keccak256(hex_bytes_to_ascii(alice_signature_nonce_2), 132), 32);\r\n        final_encrypted_balance = compute_final_balance(\r\n            alice_signature_nonce_2,  // For initial state, we use sig2 for both\r\n            alice_signature_nonce_2,  // For initial state, we use sig2 for both\r\n            amount,\r\n            amount,\r\n            true  // Always add for initial deposit\r\n        );\r\n        final_commit_hash = commit_1_hash;\r\n    } else {\r\n        // Handle normal state transition (deposit or withdrawal)\r\n        let balance_commit_slot = 2;\r\n        let commit_1_storage_key = compute_storage_key(commit_1_hash, balance_commit_slot);\r\n        let balance_commit_1_storage_key = compute_storage_key(commit_2_hash, balance_commit_slot);\r\n\r\n        // Get verified storage values\r\n        let commit_1_verified_storage = unsafe {\r\n            get_account_with_storage(\r\n                chain_id,\r\n                block_number,\r\n                contract_address,\r\n                commit_1_storage_key\r\n            )\r\n        };\r\n\r\n        // Compute final balance\r\n        let encrypted_balance = safe_storage_to_field(commit_1_verified_storage.values[0]);\r\n        final_encrypted_balance = compute_final_balance(\r\n            alice_signature_nonce_1,  // Use sig1 to decrypt\r\n            alice_signature_nonce_2,  // Use sig2 to encrypt\r\n            encrypted_balance,\r\n            amount,\r\n            is_deposit  // true for deposit (add), false for withdrawal (subtract)\r\n        );\r\n\r\n        // Compute nullifier\r\n        final_nullifier = keccak256(keccak256(hex_bytes_to_ascii(alice_signature_nonce_2), 132), 32);\r\n        final_block_hash = bytes_to_field(commit_1_verified_storage.block_hash);\r\n        final_commit_hash = commit_2_hash;\r\n    }\r\n\r\n    \r\n    // Return final state\r\n    (\r\n        final_chain_id,\r\n        final_block_number,\r\n        final_contract_address,\r\n        final_block_hash,\r\n        bytes_to_field(final_nullifier),\r\n        final_encrypted_balance,\r\n        bytes_to_field(final_commit_hash),\r\n        final_amount\r\n    )\r\n}\r\n\r\n// Define a larger key size that can accommodate the nibble conversion of a 32-byte key\r\nglobal LARGER_KEY_SIZE: u32 = 132; // 2 * 32 + 68 (extra space for prefix)\r\n\r\n// Derive a deterministic key from a signature\r\nfn derive_key_from_signature(signature: [u8; 65]) -> [Field; 4] {\r\n    let mut key = [0; 4];\r\n    for i in 0..4 {\r\n        let mut value: u64 = 0;\r\n        for j in 0..4 {\r\n            value = (value << 8) | (signature[i * 4 + j] as u64);\r\n        }\r\n        key[i] = value as Field;\r\n    }\r\n    key\r\n}\r\n\r\nfn decrypt_balance(\r\n    // Signature data\r\n    signature: [u8; 65],\r\n    \r\n    // Encrypted balance (field element)\r\n    encrypted_balance: Field,\r\n) -> pub Field {\r\n    // Derive key from signature (same as encryption)\r\n    let key = derive_key_from_signature(signature);\r\n    \r\n    // Create a fixed IV (same as encryption)\r\n    let iv = [0, 0, 0, 0];\r\n    \r\n    // Create encrypted fields array\r\n    let encrypted_fields = [encrypted_balance, 0, 0, 0, 0, 0, 0, 0];\r\n\r\n    \r\n    // Decrypt the fields\r\n    let decrypted_fields = dec::decrypt(encrypted_fields, key, iv);\r\n    \r\n    \r\n    // Return the first decrypted field element\r\n    decrypted_fields[0]\r\n}\r\n\r\n// Helper function to convert a single hex nibble to its ASCII character\r\nfn nibble_to_ascii(nibble: u8) -> u8 {\r\n    if nibble < 10 {\r\n        nibble + 48  // '0' to '9'\r\n    } else {\r\n        nibble + 87  // 'a' to 'f'\r\n    }\r\n}\r\n\r\n// Function to convert hex bytes to ASCII string representation\r\nfn hex_bytes_to_ascii(hex_bytes: [u8; 65]) -> [u8; 132] {\r\n    let mut result: [u8; 132] = [0; 132];\r\n    \r\n    // Add \"0x\" prefix\r\n    result[0] = 48;  // '0'\r\n    result[1] = 120; // 'x'\r\n    \r\n    // Convert each byte to two ASCII characters\r\n    for i in 0..65 {\r\n        let byte = hex_bytes[i];\r\n        let high_nibble = byte >> 4;\r\n        let low_nibble = byte & 0x0f;\r\n        \r\n        result[2 + i * 2] = nibble_to_ascii(high_nibble);\r\n        result[2 + i * 2 + 1] = nibble_to_ascii(low_nibble);\r\n    }\r\n    \r\n    result\r\n}\r\n\r\n// Function to convert bytes to a Field value\r\nfn bytes_to_field(bytes: [u8; 32]) -> Field {\r\n    let mut result: Field = 0;\r\n    \r\n    // Convert bytes to field\r\n    for i in 0..32 {\r\n        result = result * 256 + (bytes[i] as Field);\r\n    }\r\n    \r\n    result\r\n}\r\n\r\n// Function to convert Address (20 bytes) to Field\r\nfn address_to_field(address: Address) -> Field {\r\n    let mut result: Field = 0;\r\n    \r\n    // Convert bytes to field\r\n    for i in 0..20 {\r\n        result = result * 256 + (address[i] as Field);\r\n    }\r\n    \r\n    result\r\n}\r\n\r\n// Function to safely convert storage value to field\r\nfn safe_storage_to_field(storage_value: [u8; 32]) -> Field {\r\n    // Convert bytes to field directly\r\n    // Noir's field type automatically handles overflow\r\n    bytes_to_field(storage_value)\r\n}\r\n\r\n// Unconstrained function to convert u64 to ASCII bytes\r\nunconstrained fn u64_to_ascii_bytes(value: u64) -> [u8; 20] {\r\n    let mut result: [u8; 20] = [0; 20];\r\n    let mut temp = value;\r\n    let mut pos = 19;\r\n    \r\n    // Handle zero case\r\n    if value == 0 {\r\n        result[19] = 48; // '0'\r\n    } else {\r\n        // Convert each digit to ASCII\r\n        while temp > 0 {\r\n            let digit = (temp % 10) as u8;\r\n            result[pos] = digit + 48; // Convert to ASCII\r\n            temp = temp / 10;\r\n            if pos > 0 {\r\n                pos -= 1;\r\n            }\r\n        }\r\n    }\r\n    \r\n    // Shift all digits to the right\r\n    let mut shifted: [u8; 20] = [0; 20];\r\n    let mut count = 0;\r\n    for i in 0..20 {\r\n        if result[i] != 0 {\r\n            count += 1;\r\n        }\r\n    }\r\n    \r\n    for i in 0..count {\r\n        shifted[20 - count + i] = result[20 - count + i];\r\n    }\r\n    \r\n    shifted\r\n}\r\n\r\n// Function to hash a u64 value using Keccak256\r\nfn hash_u64(value: u64) -> [u8; 32] {\r\n    // Convert value to ASCII bytes using unconstrained function\r\n    let digits = unsafe { u64_to_ascii_bytes(value) };\r\n    \r\n    // Count non-zero digits\r\n    let mut digit_count = 0;\r\n    for i in 0..20 {\r\n        if digits[i] != 0 {\r\n            digit_count += 1;\r\n        }\r\n    }\r\n    \r\n    // Copy digits to message\r\n    let mut message: [u8; 64] = [0; 64];\r\n    for i in 0..20 {\r\n        if i < digit_count {\r\n            message[i] = digits[20 - digit_count + i];\r\n        }\r\n    }\r\n    \r\n    // Hash the digits\r\n    keccak256(message, digit_count)\r\n}\r\n\r\n\r\n#[test]\r\nfn test_hash_u64_values() {\r\n    // Test with 1\r\n    let hash_1 = hash_u64(1);\r\n    let expected_hash_1: [u8; 32] = [\r\n        0xc8, 0x9e, 0xfd, 0xaa, 0x54, 0xc0, 0xf2, 0x0c, 0x7a, 0xdf, 0x61, 0x28, 0x82, 0xdf, 0x09, 0x50,\r\n        0xf5, 0xa9, 0x51, 0x63, 0x7e, 0x03, 0x07, 0xcd, 0xcb, 0x4c, 0x67, 0x2f, 0x29, 0x8b, 0x8b, 0xc6\r\n    ];\r\n    assert(hash_1 == expected_hash_1);\r\n    \r\n    // Test with 10\r\n    let hash_10 = hash_u64(10);\r\n    let expected_hash_10: [u8; 32] = [\r\n        0x1a, 0x19, 0x2f, 0xab, 0xce, 0x13, 0x98, 0x8b, 0x84, 0x99, 0x4d, 0x42, 0x96, 0xe6, 0xcd, 0xc4,\r\n        0x18, 0xd5, 0x5e, 0x2f, 0x1d, 0x7f, 0x94, 0x21, 0x88, 0xd4, 0x04, 0x0b, 0x94, 0xfc, 0x57, 0xac\r\n    ];\r\n    assert(hash_10 == expected_hash_10);\r\n    \r\n    // Test with 100\r\n    let hash_100 = hash_u64(100);\r\n    let expected_hash_100: [u8; 32] = [\r\n        0x8c, 0x18, 0x21, 0x0d, 0xf0, 0xd9, 0x51, 0x4f, 0x2d, 0x2e, 0x5d, 0x8c, 0xa7, 0xc1, 0x00, 0x97,\r\n        0x82, 0x19, 0xee, 0x80, 0xd3, 0x96, 0x8a, 0xd8, 0x50, 0xab, 0x5e, 0xad, 0x20, 0x82, 0x87, 0xb3\r\n    ];\r\n    assert(hash_100 == expected_hash_100);\r\n    \r\n    // Print the hashes for verification\r\n    println(\"Hash of 1:\");\r\n    println(hash_1);\r\n    println(\"Hash of 10:\");\r\n    println(hash_10);\r\n    println(\"Hash of 100:\");\r\n    println(hash_100);\r\n}\r\n\r\n#[test]\r\nfn test_shield() {\r\n    // Chain ID for Sepolia testnet\r\n    let chain_id = 11155111;\r\n    \r\n    // Block number\r\n    let block_number = 8233854;\r\n    \r\n    // Message nonces\r\n    let message_nonce_1 = 1;\r\n    let message_nonce_2 = 2;\r\n    \r\n    // contract_address to check - using the correct type\r\n    let contract_address: Address = [0x58, 0x2B, 0xEE, 0x8f, 0x43, 0xBF, 0x20, 0x39, 0x64, 0xd3, 0x8c, 0x54, 0xFA, 0x03, 0xe6, 0x2d, 0x61, 0x61, 0x59, 0xfA];\r\n    \r\n    // Signatures (65 bytes)\r\n    let alice_signature_nonce_1: [u8; 65] = [\r\n        0x07, 0x2f, 0x3e, 0x1e, 0x23, 0xa2, 0x17, 0xbd, 0xc3, 0xc4, 0x1b, 0x4c, 0x61, 0x35, 0x2b, 0xcc,\r\n        0x78, 0xd8, 0x14, 0x0e, 0xb9, 0x81, 0x0b, 0xd3, 0xd3, 0x60, 0x37, 0xfb, 0x65, 0xc7, 0xaf, 0x40,\r\n        0x6d, 0x4c, 0x37, 0x72, 0xb0, 0xc4, 0xd4, 0xfb, 0x29, 0x8c, 0xec, 0x36, 0xd0, 0x9d, 0x64, 0x6f,\r\n        0xf6, 0xa2, 0x49, 0x71, 0x0e, 0x43, 0xcd, 0xf2, 0x85, 0x6e, 0x5d, 0x4e, 0xfd, 0xbf, 0x7b, 0xd3,\r\n        0x1c\r\n    ];\r\n    let alice_signature_nonce_2: [u8; 65] = [\r\n        0x47, 0x65, 0xf9, 0xcb, 0xeb, 0xb3, 0xff, 0x25, 0x24, 0x5f, 0xc8, 0xe3, 0x81, 0x8f, 0x36, 0xa2,\r\n        0xf4, 0xfa, 0x09, 0xf9, 0x89, 0xd3, 0x20, 0xcd, 0xef, 0xc4, 0x65, 0xb2, 0x95, 0xd6, 0xa0, 0xaf,\r\n        0x37, 0x73, 0x11, 0x57, 0x5a, 0xc4, 0x51, 0x99, 0xd9, 0xab, 0x0a, 0x9f, 0x58, 0x54, 0x3f, 0x12,\r\n        0xf2, 0x5e, 0x33, 0xdc, 0xc4, 0xc7, 0xe7, 0xf0, 0x93, 0x19, 0x88, 0x68, 0x20, 0x88, 0xb6, 0xe7,\r\n        0x1c\r\n    ];\r\n\r\n    // Public key coordinates\r\n    let pub_x_1: [u8; 32] = [\r\n        0xca, 0xb1, 0x4a, 0x0b, 0xb5, 0x57, 0xdf, 0xe9, 0x0a, 0x26, 0x8d, 0xcd, 0x04, 0xf1, 0x7e, 0x2e,\r\n        0xa8, 0xd8, 0xcc, 0xd5, 0x57, 0x71, 0xaa, 0x18, 0xec, 0x72, 0x3a, 0xf2, 0xee, 0x45, 0x92, 0xe6\r\n    ];\r\n    let pub_y_1: [u8; 32] = [\r\n        0x75, 0xd4, 0x4b, 0xb8, 0xbc, 0x98, 0xdb, 0x93, 0x24, 0x0f, 0x48, 0x07, 0x7c, 0x63, 0xaa, 0x4b,\r\n        0x29, 0xd5, 0x9a, 0xa3, 0x35, 0xcf, 0xf4, 0xb2, 0xa0, 0x88, 0x23, 0x4f, 0x69, 0xc2, 0x2e, 0xba\r\n    ];\r\n\r\n    // Using same public key for both signatures\r\n    let pub_x_2: [u8; 32] = [\r\n        0x97, 0x0f, 0xaa, 0x1e, 0xf6, 0xfd, 0xfe, 0xdc, 0xc5, 0x21, 0x56, 0xe4, 0x88, 0x0d, 0x2a, 0x0d,\r\n        0xce, 0x57, 0xaf, 0xfa, 0xf1, 0x99, 0xe6, 0x60, 0x8e, 0x9b, 0x23, 0xc9, 0xf0, 0x85, 0xd2, 0xd1\r\n    ];\r\n    let pub_y_2: [u8; 32] = [\r\n        0x34, 0x2a, 0x1e, 0xa1, 0xd1, 0x84, 0x38, 0x92, 0x34, 0x7a, 0x8f, 0x9a, 0x0d, 0xcb, 0x09, 0x72,\r\n        0xfc, 0xd0, 0x3f, 0xe0, 0x17, 0xd2, 0x6c, 0xb2, 0xb4, 0xcd, 0xd4, 0x63, 0xbf, 0x7b, 0x9a, 0xf2\r\n    ];\r\n    \r\n    let amount = 100;\r\n    let is_deposit = true;  // Set to true for deposit, false for withdrawal\r\n    \r\n    let (chain_id, block_number, contract_address, block_hash, nullifier, encrypted_balance, commit_2_hash, amount) = main(\r\n        alice_signature_nonce_1, \r\n        alice_signature_nonce_2, \r\n        chain_id, \r\n        block_number,\r\n        message_nonce_1,\r\n        message_nonce_2,\r\n        pub_x_1,\r\n        pub_y_1,\r\n        pub_x_2,\r\n        pub_y_2,\r\n        contract_address, \r\n        amount,\r\n        is_deposit\r\n    );\r\n    println(\"---- CIRCUIT OUTPUT ----\");\r\n    println(\"chain_id\");\r\n    println(chain_id);\r\n    println(\"block_number\");\r\n    println(block_number);\r\n    println(\"contract_address\");\r\n    println(contract_address);\r\n    println(\"block_hash\");\r\n    println(block_hash);\r\n    println(\"nullifier\");\r\n    println(nullifier);\r\n    println(\"encrypted_balance\");\r\n    println(encrypted_balance);\r\n    println(\"commit_2_hash\");\r\n    println(commit_2_hash);\r\n    println(\"amount\");\r\n    println(amount);\r\n    println(\"---- END OF CIRCUIT OUTPUT ----\");\r\n}\r\n\r\n#[test]\r\nfn test_storage_key_generation() {\r\n    // Given hash\r\n    let hash: [u8; 32] = [\r\n        0x48, 0xfc, 0x0d, 0xf3, 0x39, 0x48, 0xd2, 0x89, 0x57, 0xd5, 0xf6, 0x2e, 0xe1, 0x76, 0x43, 0xb0,\r\n        0x31, 0x1d, 0x4d, 0xda, 0x43, 0xf2, 0xcf, 0x74, 0x78, 0x39, 0x70, 0x3c, 0x52, 0xf3, 0x80, 0x98\r\n    ];\r\n    \r\n    // Create a buffer for the concatenated key and slot\r\n    let mut key_and_slot: [u8; 64] = [0; 64];\r\n    \r\n    // Copy the hash into the buffer\r\n    for i in 0..32 {\r\n        key_and_slot[i] = hash[i];\r\n    }\r\n    \r\n    // Add the slot number at the end (padded with zeros)\r\n    key_and_slot[63] = 2;  // slot 2\r\n    \r\n    // Hash the concatenated key and slot to get the storage key\r\n    let storage_key = keccak256(key_and_slot, 64);\r\n    \r\n    println(\"Original hash:\");\r\n    println(hash);\r\n    println(\"Generated storage key:\");\r\n    println(storage_key);\r\n}\r\n\r\n#[test]\r\nfn test_hex_literal_hashing() {\r\n    // The actual hex values as bytes\r\n    let hex_bytes = [\r\n        0x47, 0x65, 0xf9, 0xcb, 0xeb, 0xb3, 0xff, 0x25, 0x24, 0x5f, 0xc8, 0xe3, 0x81, 0x8f, 0x36, 0xa2,\r\n        0xf4, 0xfa, 0x09, 0xf9, 0x89, 0xd3, 0x20, 0xcd, 0xef, 0xc4, 0x65, 0xb2, 0x95, 0xd6, 0xa0, 0xaf,\r\n        0x37, 0x73, 0x11, 0x57, 0x5a, 0xc4, 0x51, 0x99, 0xd9, 0xab, 0x0a, 0x9f, 0x58, 0x54, 0x3f, 0x12,\r\n        0xf2, 0x5e, 0x33, 0xdc, 0xc4, 0xc7, 0xe7, 0xf0, 0x93, 0x19, 0x88, 0x68, 0x20, 0x88, 0xb6, 0xe7,\r\n        0x1c\r\n    ];\r\n\r\n    // Convert hex bytes to ASCII string representation\r\n    let hex_string_bytes = hex_bytes_to_ascii(hex_bytes);\r\n\r\n    println(\"Hash from ASCII string bytes (including '0x' prefix):\");\r\n    println(keccak256(hex_string_bytes, 132));\r\n\r\n    println(\"Hash from actual hex bytes:\");\r\n    println(keccak256(hex_bytes, 65));\r\n} \r\n\r\n#[test]\r\nfn test_encryption() {\r\n    let alice_signature_nonce_1: [u8; 65] = [\r\n        0x07, 0x2f, 0x3e, 0x1e, 0x23, 0xa2, 0x17, 0xbd, 0xc3, 0xc4, 0x1b, 0x4c, 0x61, 0x35, 0x2b, 0xcc,\r\n        0x78, 0xd8, 0x14, 0x0e, 0xb9, 0x81, 0x0b, 0xd3, 0xd3, 0x60, 0x37, 0xfb, 0x65, 0xc7, 0xaf, 0x40,\r\n        0x6d, 0x4c, 0x37, 0x72, 0xb0, 0xc4, 0xd4, 0xfb, 0x29, 0x8c, 0xec, 0x36, 0xd0, 0x9d, 0x64, 0x6f,\r\n        0xf6, 0xa2, 0x49, 0x71, 0x0e, 0x43, 0xcd, 0xf2, 0x85, 0x6e, 0x5d, 0x4e, 0xfd, 0xbf, 0x7b, 0xd3,\r\n        0x1c\r\n    ];\r\n\r\n    // Derive key from signature\r\n    let key = derive_key_from_signature(alice_signature_nonce_1);\r\n    println(\"Derived key:\");\r\n    println(key);\r\n\r\n    // Create IV\r\n    let iv = [0, 0, 0, 0];\r\n\r\n    // Create fields array with value 100\r\n    let original_value = 100;\r\n    let fields = [original_value, 0, 0, 0, 0, 0, 0, 0];\r\n    println(\"Fields before encryption:\");\r\n    println(fields);\r\n\r\n    // Encrypt the fields\r\n    let encrypted_fields = enc::encrypt(fields, key, iv);\r\n    println(\"Encrypted field [0]\");\r\n    println(encrypted_fields[0]);\r\n    // Decrypt the first encrypted field\r\n    \r\n    let mock_encrypted_field: Field = 0x2eeabfd4c857e8331ed5eb0f233289420796d442d022d4bdae600f7909d6a356;\r\n    \r\n    let decrypted_value = decrypt_balance(alice_signature_nonce_1, mock_encrypted_field);\r\n    println(\"Decrypted value:\");\r\n    println(decrypted_value);\r\n\r\n    // Assert that the decrypted value matches the original\r\n    assert(decrypted_value == original_value);\r\n} ","path":"/home/drone/projects/rione/circuits/main/gazometer_self/self_service/src/main.nr"},"63":{"source":"use crate::account::{MAX_ACCOUNT_DEPTH_NO_LEAF_M, MAX_ACCOUNT_LEAF_LEN, MAX_ACCOUNT_STATE_LEN};\nuse crate::header::{BlockHeaderPartial, get_header};\nuse crate::merkle_patricia_proofs::proof::ProofInput;\nuse crate::misc::{\n    bytes::right_pad,\n    fragment::Fragment,\n    types::{Address, Bytes32, BYTES32_LENGTH, HASH_LEN},\n};\nuse crate::rlp::decode::decode_string;\nuse crate::serde::Serde;\nuse crate::verifiers::account::verify_account;\nuse crate::verifiers::storage::{verify_storage_values, verify_storage_values_against_block};\n\nuse dep::std::hash::keccak256;\n\nglobal MAX_KEY_LEN: u32 = 32;\nglobal MAX_PREFIXED_KEY_NIBBLE_LEN: u32 = 66; // (MAX_KEY_LEN + 1) * 2\nglobal MAX_STORAGE_DEPTH_NO_LEAF_M: u32 = 6; // Emperically correct values to be determined after we scan ethereum state trie.\n\nglobal MAX_STORAGE_VALUE_LEN: u32 = 32; // Values taken from storageProofConfig in storage.ts.\nglobal MAX_STORAGE_LEAF_LEN: u32 = 69;\n\npub struct Account {\n    pub nonce: u64,\n    pub balance: Field,\n    pub storage_root: Bytes32,\n    pub code_hash: Bytes32,\n}\n\nimpl Eq for Account {\n    fn eq(self, other: Self) -> bool {\n        (self.nonce == other.nonce)\n            & (self.balance == other.balance)\n            & (self.storage_root == other.storage_root)\n            & (self.code_hash == other.code_hash)\n    }\n}\n\n// For now oracle does not support returning array of arrays so at the moment we support only one storage proof.\n// When https://github.com/noir-lang/noir/issues/4498 is resolved we can change to `StateAndStorageProof<N>` and `storage_proof: [StorageProof; N]`.\nstruct StateAndStorageProofInput {\n    account: Account,\n    state_proof_input: ProofInput<MAX_PREFIXED_KEY_NIBBLE_LEN, MAX_ACCOUNT_STATE_LEN, MAX_ACCOUNT_DEPTH_NO_LEAF_M, MAX_ACCOUNT_LEAF_LEN>,\n    storage_proof_input: ProofInput<MAX_PREFIXED_KEY_NIBBLE_LEN, MAX_STORAGE_VALUE_LEN, MAX_STORAGE_DEPTH_NO_LEAF_M, MAX_STORAGE_LEAF_LEN>,\n}\n\npub struct StorageWithinBlock<let N: u32> {\n    pub block_hash: Bytes32,\n    pub account: Account,\n    pub values: [Bytes32; N],\n}\n\ntype ProofInputSerialized<let LEN: u32> = [Field; LEN];\n\nimpl Eq for StorageWithinBlock<1> {\n    fn eq(self, other: Self) -> bool {\n        (self.block_hash == other.block_hash)\n            & (self.account == other.account)\n            & (self.values[0] == other.values[0])\n    }\n}\n\nfn assert_storage_key_equals(\n    storage_key: Bytes32,\n    storage_key_hash: [u8; MAX_PREFIXED_KEY_NIBBLE_LEN],\n) {\n    let storage_key_hash_fragment = Fragment::new(\n        MAX_PREFIXED_KEY_NIBBLE_LEN - HASH_LEN,\n        HASH_LEN,\n        storage_key_hash,\n    );\n    let other_storage_key_hash_fragment =\n        Fragment::from_array(keccak256(storage_key, BYTES32_LENGTH as u32));\n    assert(\n        storage_key_hash_fragment.eq(other_storage_key_hash_fragment),\n        \"Storage key does not match the argument\",\n    );\n}\n\nfn get_fragment<let N: u32>(left_padded_value: [u8; N]) -> Fragment<N, u8> {\n    let value_len = right_pad(left_padded_value).len();\n    let value_offset = N - value_len;\n    Fragment::new(value_offset, value_len, left_padded_value)\n}\n\nfn get_storage_value(\n    rlp_encoded_value: [u8; MAX_STORAGE_VALUE_LEN],\n) -> [u8; MAX_STORAGE_VALUE_LEN] {\n    let mut storage_value = get_fragment(rlp_encoded_value);\n    let rlp_fragment = decode_string(storage_value);\n    let rlp_header_len = rlp_fragment.offset;\n\n    // Storage value is maximum 32 bytes long, so its RLP-encoding's header is maximum 1 byte long.\n    assert(rlp_header_len <= 1, \"Expected RLP header to be maximum 1 byte long\");\n    if rlp_fragment.offset == 1 {\n        let rlp_header_position = storage_value.offset;\n        storage_value.data[rlp_header_position] = 0;\n    }\n\n    storage_value.data\n}\n\nunconstrained pub fn get_account_with_storage(\n    chain_id: Field,\n    block_number: u64,\n    address: Address,\n    storage_key: Bytes32,\n) -> StorageWithinBlock<1> {\n    let BlockHeaderPartial { number, hash, state_root, transactions_root: _, receipts_root: _ } =\n        unsafe { get_header(chain_id, block_number) };\n    \n    // Explicitly verify that the header is for the requested block number\n    assert(number == block_number, \"Header block number does not match requested block number\");\n    let StateAndStorageProofInput { account, state_proof_input, storage_proof_input } =\n        unsafe { get_proof_unconstrained(chain_id, block_number, address, storage_key) };\n    \n    verify_account(address, account, state_proof_input, state_root);\n\n    // Use the more robust verification against block\n \n    verify_storage_values_against_block(\n        chain_id,\n        block_number,\n        [storage_proof_input],\n        account.storage_root\n    );\n    \n    //assert_storage_key_equals(storage_key, storage_proof_input.key);\n  \n    StorageWithinBlock {\n        block_hash: hash,\n        account,\n        values: [get_storage_value(storage_proof_input.value)],\n    }\n}\n\npub fn verify_storage_proof_at_block_number(\n    chain_id: Field,\n    block_number: u64,\n    address: Address,\n    storage_key: Bytes32,\n    expected_value: Bytes32\n) -> bool {\n    // Get the block header to verify block number\n    let BlockHeaderPartial { number, hash, state_root, transactions_root: _, receipts_root: _ } =\n        unsafe { get_header(chain_id, block_number) };\n    \n    // Explicitly verify that the header is for the requested block number\n    assert(number == block_number, \"Header block number does not match requested block number\");\n \n    // Get the proof data from the oracle\n    let StateAndStorageProofInput { account, state_proof_input, storage_proof_input } =\n        unsafe { get_proof_unconstrained(chain_id, block_number, address, storage_key) };\n    \n    // Verify the account against the state root from the block header\n    verify_account(address, account, state_proof_input, state_root);\n    // Verify the storage proof against the account's storage root\n    verify_storage_values_against_block(\n        chain_id,\n        block_number,\n        [storage_proof_input],\n        account.storage_root\n    );\n\n    // Verify the storage key matches what was requested\n    assert_storage_key_equals(storage_key, storage_proof_input.key);\n    \n    // Decode the RLP-encoded value from the proof\n    let actual_value = get_storage_value(storage_proof_input.value);\n    \n    // Check if the value matches the expected value\n    actual_value == expected_value\n}\n\n#[oracle(get_proof)]\nunconstrained fn get_proof_oracle<let STATE_PROOF_INPUT_LEN: u32, let STORAGE_PROOF_INPUT: u32>(\n    _chain_id: Field,\n    _block_no: u64,\n    _address: Address,\n    _storage_key: Bytes32,\n    ) -> (Account, ProofInputSerialized<STATE_PROOF_INPUT_LEN>, ProofInputSerialized<STORAGE_PROOF_INPUT>) {}\n\nunconstrained fn get_proof_unconstrained(\n    chain_id: Field,\n    block_no: u64,\n    address: Address,\n    storage_key: Bytes32,\n) -> StateAndStorageProofInput {\n    let (account, state_proof_input, storage_proof_input) =\n        unsafe { get_proof_oracle(chain_id, block_no, address, storage_key) };\n    \n    let state_proof_input = unsafe { Serde::deserialize(state_proof_input) };\n    \n    let storage_proof_input = unsafe { Serde::deserialize(storage_proof_input) };\n    StateAndStorageProofInput { account, state_proof_input, storage_proof_input }\n}","path":"/home/drone/projects/rione/circuits/ethereum/circuits/lib/src/account_with_storage.nr"},"69":{"source":"use crate::misc::types::Bytes32;\nuse crate::verifiers::header::verify_header;\nuse crate::misc::{fragment::Fragment, types::{BYTES32_LENGTH, ADDRESS_LENGTH, Address}};\nuse crate::uint256::U256;\nuse crate::merkle_patricia_proofs::proof::{ProofInput, Proof, Node, Leaf, MAX_NODE_LEN};\nuse crate::rlp::types::RlpFragment;\nuse dep::std::mem::zeroed;\n\nglobal MAX_HEADER_RLP_LEN: u32 = 708;\n\npub struct BlockHeaderPartial {\n    pub number: u64,\n    pub hash: Bytes32,\n    pub state_root: Bytes32,\n    pub transactions_root: Bytes32,\n    pub receipts_root: Bytes32,\n}\n\npub type BlockHeaderRlp = BoundedVec<u8, MAX_HEADER_RLP_LEN>;\n\npub fn get_header(chain_id: Field, block_number: u64) -> BlockHeaderPartial {\n    let (block_header_partial, block_header_rlp) = unsafe { get_header_unconstrained(chain_id, block_number) };\n    verify_header(chain_id, block_header_partial, block_header_rlp);\n    assert(block_header_partial.number == block_number, \"Block number does not match the argument\");\n    block_header_partial\n}\n\n#[oracle(get_header)]\nunconstrained fn get_header_oracle(_chain_id: Field, _block_no: u64) -> (BlockHeaderPartial, BlockHeaderRlp) {}\n\nunconstrained fn get_header_unconstrained(chain_id: Field, block_no: u64) -> (BlockHeaderPartial, BlockHeaderRlp) {\n    unsafe { get_header_oracle(chain_id, block_no) }\n}\n\nfn alter_array(bytes: [Field; 32]) -> [u8; 32] {\n    let mut result: [u8; 32] = zeroed();\n    for i in 0..32 {\n        result[i] = bytes[i] as u8;\n    }\n    result\n}\n","path":"/home/drone/projects/rione/circuits/ethereum/circuits/lib/src/header.nr"},"72":{"source":"use crate::rlp::types::RlpList;\nuse crate::rlp::decode::{decode_to_rlp_header, decode_list_of_small_strings, decode_list};\nuse crate::misc::{\n    fragment::Fragment, arrays::{sub_array_equals_up_to_length, memcpy_up_to_length},\n    types::{Hash, HASH_LEN}, bytes::{bytes_to_nibbles, byte_to_nibbles, right_pad}\n};\nuse dep::std::hash::keccak256;\n\nglobal MAX_NODE_LEN: u32 = 532;\nglobal MAX_NODE_FIELDS: u32 = 17;\nglobal BRANCH_NODE_NUM_FIELDS: u32 = 17;\nglobal EXTENSION_NODE_NUM_FIELDS: u32 = 2;\nglobal EVEN: u32 = 0;\nglobal ODD: u32 = 1;\n\npub type Node = [u8; MAX_NODE_LEN];\npub type Leaf<let MAX_LEAF_LEN: u32> = [u8; MAX_LEAF_LEN];\npub type Key<let MAX_PREFIXED_KEY_NIBBLE_LEN: u32> = [u8; MAX_PREFIXED_KEY_NIBBLE_LEN];\npub type Value<let MAX_VALUE_LEN: u32> = [u8; MAX_VALUE_LEN];\n\npub struct Proof<let MAX_DEPTH_NO_LEAF: u32, let MAX_LEAF_LEN: u32> {\n\tpub nodes: [Node; MAX_DEPTH_NO_LEAF],\n    // Leaf has a different max length than internal node as it contains the value of arbitrary length.\n\tpub leaf: Leaf<MAX_LEAF_LEN>,\n\tpub depth: u64\n}\n\npub struct ProofInput<let MAX_PREFIXED_KEY_NIBBLE_LEN: u32, let MAX_VALUE_LEN: u32, let MAX_DEPTH_NO_LEAF: u32, let MAX_LEAF_LEN: u32> {\n    pub key: Key<MAX_PREFIXED_KEY_NIBBLE_LEN>,\n    pub value: Value<MAX_VALUE_LEN>,\n    pub proof: Proof<MAX_DEPTH_NO_LEAF, MAX_LEAF_LEN>\n}\n\nimpl<let MAX_DEPTH_NO_LEAF: u32, let MAX_LEAF_LEN: u32> Eq for Proof<MAX_DEPTH_NO_LEAF, MAX_LEAF_LEN> {\n    fn eq(self, other: Self) -> bool {\n        (self.depth == other.depth) & (self.nodes == other.nodes) & (self.leaf == other.leaf)\n    }\n}\n\nimpl<let MAX_PREFIXED_KEY_NIBBLE_LEN: u32, let MAX_VALUE_LEN: u32, let MAX_DEPTH_NO_LEAF: u32, let MAX_LEAF_LEN: u32> Eq for ProofInput<MAX_PREFIXED_KEY_NIBBLE_LEN, MAX_VALUE_LEN, MAX_DEPTH_NO_LEAF, MAX_LEAF_LEN> {\n    fn eq(self, other: Self) -> bool {\n        (self.key == other.key) & (self.value == other.value) & (self.proof == other.proof)\n    }\n}\n\npub fn get_node_len<let MAX_LEN: u32>(node: [u8; MAX_LEN]) -> u32 {\n    let node_rlp_header = decode_to_rlp_header(Fragment::from_array(node));\n    let node_unpadded_len = node_rlp_header.offset + node_rlp_header.length;\n    assert(node_unpadded_len <= MAX_LEN, \"Node RLP length exceeds MAX_LEN\");\n\n    node_unpadded_len\n}\n\n// Prefixes mean:\n// 0 - Extension node, even number of nibbles\n// 1 - Extension node, odd number of nibbles\n// 2 - Leaf node, even number of nibbles\n// 3 - Leaf node, odd number of nibbles\npub fn parity(prefix: u8) -> u32 {\n    assert(prefix < 4, \"Prefix must be 0, 1, 2 or 3\");\n    (prefix % 2) as u32\n}\n\n// Leaf and extension nodes are RLP lists with 2 elements: prefixed key nibbles (in bytes) and value.\n// This function removes the prefix and returns appropriate number of key nibbles according to the parity of the prefix (see function: parity).\npub fn strip_prefix<let MAX_PREFIXED_KEY_NIBBLE_LEN: u32>(prefixed_key_bytes: Fragment<MAX_PREFIXED_KEY_NIBBLE_LEN, u8>) -> Fragment<MAX_PREFIXED_KEY_NIBBLE_LEN, u8> {\n    let mut prefixed_key_nibbles = bytes_to_nibbles(prefixed_key_bytes);\n\n    let prefix = prefixed_key_nibbles.pop_front();\n    let parity = parity(prefix);\n    if (parity == EVEN) {\n        assert(prefixed_key_nibbles.pop_front() == 0, \"Expected a zero after a prefix of even parity\");\n    }\n\n    prefixed_key_nibbles\n}\n\npub fn extract_hash_from_branch_node<let MAX_PREFIXED_KEY_NIBBLE_LEN: u32>(\n    node: Node,\n    node_rlp_list: RlpList<MAX_NODE_FIELDS>,\n    key_nibbles: Fragment<MAX_PREFIXED_KEY_NIBBLE_LEN, u8>,\n    key_ptr: &mut u32\n) -> Fragment<HASH_LEN, u8> {\n    let curr_nibble = key_nibbles.at(*key_ptr) as u32;\n    assert(\n        node_rlp_list.get(curr_nibble).length == HASH_LEN, \"Expected a hash at position given by the key nibble\"\n    );\n    *key_ptr += 1;\n\n    Fragment::new(node_rlp_list.get(curr_nibble).offset, HASH_LEN, node).focus()\n}\n\npub fn extract_hash_from_extension_node<let MAX_PREFIXED_KEY_NIBBLE_LEN: u32>(\n    node: Node,\n    node_rlp_list: RlpList<MAX_NODE_FIELDS>,\n    key_nibbles: Fragment<MAX_PREFIXED_KEY_NIBBLE_LEN, u8>,\n    key_ptr: &mut u32\n) -> Fragment<HASH_LEN, u8> {\n    let prefixed_extension_key_part: Fragment<MAX_PREFIXED_KEY_NIBBLE_LEN, u8> = Fragment::new(node_rlp_list.get(0).offset, node_rlp_list.get(0).length, node).focus();\n\n    let (prefix, _) = byte_to_nibbles(prefixed_extension_key_part.at(0));\n    assert((prefix == 0) | (prefix == 1), \"Extension parity prefix must be 0 or 1\");\n    let extension_key_part = strip_prefix(prefixed_extension_key_part); // Extension nodes have a prefix that needs to be removed.\n    let curr_key_nibbles_part = key_nibbles.subfragment(*key_ptr, extension_key_part.length);\n    assert(\n        extension_key_part == curr_key_nibbles_part, \"Extension key part does not correspond to given key nibbles\"\n    );\n    assert(node_rlp_list.get(1).length == HASH_LEN, \"Expected a hash at the end of the extension node\");\n    *key_ptr += extension_key_part.length;\n\n    Fragment::new(node_rlp_list.get(1).offset, HASH_LEN, node).focus()\n}\n\npub fn extract_hash<let MAX_PREFIXED_KEY_NIBBLE_LEN: u32>(\n    node: Node,\n    key_nibbles: Fragment<MAX_PREFIXED_KEY_NIBBLE_LEN, u8>,\n    key_ptr: &mut u32\n) -> Fragment<HASH_LEN, u8> {\n    let mut hash = Fragment::from_array([0; HASH_LEN]);\n    let node_rlp_list: RlpList<MAX_NODE_FIELDS> = decode_list_of_small_strings(Fragment::from_array(node));\n\n    if (node_rlp_list.len == BRANCH_NODE_NUM_FIELDS) {\n        hash = extract_hash_from_branch_node(node, node_rlp_list, key_nibbles, key_ptr);\n    } else if (node_rlp_list.len == EXTENSION_NODE_NUM_FIELDS) {\n        hash = extract_hash_from_extension_node(node, node_rlp_list, key_nibbles, key_ptr);\n    } else {\n        assert(false, \"Invalid node type\");\n    }\n\n    hash\n}\n\npub fn verify_node_hash<let MAX_LEN: u32>(node: [u8; MAX_LEN], hash: [u8; HASH_LEN]) {\n    assert(keccak256(node, get_node_len(node) as u32) == hash, \"Invalid node hash\");\n}\n\npub fn verify_leaf<let MAX_LEAF_LEN: u32, let MAX_PREFIXED_KEY_NIBBLE_LEN: u32, let MAX_VALUE_LEN: u32>(\n    leaf: Leaf<MAX_LEAF_LEN>,\n    key_nibbles: Fragment<MAX_PREFIXED_KEY_NIBBLE_LEN, u8>,\n    key_ptr: &mut u32,\n    value: Value<MAX_VALUE_LEN>\n) {\n    let leaf_rlp_list: RlpList<2> = decode_list(Fragment::from_array(leaf));\n    assert(leaf_rlp_list.len == 2, \"Leaf expected to have 2 fields\");\n\n    let prefixed_leaf_key_part: Fragment<MAX_PREFIXED_KEY_NIBBLE_LEN, u8> = Fragment::new(leaf_rlp_list.get(0).offset, leaf_rlp_list.get(0).length, leaf).focus();\n\n    let (prefix, _) = byte_to_nibbles(prefixed_leaf_key_part.at(0));\n    assert((prefix == 2) | (prefix == 3), \"Leaf parity prefix must be 2 or 3\");\n    let leaf_key_part = strip_prefix(prefixed_leaf_key_part);\n    let left_key_ending = key_nibbles.subfragment(*key_ptr, leaf_key_part.length);\n    assert(leaf_key_part == left_key_ending, \"Key mismatch in the leaf\");\n    *key_ptr += leaf_key_part.length;\n    assert(*key_ptr == key_nibbles.length, \"Expected to consume all key nibbles\");\n\n    let value = right_pad(value);\n    let value_rlp_fragment = leaf_rlp_list.get(1);\n    // Verify that extracted value matches the expected value.\n    assert(value_rlp_fragment.length == value.len, \"Value length mismatch\");\n    assert(\n        sub_array_equals_up_to_length(\n            value.storage,\n            leaf,\n            value_rlp_fragment.offset,\n            value_rlp_fragment.length\n        ), \"Value mismatch\"\n    );\n}\n\npub fn verify_merkle_proof<let MAX_PREFIXED_KEY_NIBBLE_LEN: u32, let MAX_VALUE_LEN: u32, let MAX_DEPTH: u32, let MAX_LEAF_LEN: u32>(\n    key: Key<MAX_PREFIXED_KEY_NIBBLE_LEN>,\n    value: Value<MAX_VALUE_LEN>,\n    root: Hash,\n    proof: Proof<MAX_DEPTH, MAX_LEAF_LEN>\n) {\n    let key = right_pad(key);\n    let key_nibbles = bytes_to_nibbles(Fragment::from_vec(key));\n    let mut key_ptr = 0;\n\n    // Verify hashes of all the nodes in the proof path.\n    let mut curr_hash = Fragment::from_array(root);\n    for i in 0..MAX_DEPTH {    \n        // Handle the case where proof.depth is 0 by using a conditional\n        // that avoids subtraction when depth is 0\n        let should_process = (proof.depth > 0) & (i as u64 + 1 < proof.depth);\n        if should_process {\n            verify_node_hash(proof.nodes[i], curr_hash.data);\n            curr_hash = extract_hash(proof.nodes[i], key_nibbles, &mut key_ptr);\n        }\n    }\n    \n    // Only verify the leaf if proof.depth is greater than 0\n    if proof.depth > 0 {\n        verify_node_hash(proof.leaf, curr_hash.data);\n        verify_leaf(proof.leaf, key_nibbles, &mut key_ptr, value);\n    }\n}\n","path":"/home/drone/projects/rione/circuits/ethereum/circuits/lib/src/merkle_patricia_proofs/proof.nr"},"74":{"source":"use dep::std::{mem::zeroed, wrapping_add};\nuse crate::misc::fragment::Fragment;\n\npub fn alter_array<let ARRAY_LEN: u32>(array: [u8; ARRAY_LEN]) -> [u8; ARRAY_LEN] {\n    let mut copy = array.map(|x| x);\n    copy[0] = wrapping_add(copy[0], 1);\n    copy\n}\n\npub fn alter_fragment<let MAX_LEN: u32>(fragment: Fragment<MAX_LEN, u8>) -> Fragment<MAX_LEN, u8> {\n    let mut copy = fragment;\n    copy.set(0, wrapping_add(copy.at(0), 1));\n    copy\n}\n\npub fn field_to_u8_array<let ARRAY_LEN: u32>(array: [Field; ARRAY_LEN]) -> [u8; ARRAY_LEN] {\n    let mut result: [u8; ARRAY_LEN] = zeroed();\n    for i in 0..ARRAY_LEN {\n        result[i] = array[i] as u8;\n    }\n    result\n}\n\npub fn u8_to_field_array<let ARRAY_LEN: u32>(array: [u8; ARRAY_LEN]) -> [Field; ARRAY_LEN] {\n    let mut result: [Field; ARRAY_LEN] = zeroed();\n    for i in 0..ARRAY_LEN {\n        result[i] = array[i] as Field;\n    }\n    result\n}\n\npub fn resize<TItem, let NEW_LEN: u32, let OLD_LEN: u32>(src: [TItem; OLD_LEN]) -> [TItem; NEW_LEN] {\n    assert(NEW_LEN >= OLD_LEN, \"New length must be greater than or equal to old length\");\n    let mut dest = [zeroed(); NEW_LEN];\n    for i in 0..OLD_LEN {\n        dest[i] = src[i];\n    }\n    dest\n}\n\npub(crate) fn memcpy_up_to_length<TItem, let SRC_LEN: u32, let DEST_LEN: u32>(dest: &mut [TItem; DEST_LEN], src: [TItem; SRC_LEN], offset: u32, length: u32) {\n    assert(length <= DEST_LEN, \"Destination index out of bound\");\n    assert(offset + length <= SRC_LEN, \"Source index out of bound\");\n    for i in 0..DEST_LEN {\n        if i < length {\n            (*dest)[i] = src[offset + i];\n        }\n    }\n}\n\n// Fills destination array with content of source array starting from the offset in source array.\npub(crate) fn memcpy<TItem, let SRC_LEN: u32, let DEST_LEN: u32>(dest: &mut [TItem; DEST_LEN], src: [TItem; SRC_LEN], offset: u32) {\n    memcpy_up_to_length(dest, src, offset, DEST_LEN);\n}\n\npub fn subarray_inferred_len<TItem, let SRC_LEN: u32, let DEST_LEN: u32>(src: [TItem; SRC_LEN], offset: u32) -> [TItem; DEST_LEN] {\n    let mut dest = [zeroed(); DEST_LEN];\n    memcpy(&mut dest, src, offset);\n    dest\n}\n\npub fn sub_array_equals_up_to_length<TItem, let SUBARRAY_LEN: u32, let ARRAY_LEN: u32>(\n    subarray: [TItem; SUBARRAY_LEN],\n    array: [TItem; ARRAY_LEN],\n    offset: u32,\n    length: u32\n) -> bool where TItem: Eq {\n    assert(length <= SUBARRAY_LEN, \"Subarray index out of bound\");\n    assert(offset + length <= ARRAY_LEN, \"Array index out of bound\");\n    let mut result = true;\n    for i in 0..SUBARRAY_LEN {\n        if i < length {\n            result &= subarray[i] == array[offset + i];\n        }\n    }\n    result\n}\n\npub fn sub_array_equals<TItem, let SUBARRAY_LEN: u32, let ARRAY_LEN: u32>(\n    subarray: [TItem; SUBARRAY_LEN],\n    array: [TItem; ARRAY_LEN],\n    offset: u32\n) -> bool where TItem: Eq {\n    assert(offset + SUBARRAY_LEN <= ARRAY_LEN, \"Array index out of bound\");\n    let mut result = true;\n    for i in 0..SUBARRAY_LEN {\n        result &= subarray[i] == array[offset + i];\n    }\n    result\n}\n","path":"/home/drone/projects/rione/circuits/ethereum/circuits/lib/src/misc/arrays.nr"},"78":{"source":"use crate::misc::fragment::Fragment;\n\npub fn byte_to_nibbles(byte: u8) -> (u8, u8) {\n    let upper = byte / 16;\n    let lower = byte - 16 * upper;\n\n    (upper, lower)\n}\n\npub fn bytes_to_nibbles<let MAX_NIBBLE_LEN: u32>(bytes: Fragment<MAX_NIBBLE_LEN, u8>) -> Fragment<MAX_NIBBLE_LEN, u8> {\n    assert(\n        MAX_NIBBLE_LEN >= 2 * bytes.length, \"Bytes implicit data length must be at least 2 times larger than bytes explicit length\"\n    );\n\n    let nibbles = &mut Fragment::new_with_length(2 * bytes.length, [0; MAX_NIBBLE_LEN]);\n    bytes.each(\n        |byte, i| {\n        let (hi, lo) = byte_to_nibbles(byte);\n\n        nibbles.set(2 * i, hi);\n        nibbles.set(2 * i + 1, lo);\n    }\n    );\n\n    *nibbles\n}\n\npub fn nibbles_to_byte(upper: u8, lower: u8) -> u8 {\n    assert(upper < 16, \"Nibble value must be less than 16\");\n    assert(lower < 16, \"Nibble value must be less than 16\");\n\n    upper * 16 + lower\n}\n\npub fn nibbles_to_bytes<let BYTES_LEN: u32, let NIB_LEN: u32>(nibbles: [u8; NIB_LEN]) -> [u8; BYTES_LEN] {\n    assert(NIB_LEN == 2 * BYTES_LEN, \"Generic arguments don't match\");\n\n    let mut bytes = [0; BYTES_LEN];\n\n    for i in 0..NIB_LEN / 2 {\n        let byte = nibbles_to_byte(nibbles[2 * i], nibbles[2 * i + 1]);\n        bytes[i] = byte;\n    }\n\n    bytes\n}\n\npub fn right_pad<let N: u32>(arr: [u8; N]) -> BoundedVec<u8, N> {\n    byte_value(arr)\n}\n\npub fn left_to_right_padding<let N: u32>(nibbles: [u8; N]) -> ([u8; N], u32) {\n    let mut BoundedVec {storage: shifted, len} = right_pad(nibbles);\n    if (len % 2 == 1) {\n        shift_right_by_one(&mut shifted);\n        len += 1;\n    }\n\n    let shifted_by = N - len;\n    (shifted, shifted_by)\n}\n\npub fn shift_right_by_one<let N: u32>(arr: &mut [u8; N]) {\n    assert(arr[N - 1] == 0, \"Last element must be zero to shift the array right by one\");\n\n    let mut last = 0;\n    for i in 0..N {\n        let tmp = (*arr)[i];\n        (*arr)[i] = last;\n        last = tmp;\n    }\n}\n\npub(crate) fn left_byte_shift<let N: u32>(input: [u8; N], n: u32) -> [u8; N] {\n    let mut out = [0; N];\n\n    for i in 0..N {\n        let index_ind = (((i + n) as u32) < (N as u32)) as u32;\n        out[i] = (index_ind as u8) * input[index_ind * (i + n)];\n    }\n\n    out\n}\n\n// Converts big-endian byte array to a right-padded one.\npub(crate) fn byte_value<let N: u32>(in_value: [u8; N]) -> BoundedVec<u8, N> {\n    let mut value_length = 0;\n\n    for i in 0..N {\n        let num_bytes_ind = (value_length == 0) as u32;\n        let byte_ind = (in_value[i] != 0) as u32;\n        value_length = num_bytes_ind * byte_ind * (N - i) + (1 - num_bytes_ind) * value_length;\n    }\n\n    let value = left_byte_shift(in_value, N - value_length);\n\n    BoundedVec { storage: value, len: value_length }\n}\n\npub fn add_bigint<let N: u32>(left: [u8; N], right: [u8; N]) -> [u8; N] {\n    let mut carry: u32 = 0;\n    let mut result: [u8; N] = [0; N];\n\n    for j in 0..N {\n        let index = N - j - 1;\n        let sum = left[index] as u32 + right[index] as u32 + carry;\n        result[index] = sum as u8;\n        carry = sum >> 8;\n    }\n\n    assert(carry == 0, \"Addition overflow\");\n\n    result\n}\n","path":"/home/drone/projects/rione/circuits/ethereum/circuits/lib/src/misc/bytes.nr"},"82":{"source":"use crate::misc::{arrays::{memcpy_up_to_length, resize}, iterator::Iterator};\nuse dep::std::mem::zeroed;\n\npub struct Fragment<let MAX_DATA_LEN: u32, T> {\n    pub offset: u32,\n    pub length: u32,\n    pub data: [T; MAX_DATA_LEN]\n}\n\nimpl<let MAX_DATA_LEN: u32, T> Fragment<MAX_DATA_LEN, T> {\n    pub fn empty() -> Fragment<MAX_DATA_LEN, T> {\n        Fragment { offset: 0, length: 0, data: std::mem::zeroed() }\n    }\n\n    pub fn new(offset: u32, length: u32, data: [T; MAX_DATA_LEN]) -> Fragment<MAX_DATA_LEN, T> {\n        assert(offset + length <= data.len(), \"Fragment length exceeds data length\");\n\n        Fragment { offset, length, data }\n    }\n\n    pub fn new_with_length(length: u32, data: [T; MAX_DATA_LEN]) -> Fragment<MAX_DATA_LEN, T> {\n        assert(length <= data.len(), \"Fragment length exceeds data length\");\n\n        Fragment { offset: 0, length, data }\n    }\n\n    pub fn from_array(data: [T; MAX_DATA_LEN]) -> Fragment<MAX_DATA_LEN, T> {\n        Fragment { offset: 0, length: data.len(), data }\n    }\n\n    pub fn from_array_resize<let DATA_LEN: u32>(data: [T; DATA_LEN]) -> Fragment<MAX_DATA_LEN, T> {\n        Fragment { offset: 0, length: data.len(), data: resize(data) }\n    }\n\n    pub fn to_array<let NEW_MAX_LEN: u32>(self) -> [T; NEW_MAX_LEN] {\n        self.focus().data\n    }\n\n    pub fn to_bounded_vec<let N: u32>(self) -> BoundedVec<T, N> {\n        assert(self.length <= N, \"Fragment length exceeds BoundedVec max length\");\n        let bounded_vec: &mut BoundedVec<T, N> = &mut BoundedVec::new();\n        self.each(|x, _| bounded_vec.push(x));\n\n        *bounded_vec\n    }\n\n    pub fn from_vec(vec: BoundedVec<T, MAX_DATA_LEN>) -> Fragment<MAX_DATA_LEN, T> {\n        Fragment::new_with_length(vec.len, vec.storage)\n    }\n\n    pub fn focus<let NEW_MAX_LEN: u32>(self) -> Fragment<NEW_MAX_LEN, T> {\n        assert(NEW_MAX_LEN >= self.length, \"New max length is smaller than fragment length\");\n\n        let mut new_data: [T; NEW_MAX_LEN] = std::mem::zeroed();\n        memcpy_up_to_length(&mut new_data, self.data, self.offset, self.length);\n\n        Fragment { offset: 0, length: self.length, data: new_data }\n    }\n\n    pub fn subfragment(self, offset: u32, length: u32) -> Fragment<MAX_DATA_LEN, T> {\n        assert(offset + length <= self.length, \"Subfragment overflows fragment\");\n\n        Fragment { offset: self.offset + offset, length, data: self.data }\n    }\n\n    pub fn is_empty(self) -> bool {\n        self.length == 0\n    }\n\n    pub fn at(self, index: u32) -> T {\n        assert(index < self.length, \"Index out of bounds\");\n\n        self.data[self.offset + index]\n    }\n\n    pub fn set(&mut self, index: u32, value: T) {\n        let length = self.length;\n        assert(\n            index < self.length, f\"Index out of bounds, tried to set at index {index} but the length is {length}\"\n        );\n\n        self.data[self.offset + index] = value;\n    }\n\n    pub fn pop_front(&mut self) -> T {\n        assert(!self.is_empty(), \"Cannot pop from an empty fragment\");\n        self.offset += 1;\n        self.length -= 1;\n        self.data[self.offset - 1]\n    }\n\n    pub fn pop_front_array<let LEN: u32>(&mut self) -> [T; LEN] {\n        assert(self.length >= LEN, \"Cannot pop array: fragment is too short\");\n        let mut res: [T; LEN] = std::mem::zeroed();\n        res.map(|_| self.pop_front())\n    }\n\n    pub fn pop_back(&mut self) -> T {\n        assert(!self.is_empty(), \"Cannot pop from an empty fragment\");\n        self.length -= 1;\n        self.data[self.offset + self.length]\n    }\n\n    pub fn push_back(&mut self, value: T) {\n        assert(self.offset + self.length + 1 <= MAX_DATA_LEN, \"Cannot push: fragment is full\");\n        self.data[self.offset + self.length] = value;\n        self.length += 1;\n    }\n\n    pub fn extend_back<let LEN: u32>(&mut self, other: [T; LEN]) {\n        for i in 0..LEN {\n            self.push_back(other[i]);\n        }\n    }\n\n    pub fn eq<let OTHER_MAX_DATA_LEN: u32>(self, other: Fragment<OTHER_MAX_DATA_LEN, T>) -> bool where T: Eq {\n        let res = &mut true;\n        if (self.length != other.length) {\n            *res = false;\n        }\n        self.each(\n            |el, i| {\n            if i < other.length {\n                *res &= el == other.at(i);\n            }\n        }\n        );\n\n        *res\n    }\n}\n\nimpl<let MAX_DATA_LEN: u32, T> Eq for Fragment<MAX_DATA_LEN, T> where T: Eq {\n    fn eq(self, other: Fragment<MAX_DATA_LEN, T>) -> bool {\n        let res = &mut true;\n        if self.length != other.length {\n            *res = false;\n        } else {\n            self.each(|el, i| {\n                *res &= el == other.at(i);\n            });\n        };\n\n        *res\n    }\n}\n\nimpl<let MAX_DATA_LEN: u32, T> Iterator<T> for Fragment<MAX_DATA_LEN, T> {\n    fn each<Env>(self, f: fn[Env](T, u32) -> ()) {\n        for i in 0..MAX_DATA_LEN {\n            if i < self.length {\n                f(self.at(i), i);\n            }\n        }\n    }\n}\n","path":"/home/drone/projects/rione/circuits/ethereum/circuits/lib/src/misc/fragment.nr"},"90":{"source":"use dep::std::wrapping_sub;\nuse crate::rlp::types::{RlpList, RlpFragment, RlpHeader, STRING, LIST};\nuse crate::misc::fragment::Fragment;\n\n// Maximum number of bytes required to represent entity length.\n// This means that this library can only decode RLP entities with a length of up to 2^16 - 1 bytes.\nglobal MAX_LEN_IN_BYTES: u32 = 2;\n\npub fn extract_payload_len<let N: u32>(data: Fragment<N, u8>, lenlen: u32) -> u32 {\n    assert(lenlen <= MAX_LEN_IN_BYTES, \"Length of length exceeds maximum\");\n    assert(lenlen <= data.length, \"Length of length exceeds input length\");\n    assert(lenlen != 0, \"Length of length is zero\");\n\n    let mut payload_length = 0;\n\n    for i in 0..MAX_LEN_IN_BYTES {\n        if (i < lenlen & i < data.length) {\n            payload_length = data.at(i) as u32 + payload_length * 256;\n        }\n    }\n\n    payload_length\n}\n\npub fn decode_to_rlp_header<let N: u32>(data: Fragment<N, u8>) -> RlpHeader {\n    let mut data = data;\n    let prefix = data.pop_front();\n\n    if (prefix < 0x80) { // single byte\n        RlpHeader { offset: 0, length: 1, data_type: STRING }\n    } else if (prefix < 0xb8) { // [0, 55] byte string\n        let offset = 1;\n        let length = wrapping_sub(prefix, 0x80) as u32;\n        assert(offset + length <= N, \"Decoded length of short string exceeds input length\");\n\n        RlpHeader { offset, length, data_type: STRING }\n    } else if (prefix < 0xc0) { // > 55 byte string\n        let offset = wrapping_sub(1 + prefix, 0xb7) as u32;\n        let length = extract_payload_len(data, wrapping_sub(prefix, 0xb7) as u32);\n        assert(offset + length <= N, \"Decoded length of long string exceeds input length\");\n\n        RlpHeader { offset, length, data_type: STRING }\n    } else if (prefix < 0xf8) { // [0, 55] byte list\n        let offset = 1;\n        let length = wrapping_sub(prefix, 0xc0) as u32;\n        assert(offset + length <= N, \"Decoded length of short list exceeds input length\");\n\n        RlpHeader { offset, length, data_type: LIST }\n    } else { // > 55 byte list\n        let offset = wrapping_sub(1 + prefix, 0xf7) as u32;\n        let length = extract_payload_len(data, wrapping_sub(prefix, 0xf7) as u32);\n        assert(offset + length <= N, \"Decoded length of long list exceeds input length\");\n\n        RlpHeader { offset, length, data_type: LIST }\n    }\n}\n\npub fn decode_string<let N: u32>(input: Fragment<N, u8>) -> RlpFragment {\n    let mut RlpHeader {offset, length, data_type} = decode_to_rlp_header(input);\n    let total_len = length + offset;\n    assert(total_len <= input.length, \"Total length exceeds input length\");\n\n    RlpFragment { offset, length, data_type: STRING }\n}\n\n// Strings are decoded and offsets point to the start of raw values, while list offsets point to the start of the RLP header.\npub fn decode_list<let N: u32, let MAX_FIELDS: u32>(data: Fragment<N, u8>) -> RlpList<MAX_FIELDS> {\n    let mut rlp_list: RlpList<MAX_FIELDS> = BoundedVec::new();\n\n    let RlpHeader {offset, length, data_type} = decode_to_rlp_header(data);\n    assert(data_type == LIST, \"Expected a list\");\n\n    let total_len = length + offset;\n    assert(total_len <= data.length, \"Total length exceeds input length\");\n\n    let mut current_offset = offset;\n    for _ in 0..MAX_FIELDS {\n        if (current_offset < total_len) {\n            let header: Fragment<N, u8> = data.subfragment(current_offset, data.length - current_offset);\n\n            let RlpHeader {offset: field_off, length: field_len, data_type: field_type} = decode_to_rlp_header(header);\n\n            let mut offset = current_offset;\n            let mut length = field_len;\n            if (field_type == STRING) {\n                offset += field_off;\n            } else {\n                length += field_off;\n            }\n\n            rlp_list.push(RlpFragment { offset, length, data_type: field_type });\n\n            current_offset += field_off + field_len;\n        }\n    }\n    assert(current_offset == total_len, \"Inconsistent rlp length\");\n\n    rlp_list\n}\n\n// The version of decode_list that is cheaper to call, but only works for lists of small strings (<= 55 bytes).\npub fn decode_list_of_small_strings<let N: u32, let NUM_FIELDS: u32>(data: Fragment<N, u8>) -> RlpList<NUM_FIELDS> {\n    let mut rlp_list: RlpList<NUM_FIELDS> = BoundedVec::new();\n\n    let RlpHeader {offset, length, data_type} = decode_to_rlp_header(data);\n    assert(data_type == LIST, \"Expected a list\");\n\n    let total_len = length + offset;\n    assert(total_len <= data.length, \"Total length exceeds input length\");\n\n    let mut current_offset = offset;\n    for _ in 0..NUM_FIELDS {\n        if (current_offset < total_len) {\n            let first_byte = data.at(current_offset);\n\n            let (field_off, field_len) = get_small_string_offset_and_length(first_byte);\n            rlp_list.push(RlpFragment { offset: current_offset + field_off, length: field_len, data_type: STRING });\n\n            current_offset += field_off + field_len;\n        }\n    }\n    assert(current_offset == total_len, \"Inconsistent rlp length\");\n\n    rlp_list\n}\n\npub fn get_small_string_offset_and_length(first_byte: u8) -> (u32, u32) {\n    assert(first_byte < 0xb8, \"Element is not a string of length < 56 bytes\");\n\n    if (first_byte < 0x80) {\n        (0, 1)\n    } else {\n        (1, wrapping_sub(first_byte as u32, 0x80))\n    }\n}\n","path":"/home/drone/projects/rione/circuits/ethereum/circuits/lib/src/rlp/decode.nr"},"91":{"source":"use crate::misc::{arrays::sub_array_equals_up_to_length, fragment::Fragment};\nuse crate::misc::bytes::byte_value;\nuse crate::misc::types::{Address, ADDRESS_LENGTH, Bytes32, BYTES32_LENGTH};\nuse dep::u2b::{u32_to_u8, u64_to_u8};\n\n// Enum for RLP data type\nglobal STRING: u32 = 0;\nglobal LIST: u32 = 1;\n\npub type RlpList<let MAX_FIELDS: u32> = BoundedVec<RlpFragment, MAX_FIELDS>;\n\npub struct RlpHeader {\n    pub offset: u32,\n    pub length: u32,\n    pub data_type: u32,\n}\n\nimpl Eq for RlpHeader {\n    fn eq(self, other: Self) -> bool {\n        (self.offset == other.offset)\n            & (self.length == other.length)\n            & (self.data_type == other.data_type)\n    }\n}\n\npub struct RlpFragment {\n    pub offset: u32,\n    pub length: u32,\n    pub data_type: u32,\n}\n\nimpl RlpFragment {\n    pub fn assert_eq_bytes<let FIELD_NAME_LEN: u32, let MAX_RLP_LEN: u32, let MAX_VALUE_LEN: u32>(\n        self,\n        field_name: str<FIELD_NAME_LEN>,\n        rlp: Fragment<MAX_RLP_LEN, u8>,\n        value: Fragment<MAX_VALUE_LEN, u8>,\n    ) {\n        assert(self.data_type == STRING, f\"{field_name}: Invalid RLP type\");\n        assert(self.length == value.length, f\"{field_name}: Invalid RLP length\");\n        assert(\n            rlp.subfragment(self.offset, self.length).eq(value),\n            f\"{field_name}: Invalid RLP value\",\n        );\n    }\n\n    pub fn assert_eq_bounded_vec<let FIELD_NAME_LEN: u32, let MAX_RLP_LEN: u32, let MAX_VALUE_LEN: u32>(\n        self,\n        field_name: str<FIELD_NAME_LEN>,\n        rlp: Fragment<MAX_RLP_LEN, u8>,\n        value: BoundedVec<u8, MAX_VALUE_LEN>,\n    ) {\n        self.assert_eq_bytes(field_name, rlp, Fragment::from_vec(value));\n    }\n\n    pub fn assert_empty_string<let FIELD_NAME_LEN: u32, let MAX_RLP_LEN: u32>(\n        self,\n        field_name: str<FIELD_NAME_LEN>,\n    ) {\n        assert(self.data_type == STRING, f\"{field_name}: Invalid RLP type\");\n        assert(self.length == 0, f\"{field_name}: Expected empty string\");\n    }\n\n    pub fn assert_eq_u1<let FIELD_NAME_LEN: u32, let MAX_RLP_LEN: u32>(\n        self,\n        field_name: str<FIELD_NAME_LEN>,\n        rlp: Fragment<MAX_RLP_LEN, u8>,\n        value: u1,\n    ) {\n        self.assert_eq_bytes(field_name, rlp, Fragment::from_array([value as u8]));\n    }\n\n    pub fn assert_eq_u8<let FIELD_NAME_LEN: u32, let MAX_RLP_LEN: u32>(\n        self,\n        field_name: str<FIELD_NAME_LEN>,\n        rlp: Fragment<MAX_RLP_LEN, u8>,\n        value: u8,\n    ) {\n        self.assert_eq_bounded_vec(field_name, rlp, byte_value([value]));\n    }\n\n    pub fn assert_eq_u32<let FIELD_NAME_LEN: u32, let MAX_RLP_LEN: u32>(\n        self,\n        field_name: str<FIELD_NAME_LEN>,\n        rlp: Fragment<MAX_RLP_LEN, u8>,\n        value: u32,\n    ) {\n        self.assert_eq_bounded_vec(field_name, rlp, byte_value(u32_to_u8(value)));\n    }\n\n    pub fn assert_eq_u64<let FIELD_NAME_LEN: u32, let MAX_RLP_LEN: u32>(\n        self,\n        field_name: str<FIELD_NAME_LEN>,\n        rlp: Fragment<MAX_RLP_LEN, u8>,\n        value: u64,\n    ) {\n        self.assert_eq_bounded_vec(field_name, rlp, byte_value(u64_to_u8(value)));\n    }\n\n    pub fn assert_eq_u128<let FIELD_NAME_LEN: u32, let MAX_RLP_LEN: u32>(\n        self,\n        field_name: str<FIELD_NAME_LEN>,\n        rlp: Fragment<MAX_RLP_LEN, u8>,\n        value: U128,\n    ) {\n        self.assert_eq_bounded_vec(field_name, rlp, byte_value(value.to_be_bytes()));\n    }\n\n    pub fn assert_eq_address<let FIELD_NAME_LEN: u32, let MAX_RLP_LEN: u32>(\n        self,\n        field_name: str<FIELD_NAME_LEN>,\n        rlp: Fragment<MAX_RLP_LEN, u8>,\n        value: Address,\n    ) {\n        self.assert_eq_bytes(field_name, rlp, Fragment::from_array(value));\n    }\n\n    pub fn assert_eq_bytes32<let FIELD_NAME_LEN: u32, let MAX_RLP_LEN: u32>(\n        self,\n        field_name: str<FIELD_NAME_LEN>,\n        rlp: Fragment<MAX_RLP_LEN, u8>,\n        value: Bytes32,\n    ) {\n        self.assert_eq_bytes(field_name, rlp, Fragment::from_array(value));\n    }\n}\n\nimpl Default for RlpFragment {\n    fn default() -> Self {\n        RlpFragment { offset: 0, length: 0, data_type: 0 }\n    }\n}\n\nimpl Eq for RlpFragment {\n    fn eq(self, other: Self) -> bool {\n        (self.offset == other.offset)\n            & (self.length == other.length)\n            & (self.data_type == other.data_type)\n    }\n}\n","path":"/home/drone/projects/rione/circuits/ethereum/circuits/lib/src/rlp/types.nr"},"93":{"source":"use crate::account::AccountWithinBlock;\nuse crate::account_with_storage::{StorageWithinBlock, Account};\nuse crate::constants::{SR_MAX_DEPTH_NO_LEAF, SR_MAX_PREFIXED_KEY_NIBBLE_LEN, SR_MAX_LEAF_LEN_M, SR_MAX_VALUE_LEN_M};\nuse crate::account::{\n    MAX_ACCOUNT_DEPTH_NO_LEAF_M, MAX_PREFIXED_KEY_NIBBLE_LEN as ACCOUNT_MAX_PREFIXED_KEY_NIBBLE_LEN,\n    MAX_ACCOUNT_STATE_LEN, MAX_ACCOUNT_LEAF_LEN\n};\nuse crate::account_with_storage::{\n    MAX_PREFIXED_KEY_NIBBLE_LEN as STORAGE_MAX_PREFIXED_KEY_NIBBLE_LEN, MAX_STORAGE_DEPTH_NO_LEAF_M,\n    MAX_STORAGE_VALUE_LEN, MAX_STORAGE_LEAF_LEN\n};\nuse crate::misc::{fragment::Fragment, types::{BYTES32_LENGTH, Bytes32, ADDRESS_LENGTH, Address}};\nuse crate::uint256::U256;\nuse crate::merkle_patricia_proofs::proof::{ProofInput, Proof, Node, Leaf, MAX_NODE_LEN};\nuse dep::std::mem::zeroed;\n\ntrait Serde<let LEN: u32> {\n    fn serialize(self) -> [Field; LEN];\n    fn deserialize(data: [Field; LEN]) -> Self;\n}\n\nglobal U128_SERIALIZED_LEN: u32 = 2;\n\nimpl Serde<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self.lo, self.hi]\n    }\n\n    fn deserialize(data: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128 { lo: data[0], hi: data[1] }\n    }\n}\n\nglobal U256_SERIALIZED_LEN: u32 = 4;\n\nimpl Serde<U256_SERIALIZED_LEN> for U256 {\n    fn serialize(self) -> [Field; U256_SERIALIZED_LEN] {\n        [self.low.lo, self.low.hi, self.high.lo, self.high.hi]\n    }\n\n    fn deserialize(data: [Field; U256_SERIALIZED_LEN]) -> Self {\n        U256 { low: U128 { lo: data[0], hi: data[1] }, high: U128 { lo: data[2], hi: data[3] } }\n    }\n}\n\nimpl<let LEN: u32> Serde<LEN> for [u8; LEN] {\n    fn serialize(self) -> [Field; LEN] {\n        let mut result: [Field; LEN] = zeroed();\n        for i in 0..LEN {\n            result[i] = self[i] as Field;\n        }\n        result\n    }\n\n    fn deserialize(data: [Field; LEN]) -> Self {\n        let mut result: [u8; LEN] = zeroed();\n        for i in 0..LEN {\n            result[i] = data[i] as u8;\n        }\n        result\n    }\n}\n\nglobal ACCOUNT_LEN: u32 = 1 + 1 + BYTES32_LENGTH + BYTES32_LENGTH;\n\nimpl Serde<ACCOUNT_LEN> for Account {\n    fn serialize(self) -> [Field; ACCOUNT_LEN] {\n        let mut data: BoundedVec<Field, ACCOUNT_LEN> = BoundedVec::new();\n        data.push(self.nonce as Field);\n        data.push(self.balance);\n        data.extend_from_array(self.storage_root.serialize());\n        data.extend_from_array(self.code_hash.serialize());\n        data.storage\n    }\n\n    fn deserialize(data: [Field; ACCOUNT_LEN]) -> Self {\n        let mut fragment = Fragment::from_array(data);\n        let nonce = fragment.pop_front() as u64;\n        let balance = fragment.pop_front();\n        let storage_root: Bytes32 = fragment.pop_front_array().deserialize();\n        let code_hash: Bytes32 = fragment.pop_front_array().deserialize();\n        Account {\n            nonce,\n            balance,\n            storage_root,\n            code_hash,\n        }\n    }\n}\n\nglobal ACCOUNT_BLOCK_LEN: u32 = ACCOUNT_LEN + BYTES32_LENGTH;\n\nimpl Serde<ACCOUNT_BLOCK_LEN> for AccountWithinBlock {\n    fn serialize(self) -> [Field; ACCOUNT_BLOCK_LEN] {\n        let mut data: BoundedVec<Field, ACCOUNT_BLOCK_LEN> = BoundedVec::new();\n        data.extend_from_array(self.account.serialize());\n        data.extend_from_array(self.block_hash.serialize());\n        data.storage\n    }\n\n    fn deserialize(data: [Field; ACCOUNT_BLOCK_LEN]) -> Self {\n        let mut fragment = Fragment::from_array(data);\n        let account = Account::deserialize(fragment.pop_front_array());\n        let block_hash = fragment.pop_front_array().deserialize();\n        AccountWithinBlock {\n            account,\n            block_hash,\n        }\n    }\n}\n\nglobal STORAGE_BLOCK_LEN: u32 = BYTES32_LENGTH + ACCOUNT_LEN + BYTES32_LENGTH;\n\nimpl Serde<STORAGE_BLOCK_LEN> for StorageWithinBlock<1> {\n    fn serialize(self) -> [Field; STORAGE_BLOCK_LEN] {\n        let mut data: BoundedVec<Field, STORAGE_BLOCK_LEN> = BoundedVec::new();\n        data.extend_from_array(self.block_hash.serialize());\n        data.extend_from_array(self.account.serialize());\n        data.extend_from_array(self.values[0].serialize());\n        data.storage\n    }\n\n    fn deserialize(data: [Field; STORAGE_BLOCK_LEN]) -> Self {\n        let mut fragment = Fragment::from_array(data);\n        let block_hash = fragment.pop_front_array().deserialize();\n        let account = Account::deserialize(fragment.pop_front_array());\n        let values = [fragment.pop_front_array().deserialize()];\n        StorageWithinBlock {\n            block_hash,\n            account,\n            values,\n        }\n    }\n}\n\n/** STATE PROOF INPUT **/\n\nglobal STATE_NODES_LEN_M: u32 = 5320; // MAX_NODE_LEN * MAX_ACCOUNT_DEPTH_NO_LEAF_M\n\npub fn serialize_state_nodes(nodes: [Node; MAX_ACCOUNT_DEPTH_NO_LEAF_M]) -> [Field; STATE_NODES_LEN_M] {\n    let mut data: BoundedVec<Field, STATE_NODES_LEN_M> = BoundedVec::new();\n    for i in 0..MAX_ACCOUNT_DEPTH_NO_LEAF_M {\n        data.extend_from_array(nodes[i].serialize());\n    }\n    data.storage\n}\n\npub fn deserialize_state_nodes(data: [Field; STATE_NODES_LEN_M]) -> [Node; MAX_ACCOUNT_DEPTH_NO_LEAF_M] {\n    let mut result: Fragment<MAX_ACCOUNT_DEPTH_NO_LEAF_M, Node> = Fragment::empty();\n    let mut fragment = Fragment::from_array(data);\n    for _ in 0..MAX_ACCOUNT_DEPTH_NO_LEAF_M {\n        let node: Node = fragment.pop_front_array().deserialize();\n        result.push_back(node);\n    }\n    result.data\n}\n\nglobal STATE_PROOF_LEN_M: u32 = 5469; // STATE_NODES_LEN_M + MAX_ACCOUNT_LEAF_LEN + 1\n\nimpl Serde<STATE_PROOF_LEN_M> for Proof<MAX_ACCOUNT_DEPTH_NO_LEAF_M, MAX_ACCOUNT_LEAF_LEN> {\n    fn serialize(self) -> [Field; STATE_PROOF_LEN_M] {\n        let mut data: BoundedVec<Field, STATE_PROOF_LEN_M> = BoundedVec::new();\n        data.extend_from_array(serialize_state_nodes(self.nodes));\n        data.extend_from_array(self.leaf.serialize());\n        data.push(self.depth as Field);\n        data.storage\n    }\n\n    fn deserialize(data: [Field; STATE_PROOF_LEN_M]) -> Self {\n        let mut fragment = Fragment::from_array(data);\n        let nodes = deserialize_state_nodes(fragment.pop_front_array());\n        let leaf = fragment.pop_front_array().deserialize();\n        let depth = fragment.pop_front() as u64;\n        Proof {\n            nodes,\n            leaf,\n            depth,\n        }\n    }\n}\n\nglobal STATE_PROOF_INPUT_LEN_M: u32 = 5645; // ACCOUNT_MAX_PREFIXED_KEY_NIBBLE_LEN + MAX_ACCOUNT_STATE_LEN + STATE_PROOF_LEN_M\n\nimpl Serde<STATE_PROOF_INPUT_LEN_M> for ProofInput<ACCOUNT_MAX_PREFIXED_KEY_NIBBLE_LEN, MAX_ACCOUNT_STATE_LEN, MAX_ACCOUNT_DEPTH_NO_LEAF_M, MAX_ACCOUNT_LEAF_LEN> {\n    fn serialize(self) -> [Field; STATE_PROOF_INPUT_LEN_M] {\n        let mut data: BoundedVec<Field, STATE_PROOF_INPUT_LEN_M> = BoundedVec::new();\n        data.extend_from_array(self.key.serialize());\n        data.extend_from_array(self.value.serialize());\n        data.extend_from_array(self.proof.serialize());\n        data.storage\n    }\n\n    fn deserialize(data: [Field; STATE_PROOF_INPUT_LEN_M]) -> Self {\n        let mut fragment = Fragment::from_array(data);\n        let key = fragment.pop_front_array().deserialize();\n        let value = fragment.pop_front_array().deserialize();\n        let proof = Serde::<STATE_PROOF_LEN_M>::deserialize(fragment.pop_front_array());\n        ProofInput {\n            key,\n            value,\n            proof\n        }\n    }\n}\n\n/** STORAGE PROOF INPUT **/\n\nglobal STORAGE_NODES_LEN_M: u32 = 3192; // MAX_NODE_LEN * MAX_STORAGE_DEPTH_NO_LEAF_M\n\npub fn serialize_storage_nodes(nodes: [Node; MAX_STORAGE_DEPTH_NO_LEAF_M]) -> [Field; STORAGE_NODES_LEN_M] {\n    let mut data: BoundedVec<Field, STORAGE_NODES_LEN_M> = BoundedVec::new();\n    for i in 0..MAX_STORAGE_DEPTH_NO_LEAF_M {\n        data.extend_from_array(nodes[i].serialize());\n    }\n    data.storage\n}\n\npub fn deserialize_storage_nodes(data: [Field; STORAGE_NODES_LEN_M]) -> [Node; MAX_STORAGE_DEPTH_NO_LEAF_M] {\n    let mut result: Fragment<MAX_STORAGE_DEPTH_NO_LEAF_M, Node> = Fragment::empty();\n    let mut fragment = Fragment::from_array(data);\n    for _ in 0..MAX_STORAGE_DEPTH_NO_LEAF_M {\n        let node: Node = fragment.pop_front_array().deserialize();\n        result.push_back(node);\n    }\n    result.data\n}\n\nglobal STORAGE_PROOF_LEN_M: u32 = 3262; // STORAGE_NODES_LEN_M + MAX_STORAGE_LEAF_LEN + 1\n\nimpl Serde<STORAGE_PROOF_LEN_M> for Proof<MAX_STORAGE_DEPTH_NO_LEAF_M, MAX_STORAGE_LEAF_LEN> {\n    fn serialize(self) -> [Field; STORAGE_PROOF_LEN_M] {\n        let mut data: BoundedVec<Field, STORAGE_PROOF_LEN_M> = BoundedVec::new();\n        data.extend_from_array(serialize_storage_nodes(self.nodes));\n        data.extend_from_array(self.leaf.serialize());\n        data.push(self.depth as Field);\n        data.storage\n    }\n\n    fn deserialize(data: [Field; STORAGE_PROOF_LEN_M]) -> Self {\n        let mut fragment = Fragment::from_array(data);\n        let nodes = deserialize_storage_nodes(fragment.pop_front_array());\n        let leaf = fragment.pop_front_array().deserialize();\n        let depth = fragment.pop_front() as u64;\n        Proof {\n            nodes,\n            leaf,\n            depth,\n        }\n    }\n}\n\nglobal STORAGE_PROOF_INPUT_LEN_M: u32 = 3360; // STORAGE_MAX_PREFIXED_KEY_NIBBLE_LEN + MAX_STORAGE_VALUE_LEN + STORAGE_PROOF_LEN_M\n\nimpl Serde<STORAGE_PROOF_INPUT_LEN_M> for ProofInput<STORAGE_MAX_PREFIXED_KEY_NIBBLE_LEN, MAX_STORAGE_VALUE_LEN, MAX_STORAGE_DEPTH_NO_LEAF_M, MAX_STORAGE_LEAF_LEN> {\n    fn serialize(self) -> [Field; STORAGE_PROOF_INPUT_LEN_M] {\n        let mut data: BoundedVec<Field, STORAGE_PROOF_INPUT_LEN_M> = BoundedVec::new();\n        data.extend_from_array(self.key.serialize());\n        data.extend_from_array(self.value.serialize());\n        data.extend_from_array(self.proof.serialize());\n        data.storage\n    }\n\n    fn deserialize(data: [Field; STORAGE_PROOF_INPUT_LEN_M]) -> Self {\n        let mut fragment = Fragment::from_array(data);\n        let key = fragment.pop_front_array().deserialize();\n        let value = fragment.pop_front_array().deserialize();\n        let proof = Serde::<STORAGE_PROOF_LEN_M>::deserialize(fragment.pop_front_array());\n        ProofInput {\n            key,\n            value,\n            proof\n        }\n    }\n}\n\n/** RECEIPT PROOF INPUT **/\n\nglobal RECEIPT_NODES_LEN_M: u32 = 3192; // MAX_NODE_LEN * SR_MAX_DEPTH_NO_LEAF\n\npub fn serialize_receipt_nodes(nodes: [Node; SR_MAX_DEPTH_NO_LEAF]) -> [Field; RECEIPT_NODES_LEN_M] {\n    let mut data: BoundedVec<Field, RECEIPT_NODES_LEN_M> = BoundedVec::new();\n    for i in 0..SR_MAX_DEPTH_NO_LEAF {\n        data.extend_from_array(nodes[i].serialize());\n    }\n    data.storage\n}\n\npub fn deserialize_receipt_nodes(data: [Field; RECEIPT_NODES_LEN_M]) -> [Node; SR_MAX_DEPTH_NO_LEAF] {\n    let mut result: Fragment<SR_MAX_DEPTH_NO_LEAF, Node> = Fragment::empty();\n    let mut fragment = Fragment::from_array(data);\n    for _ in 0..SR_MAX_DEPTH_NO_LEAF {\n        let node: Node = fragment.pop_front_array().deserialize();\n        result.push_back(node);\n    }\n    result.data\n}\n\nglobal RECEIPT_PROOF_LEN_M: u32 = 3262; // RECEIPT_NODES_LEN_M + SR_MAX_LEAF_LEN_M + 1\n\nimpl Serde<RECEIPT_PROOF_LEN_M> for Proof<SR_MAX_DEPTH_NO_LEAF, SR_MAX_LEAF_LEN_M> {\n    fn serialize(self) -> [Field; RECEIPT_PROOF_LEN_M] {\n        let mut data: BoundedVec<Field, RECEIPT_PROOF_LEN_M> = BoundedVec::new();\n        data.extend_from_array(serialize_receipt_nodes(self.nodes));\n        data.extend_from_array(self.leaf.serialize());\n        data.push(self.depth as Field);\n        data.storage\n    }\n\n    fn deserialize(data: [Field; RECEIPT_PROOF_LEN_M]) -> Self {\n        let mut fragment = Fragment::from_array(data);\n        let nodes = deserialize_receipt_nodes(fragment.pop_front_array());\n        let leaf = fragment.pop_front_array().deserialize();\n        let depth = fragment.pop_front() as u64;\n        Proof {\n            nodes,\n            leaf,\n            depth,\n        }\n    }\n}\n\nglobal RECEIPT_PROOF_INPUT_LEN_M: u32 = 3360; // SR_MAX_PREFIXED_KEY_NIBBLE_LEN + SR_MAX_VALUE_LEN_M + RECEIPT_PROOF_LEN_M\n\nimpl Serde<RECEIPT_PROOF_INPUT_LEN_M> for ProofInput<SR_MAX_PREFIXED_KEY_NIBBLE_LEN, SR_MAX_VALUE_LEN_M, SR_MAX_DEPTH_NO_LEAF, SR_MAX_LEAF_LEN_M> {\n    fn serialize(self) -> [Field; RECEIPT_PROOF_INPUT_LEN_M] {\n        let mut data: BoundedVec<Field, RECEIPT_PROOF_INPUT_LEN_M> = BoundedVec::new();\n        data.extend_from_array(self.key.serialize());\n        data.extend_from_array(self.value.serialize());\n        data.extend_from_array(self.proof.serialize());\n        data.storage\n    }\n\n    fn deserialize(data: [Field; RECEIPT_PROOF_INPUT_LEN_M]) -> Self {\n        let mut fragment = Fragment::from_array(data);\n        let key = fragment.pop_front_array().deserialize();\n        let value = fragment.pop_front_array().deserialize();\n        let proof = Serde::<RECEIPT_PROOF_LEN_M>::deserialize(fragment.pop_front_array());\n        ProofInput {\n            key,\n            value,\n            proof\n        }\n    }\n}\n\n/** TRANSACTION PROOF INPUT **/\npub global TX_PROOF_INPUT_LEN_M: u32 = 3360;  // Same as RECEIPT_PROOF_INPUT_LEN_M for now\n","path":"/home/drone/projects/rione/circuits/ethereum/circuits/lib/src/serde.nr"},"96":{"source":"use crate::account::{Account, MAX_PREFIXED_KEY_NIBBLE_LEN, MAX_ACCOUNT_STATE_LEN, MAX_ACCOUNT_LEAF_LEN};\nuse crate::misc::{types::{Address, ADDRESS_LENGTH}, bytes::right_pad, fragment::Fragment};\nuse crate::rlp::decode::decode_list_of_small_strings;\nuse crate::rlp::types::RlpList;\nuse crate::merkle_patricia_proofs::proof::{ProofInput, verify_merkle_proof};\nuse crate::HASH_LEN;\n\nuse dep::std::hash::keccak256;\n\nglobal ACCOUNT_FIELDS_COUNT: u32 = 4;\nglobal NONCE_INDEX: u32 = 0;\nglobal BALANCE_INDEX: u32 = 1;\nglobal STORAGE_ROOT_INDEX: u32 = 2;\nglobal CODE_HASH_INDEX: u32 = 3;\n\npub(crate) fn assert_account_equals(account_rlp_left_padded: [u8; MAX_ACCOUNT_STATE_LEN], account: Account) {\n    let account_rlp_right_padded = right_pad(account_rlp_left_padded).storage;\n    let account_rlp_list: RlpList<ACCOUNT_FIELDS_COUNT> = decode_list_of_small_strings(Fragment::from_array(account_rlp_right_padded));\n    assert(account_rlp_list.len == ACCOUNT_FIELDS_COUNT, \"Invalid number of fields in account RLP\");\n\n    let account_rlp = Fragment::from_array(account_rlp_right_padded);\n    account_rlp_list.get(NONCE_INDEX).assert_eq_u64(\"Nonce\", account_rlp, account.nonce);\n    account_rlp_list.get(BALANCE_INDEX).assert_eq_u128(\"Balance\", account_rlp, U128::from_integer(account.balance));\n\n    account_rlp_list.get(STORAGE_ROOT_INDEX).assert_eq_bytes32(\"Storage root\", account_rlp, account.storage_root);\n    account_rlp_list.get(CODE_HASH_INDEX).assert_eq_bytes32(\"Code hash\", account_rlp, account.code_hash);\n}\n\nfn assert_address_equals(address_hash: [u8; MAX_PREFIXED_KEY_NIBBLE_LEN], address: Address) {\n    let address_hash_fragment = Fragment::new(MAX_PREFIXED_KEY_NIBBLE_LEN - HASH_LEN, HASH_LEN, address_hash);\n    let other_address_hash_fragment = Fragment::from_array(keccak256(address, ADDRESS_LENGTH as u32));\n    assert(address_hash_fragment.eq(other_address_hash_fragment), \"Address mismatch\");\n}\n\npub fn verify_account<let MAX_DEPTH_NO_LEAF: u32>(\n    address: Address,\n    account: Account,\n    state_proof_input: ProofInput<MAX_PREFIXED_KEY_NIBBLE_LEN, MAX_ACCOUNT_STATE_LEN, MAX_DEPTH_NO_LEAF, MAX_ACCOUNT_LEAF_LEN>,\n    state_root: [u8; HASH_LEN]\n) {\n    assert_address_equals(state_proof_input.key, address);\n    assert_account_equals(state_proof_input.value, account);\n    verify_merkle_proof(\n        state_proof_input.key,\n        state_proof_input.value,\n        state_root,\n        state_proof_input.proof\n    );\n}\n","path":"/home/drone/projects/rione/circuits/ethereum/circuits/lib/src/verifiers/account.nr"},"97":{"source":"use dep::std::hash::keccak256;\n\nuse crate::chain::{ETHEREUM_MAINNET_ID, ETHEREUM_SEPOLIA_ID};\nuse crate::HASH_LEN;\nuse crate::header::{BlockHeaderPartial, BlockHeaderRlp};\nuse crate::misc::{arrays::sub_array_equals, fragment::Fragment};\nuse crate::rlp::decode::decode_list;\nuse crate::rlp::types::RlpList;\n\nglobal MAX_HEADER_FIELDS_COUNT: u32 = 20;\nglobal STATE_ROOT_INDEX: u32 = 3;\nglobal TRANSACTIONS_ROOT_INDEX: u32 = 4;\nglobal RECEIPTS_ROOT_INDEX: u32 = 5;\nglobal BLOCK_NUM_INDEX: u32 = 8;\n\nglobal LONDON_BLOCK_NUM: u64 = 12_965_000;\nglobal PARIS_BLOCK_NUM: u64 = 15_537_394;\nglobal CANCUN_BLOCK_NUM: u64 = 19_426_587;\n\npub(crate) fn get_header_fields_count(chain_id: Field, block_number: u64) -> u32 {\n    let mut fields_count = 15;\n    if chain_id == ETHEREUM_MAINNET_ID {\n        fields_count = 20;\n    } else if chain_id == ETHEREUM_SEPOLIA_ID {\n        fields_count = 20;\n    } else {\n        assert(false, \"Unsupported chain ID\");\n    }\n    \n    fields_count\n}\n\npub fn verify_header(\n    chain_id: Field,\n    block_header_partial: BlockHeaderPartial,\n    block_header_rlp: BlockHeaderRlp,\n) {\n    let block_header_rlp = Fragment::from_vec(block_header_rlp);\n    let header_rlp_list: RlpList<MAX_HEADER_FIELDS_COUNT> = decode_list(block_header_rlp);\n    let expected_header_fields_count =\n        get_header_fields_count(chain_id, block_header_partial.number);\n\n    assert(\n        expected_header_fields_count == header_rlp_list.len,\n        \"number of header RLP fields does not match\",\n    );\n\n    header_rlp_list.get(BLOCK_NUM_INDEX).assert_eq_u64(\n        \"Block number\",\n        block_header_rlp,\n        block_header_partial.number,\n    );\n    header_rlp_list.get(STATE_ROOT_INDEX).assert_eq_bytes32(\n        \"State root\",\n        block_header_rlp,\n        block_header_partial.state_root,\n    );\n    header_rlp_list.get(TRANSACTIONS_ROOT_INDEX).assert_eq_bytes32(\n        \"Transactions root\",\n        block_header_rlp,\n        block_header_partial.transactions_root,\n    );\n    header_rlp_list.get(RECEIPTS_ROOT_INDEX).assert_eq_bytes32(\n        \"Receipts root\",\n        block_header_rlp,\n        block_header_partial.receipts_root,\n    );\n\n   \n}\n","path":"/home/drone/projects/rione/circuits/ethereum/circuits/lib/src/verifiers/header.nr"},"100":{"source":"use crate::misc::types::Bytes32;\nuse crate::account::MAX_PREFIXED_KEY_NIBBLE_LEN;\nuse crate::account_with_storage::{MAX_STORAGE_VALUE_LEN, MAX_STORAGE_LEAF_LEN};\nuse crate::merkle_patricia_proofs::proof::{ProofInput, verify_merkle_proof};\nuse crate::header::{BlockHeaderPartial, get_header};\n\npub fn verify_storage_values<let N: u32, let MAX_STORAGE_DEPTH_NO_LEAF: u32>(\n    proof_inputs: [ProofInput<MAX_PREFIXED_KEY_NIBBLE_LEN, MAX_STORAGE_VALUE_LEN, MAX_STORAGE_DEPTH_NO_LEAF, MAX_STORAGE_LEAF_LEN>; N],\n    storage_root: Bytes32\n) {\n    for i in 0..N {\n        let proof_input = proof_inputs[i];\n        verify_merkle_proof(\n            proof_input.key,\n            proof_input.value,\n            storage_root,\n            proof_input.proof\n        );\n    }\n}\n\npub fn verify_storage_values_against_block<let N: u32, let MAX_STORAGE_DEPTH_NO_LEAF: u32>(\n    chain_id: Field,\n    block_number: u64,\n    proof_inputs: [ProofInput<MAX_PREFIXED_KEY_NIBBLE_LEN, MAX_STORAGE_VALUE_LEN, MAX_STORAGE_DEPTH_NO_LEAF, MAX_STORAGE_LEAF_LEN>; N],\n    storage_root: Bytes32\n) {\n\n    let header = unsafe { get_header(chain_id, block_number) };\n    \n    assert(header.number == block_number, \"Block number mismatch in storage verification\");\n    \n    verify_storage_values(proof_inputs, storage_root);\n}\n","path":"/home/drone/projects/rione/circuits/ethereum/circuits/lib/src/verifiers/storage.nr"},"107":{"source":"pub fn u32_to_u8(num: u32) -> [u8; 4] {\n    let mut out: [u8; 4] = [0; 4];\n    for i in 0..4 {\n        let shift: u8 = (24 - (i * 8));\n        out[i] = (num >> shift) as u8;\n    }\n\n    out\n}\n\n#[test]\nfn test_u32() {\n    let small = u32_to_u8(10);\n    assert(small.len() == 4);\n    assert(small[0] == 0);\n    assert(small[1] == 0);\n    assert(small[2] == 0);\n    assert(small[3] == 10);\n\n    let two_byte = u32_to_u8(256);\n    assert(two_byte[0] == 0x00);\n    assert(two_byte[1] == 0x00);\n    assert(two_byte[2] == 0x01);\n    assert(two_byte[3] == 0x00);\n\n    let ceil = u32_to_u8(4294967295);\n    assert(ceil[0] == 0xff);\n    assert(ceil[1] == 0xff);\n    assert(ceil[2] == 0xff);\n    assert(ceil[3] == 0xff);\n}\n\npub fn u64_to_u8(num: u64) -> [u8; 8] {\n    let mut out: [u8; 8] = [0; 8];\n    for i in 0..8 {\n        let shift: u8 = 56 - (i * 8);\n        out[i] = (num >> shift) as u8;\n    }\n\n    out\n}\n\n#[test]\nfn test_u64() {\n    let small = u64_to_u8(10);\n    assert(small.len() == 8);\n    assert(small[0] == 0);\n    assert(small[1] == 0);\n    assert(small[2] == 0);\n    assert(small[3] == 0);\n    assert(small[4] == 0);\n    assert(small[5] == 0);\n    assert(small[6] == 0);\n    assert(small[7] == 10);\n\n    let two_byte = u64_to_u8(256);\n    assert(two_byte[0] == 0x00);\n    assert(two_byte[1] == 0x00);\n    assert(two_byte[2] == 0x00);\n    assert(two_byte[3] == 0x00);\n    assert(two_byte[4] == 0x00);\n    assert(two_byte[5] == 0x00);\n    assert(two_byte[6] == 0x01);\n    assert(two_byte[7] == 0x00);\n\n    let random = u64_to_u8(0x1cbe443030);\n    assert(random[0] == 0x00);\n    assert(random[1] == 0x00);\n    assert(random[2] == 0x00);\n    assert(random[3] == 0x1c);\n    assert(random[4] == 0xbe);\n    assert(random[5] == 0x44);\n    assert(random[6] == 0x30);\n    assert(random[7] == 0x30);\n\n    let ceil = u64_to_u8(18446744073709551615);\n    assert(ceil[0] == 0xff);\n    assert(ceil[1] == 0xff);\n    assert(ceil[2] == 0xff);\n    assert(ceil[3] == 0xff);\n    assert(ceil[4] == 0xff);\n    assert(ceil[5] == 0xff);\n    assert(ceil[6] == 0xff);\n    assert(ceil[7] == 0xff);\n}\n","path":"/home/drone/nargo/github.com/vlayer-xyz/noir-u2b/v0.3.4/src/lib.nr"},"109":{"source":"use crate::bn254::ks;\n\n#[field(bn254)]\npub fn decrypt<let R: u32>(ciphers: [Field; R], key:[Field; 4],  iv:[Field; 4]) -> [Field; R] {\n    let mut plains = [0; R];\n    let (mut state, extended_key) = ks::hydra_body(key, iv);\n    let mut ks = ks::hydra_first_head(state, extended_key);\n    if R <= 8 as u32 {\n        for i in 0..R {\n            plains[i] = ciphers[i] - ks[i];\n        }\n    } else {\n        for i in 0..8 {\n            plains[i] = ciphers[i] - ks[i];\n        }\n        for i in 8..R {\n            let off = i % 8;\n            if off == 0 {\n                let result = ks::hydra_head(state, extended_key, off);\n                state = result.0;\n                ks = result.1;\n            }\n            plains[i] = ciphers[i] - ks[off];\n        }\n    }\n    plains\n}\n","path":"/home/drone/projects/rione/circuits/lib/noir-hydra/src/bn254/dec.nr"},"110":{"source":"use crate::bn254::ks;\n\n//encrypts up to 8000 Field Elements\n#[field(bn254)]\npub fn encrypt<let R: u32>(plains: [Field; R], key:[Field; 4],  iv:[Field; 4]) -> [Field; R] {\n    let mut ciphers = [0; R];\n    let (mut state, extended_key) = ks::hydra_body(key, iv);\n    let mut ks = ks::hydra_first_head(state, extended_key);\n    if R <= 8 as u32 {\n        for i in 0..R {\n            ciphers[i] = plains[i] + ks[i];\n        }\n    } else {\n        for i in 0..8 {\n            ciphers[i] = plains[i] + ks[i];\n        }\n        for i in 8..R {\n            let off = i % 8;\n            if off == 0 {\n                let result = ks::hydra_head(state, extended_key, off);\n                state = result.0;\n                ks = result.1;\n            }\n            ciphers[i] = plains[i] + ks[off];\n        }\n    }\n    ciphers\n}\n","path":"/home/drone/projects/rione/circuits/lib/noir-hydra/src/bn254/enc.nr"},"111":{"source":"use crate::bn254::consts;\n\n#[field(bn254)]\npub(crate) fn hydra_body(key: [Field; 4], iv: [Field; 4]) -> ([Field; 8], [Field; 8]) {\n    let (mut state, z) = permutation_b(vec_add(iv, key));\n    state = vec_add(state, key);\n    (vec_concat(state, z), vec_concat(key, matrix_e(key)))\n}\n\n#[field(bn254)]\npub(crate) fn hydra_first_head<let R: u32>(state: [Field; 8], key: [Field; 8]) ->  [Field; 8] {\n    vec_add(permutation_h(state, key), state)\n}\n\n#[field(bn254)]\npub(crate) fn hydra_head<let R: u32>(state: [Field; 8], key: [Field; 8], index: u32) -> ([Field; 8], [Field; 8]) {\n    let roll = rolling(state, index);\n    (roll, vec_add(permutation_h(roll, key), roll))\n}\n\n\nfn rolling(state: [Field; 8], index: u32) -> [Field; 8] {\n    let (y, z) = vec_split(state);\n    let (y, z) = non_linear_r(y, z);\n    let y_perm = matrix_i(y, consts::Mi);\n    let z_perm = matrix_i(z, consts::Mi);\n    vec_add(vec_concat(y_perm, z_perm), consts::rc_r[index])\n}\n\nfn permutation_h(mut roll: [Field; 8], extended_key: [Field; 8]) -> [Field; 8] {\n    for i in 0..consts::Rh {\n        roll = non_linear_h(roll);\n        roll = matrix_i(roll, consts::Mh);\n        roll = vec_add(roll, consts::rc_h[i]);\n        roll = vec_add(roll, extended_key);\n    }\n    roll\n}\n\nfn permutation_b(state: [Field; 4]) -> ([Field;4], [Field; 4]) {\n    let mut acc = [0; 4];\n    let mut state = matrix_e(state);\n    for i in 0..consts::Re_1 {\n        state = non_linear_e(state);\n        state = matrix_e(state);\n        state = vec_add(state, consts::rc_b[i]);\n        acc = vec_add(acc, state);\n    }\n    for i in 0..consts::Ri {\n        state = non_linear_i(state);\n        state = matrix_i(state, consts::Mi);\n        state = vec_add(state, consts::rc_b[i + consts::Re_1]);\n        acc = vec_add(acc, state);\n    }\n    for i in consts::Re_1..consts::Re_1 + consts::Re_2 - 1 {\n        state = non_linear_e(state);\n        state = matrix_e(state);\n        state = vec_add(state, consts::rc_b[i + consts::Ri]);\n        acc = vec_add(acc, state);\n    }\n\n    //one more time but without addition\n    state = non_linear_e(state);\n    state = matrix_e(state);\n    state = vec_add(state, consts::rc_b[consts::Re_1 + consts::Re_2 - 1 + consts::Ri]);\n    (state, acc)\n}\n\n#[field(bn254)]\npub(crate) fn hydra_body_ks(key: [Field; 4], iv: [Field; 4]) -> [Field; 4] {\n    let state = vec_add(key, iv);\n    let mut state = matrix_e(state);\n    for i in 0..consts::Re_1 {\n        state = non_linear_e(state);\n        state = matrix_e(state);\n        state = vec_add(state, consts::rc_b[i]);\n    }\n    for i in 0..consts::Ri {\n        state = non_linear_i(state);\n        state = matrix_i(state, consts::Mi);\n        state = vec_add(state, consts::rc_b[i + consts::Re_1]);\n    }\n    for i in consts::Re_1..consts::Re_1 + consts::Re_2 {\n        state = non_linear_e(state);\n        state = matrix_e(state);\n        state = vec_add(state, consts::rc_b[i + consts::Ri]);\n    }\n    vec_add(state, key)\n}\n\nfn matrix_e<let R: u32>(state: [Field; R]) -> [Field; R] {\n    let sum = state.reduce(|a,b| a + b);\n    let rot_state = rotate_left(state);\n    let mut result = [0; R];\n    for i in 0..R {\n        result[i] = sum + rot_state[i] + state[i] + state[i];\n    }\n    result\n}\n\nfn matrix_i<let R: u32, let L: u32>(state: [Field; R], mat:[[Field; R]; L]) -> [Field; R] {\n    let sum = state.reduce(|a,b| a + b);\n    let mut out = [sum; R];\n    out[0] += state[0] * mat[0][0];\n    for i in 1..R {\n        out[i] += (state[0] * mat[i][0]) + (state[i] * mat[i][i]);\n    }\n    out\n}\n\nfn rotate_left<let R: u32>(mat: [Field; R]) -> [Field; R] {\n    let mut rotated = [0; R];\n    for i in 1..R {\n        rotated[i-1] = mat[i];\n    }\n    rotated[R-1] = mat[0];\n    rotated\n}\n\nfn non_linear_h(roll: [Field; 8]) -> [Field; 8] {\n    let mut dot = roll[0] + roll[1] + roll[2] + roll[3] - roll[4] - roll[5] - roll[6] - roll[7];\n    dot = square(dot);\n    roll.map(|r| r + dot)\n}\n\nfn non_linear_e(state: [Field;4]) -> [Field; 4] {\n    [state[0].pow_32(5), state[1].pow_32(5), state[2].pow_32(5), state[3].pow_32(5)]\n}\n\nfn non_linear_i(state: [Field; 4]) -> [Field;4] {\n    let (dot1, dot2) = get_lm_dot(state);\n    let sum = square(square(dot1) + dot2);\n    [state[0] + sum, state[1] + sum, state[2] + sum, state[3] + sum]\n}\n\nfn non_linear_r(y: [Field;4], z: [Field; 4]) -> ([Field; 4], [Field; 4]) {\n    let (vy, wy) = get_lm_dot(y);\n    let (wz, vz) = get_lm_dot(z);\n    let v = (vy * vz);\n    let w = (wy * wz);\n    (y.map(|yi| yi + v), z.map(|zi| zi + w))\n}\n\nfn get_lm_dot(state: [Field; 4]) -> (Field, Field) {\n    let tmp = state[0] - state[3];\n    (tmp - state[1] + state[2], tmp + state[1] - state[2])\n}\n\nfn square(x: Field) -> Field {\n    x * x\n}\n\nfn vec_concat(lhs:  [Field; 4], rhs: [Field; 4]) -> [Field; 8] {\n    [lhs[0], lhs[1], lhs[2], lhs[3], rhs[0], rhs[1], rhs[2], rhs[3]]\n}\n\nfn vec_split(vec:  [Field; 8]) -> ([Field; 4], [Field; 4]) {\n    ([vec[0], vec[1], vec[2], vec[3]], [vec[4], vec[5], vec[6], vec[7]])\n}\n\nfn vec_add<let R: u32>(lhs: [Field; R], rhs: [Field; R]) -> [Field; R] {\n    let mut result = [0; R];\n    for i in 0..R {\n        result[i] = lhs[i] + rhs[i];\n    }\n    result\n}\n\n#[test]\nfn test_rotate_left() {\n    let test = [0, 1, 2, 3, 4, 5, 6, 7];\n    assert(rotate_left(test) == [1, 2, 3, 4, 5, 6, 7, 0]);\n}\n\n#[test]\nfn test_get_lm_dot() {\n    let (dot1, dot2) = get_lm_dot([17162050878538720375407210140639637720303994375562539862452690421292386592590,\n            11912527370530146728703046717149243981430064476687468213603991691404411193217,\n            18430438893156814166144129663793173051281448131580613239977654404180923080739,\n            7614633435608198927774246011281602559236719354621200488645904294064394220068]);\n    assert(dot1 == 16065328965557188885074047076001964230918658675834484400180448840004504260044);\n    assert(dot2 == 3029505920303854010191881182714106091215891366048194347433123414451480485000);\n}\n\n#[test]\nfn test_non_linear_h() {\n    let state = non_linear_h([17311339206079525542322783825459319113913165622286561296721622612914673407804,\n            16276728151221844182140219810267241649985535582588722449384727866117202327093,\n            10801048258802086965858707507694761799252711922965390030528950861087300763030,\n            3638652786377497073268842010725440468491752112825502524378677961251293024759,\n            7645315248887656730315052486323154491745884763740850513982583264261456826307,\n            10323065323391982836294143162837377995469044206483281154564046348037825339388,\n            20343326181502906791617898953771792194510136932068335746318866730568328752863,\n            17802268834568716074000952286650978346952421838604678848244855399442974823193]);\n    assert(state == [4547325791835956019343387175706495521510639735313024107278926563682326597476,\n        3512714736978274659160823160514418057583009695615185259942031816884855516765,\n        19925277716397792665125716603199213295398550436407887184784458998430762448319,\n        12762882243973202772535851106229891964637590626267999678634186098594754710048,\n        16769544706483362429582061581827605987891723277183347668238091401604918511596,\n        19447294780987688535561152258341829491614882719925778308819554485381287024677,\n        7579312767259337268638502304018968602107611045094798556876170681335981942535,\n        5038255420325146551021555636898154754549895951631141658802159350210628012865]);\n}\n\n#[test]\nfn test_non_linear_i() {\n    let state = non_linear_i([17162050878538720375407210140639637720303994375562539862452690421292386592590,\n            11912527370530146728703046717149243981430064476687468213603991691404411193217,\n            18430438893156814166144129663793173051281448131580613239977654404180923080739,\n            7614633435608198927774246011281602559236719354621200488645904294064394220068]);\n    assert(state == [4309430684818317694633606829961546606191461818288188130026024885465599697736,\n        20948150048649019270175849151728427955865896319829150824875530342153432793980,\n        5577818699436411485370526353115081937168915574306261507550988868354136185885,\n        16650256113727071469247048445860786533672551197762883099917442944813415820831]);\n}\n\n#[test]\nfn test_non_linear_e() {\n    assert(non_linear_e([10, 8, 8, 9]) == [100000, 32768, 32768, 59049]);\n}\n\n#[test]\nfn test_non_linear_r() {\n    let y_in = [17311339206079525542322783825459319113913165622286561296721622612914673407804,\n        16276728151221844182140219810267241649985535582588722449384727866117202327093,\n        10801048258802086965858707507694761799252711922965390030528950861087300763030,\n        3638652786377497073268842010725440468491752112825502524378677961251293024759];\n    let z_in = [7645315248887656730315052486323154491745884763740850513982583264261456826307,\n        10323065323391982836294143162837377995469044206483281154564046348037825339388,\n        20343326181502906791617898953771792194510136932068335746318866730568328752863,\n        17802268834568716074000952286650978346952421838604678848244855399442974823193];\n    let (y_out, z_out) = non_linear_r(y_in, z_in);\n    assert(y_out == [16474558665066990056068011496692118409558256462734362411538742665023636404753,\n        15439947610209308695885447481500040945630626423036523564201847918226165324042,\n        9964267717789551479603935178927561094897802763413191145346070913196263759979,\n        2801872245364961587014069681958239764136842953273303639195798013360256021708]);\n    assert(z_out == [18800231885746230730599298706870897921156360762149932570264867923720730257667,\n        21477981960250556836578389383385121424879520204892363210846331007497098770748,\n        9609999946522205569655739429062260535372248530061383458902947203451793688606,\n        7068942599588014852038792761941446687814533436597726560828935872326439758936]);\n}\n\n#[test]\nfn test_matrix_e() {\n    assert(matrix_e([2, 1, 1, 1]) == [10, 8, 8, 9]);\n}\n","path":"/home/drone/projects/rione/circuits/lib/noir-hydra/src/bn254/ks.nr"},"114":{"source":"\r\nuse std::runtime::is_unconstrained;\r\nuse std::hash::keccak::keccakf1600;\r\n\r\nglobal BLOCK_SIZE_IN_BYTES: u32 = 136; //(1600 - BITS * 2) / WORD_SIZE;\r\nglobal WORD_SIZE: u32 = 8; // Limbs are made up of u64s so 8 bytes each.\r\nglobal LIMBS_PER_BLOCK: u32 = BLOCK_SIZE_IN_BYTES / WORD_SIZE;\r\nglobal NUM_KECCAK_LANES: u32 = 25;\r\n\r\n#[no_predicates]\r\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32] {\r\n    assert(N >= message_size);\r\n\r\n    // Copy input to block bytes. For that we'll need at least input bytes (N)\r\n    // but we want it to be padded to a multiple of BLOCK_SIZE_IN_BYTES.\r\n    let mut block_bytes = [0; ((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES];\r\n    if is_unconstrained() {\r\n        for i in 0..message_size {\r\n            block_bytes[i] = input[i];\r\n        }\r\n    } else {\r\n        for i in 0..N {\r\n            if i < message_size {\r\n                block_bytes[i] = input[i];\r\n            }\r\n        }\r\n    }\r\n\r\n    //1. format_input_lanes\r\n    let max_blocks = (N + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\r\n    //maximum number of bytes to hash\r\n    let real_max_blocks = (message_size + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\r\n    let real_blocks_bytes = real_max_blocks * BLOCK_SIZE_IN_BYTES;\r\n\r\n    block_bytes[message_size] = 1;\r\n    block_bytes[real_blocks_bytes - 1] = 0x80;\r\n\r\n    // populate a vector of 64-bit limbs from our byte array\r\n    let mut sliced_buffer =\r\n        [0; (((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES) / WORD_SIZE];\r\n    for i in 0..sliced_buffer.len() {\r\n        let limb_start = WORD_SIZE * i;\r\n\r\n        let mut sliced = 0;\r\n        let mut v = 1;\r\n        for k in 0..WORD_SIZE {\r\n            sliced += v * (block_bytes[limb_start + k] as Field);\r\n            v *= 256;\r\n        }\r\n\r\n        sliced_buffer[i] = sliced as u64;\r\n    }\r\n\r\n    //2. sponge_absorb\r\n    let mut state: [u64; NUM_KECCAK_LANES] = [0; NUM_KECCAK_LANES];\r\n    // When in an unconstrained runtime we can take advantage of runtime loop bounds,\r\n    // thus allowing us to simplify the loop body.\r\n    if is_unconstrained() {\r\n        for i in 0..real_max_blocks {\r\n            if (i == 0) {\r\n                for j in 0..LIMBS_PER_BLOCK {\r\n                    state[j] = sliced_buffer[j];\r\n                }\r\n            } else {\r\n                for j in 0..LIMBS_PER_BLOCK {\r\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\r\n                }\r\n            }\r\n            state = keccakf1600(state);\r\n        }\r\n    } else {\r\n        // `real_max_blocks` is guaranteed to at least be `1`\r\n        // We peel out the first block as to avoid a conditional inside of the loop.\r\n        // Otherwise, a dynamic predicate can cause a blowup in a constrained runtime.\r\n        for j in 0..LIMBS_PER_BLOCK {\r\n            state[j] = sliced_buffer[j];\r\n        }\r\n        state = keccakf1600(state);\r\n        for i in 1..max_blocks {\r\n            if i < real_max_blocks {\r\n                for j in 0..LIMBS_PER_BLOCK {\r\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\r\n                }\r\n                state = keccakf1600(state);\r\n            }\r\n        }\r\n    }\r\n\r\n    //3. sponge_squeeze\r\n    let mut result = [0; 32];\r\n    for i in 0..4 {\r\n        let lane = state[i] as Field;\r\n        let lane_le: [u8; 8] = lane.to_le_bytes();\r\n        for j in 0..8 {\r\n            result[8 * i + j] = lane_le[j];\r\n        }\r\n    }\r\n    result\r\n}","path":"/home/drone/projects/rione/circuits/lib/keccak256/src/keccak256.nr"}},"names":["main"],"brillig_names":["u64_to_ascii_bytes","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","get_account_with_storage","directive_invert","directive_integer_quotient","directive_to_radix"]}