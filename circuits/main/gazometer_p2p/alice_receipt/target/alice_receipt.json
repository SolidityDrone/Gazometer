{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":2469029560807216080,"abi":{"parameters":[{"name":"alice_signature_nonce_1","type":{"kind":"array","length":65,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"alice_signature_nonce_2","type":{"kind":"array","length":65,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"chain_id","type":{"kind":"field"},"visibility":"public"},{"name":"block_number","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"message_nonce_1","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"pub_x_1","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"pub_y_1","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"pub_x_2","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"pub_y_2","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"contract_address","type":{"kind":"array","length":20,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"receipt_amount","type":{"kind":"integer","sign":"signed","width":64},"visibility":"private"}],"return_type":{"abi_type":{"kind":"tuple","fields":[{"kind":"field"},{"kind":"field"},{"kind":"field"},{"kind":"field"},{"kind":"field"},{"kind":"field"},{"kind":"field"}]},"visibility":"public"},"error_types":{"292786241566106125":{"error_kind":"fmtstring","length":31,"item_types":[{"kind":"string","length":17}]},"662911055836379074":{"error_kind":"string","string":"Cannot pop array: fragment is too short"},"808102636936227868":{"error_kind":"string","string":"Cannot push: fragment is full"},"1257039332889662951":{"error_kind":"string","string":"Unsupported chain ID"},"1702844987497767662":{"error_kind":"string","string":"number of header RLP fields does not match"},"1784090300352196074":{"error_kind":"string","string":"New max length is smaller than fragment length"},"1797804167342671480":{"error_kind":"string","string":"Invalid node type"},"1848132903095460097":{"error_kind":"string","string":"Expected RLP header to be maximum 1 byte long"},"1975296384129351436":{"error_kind":"string","string":"Decoded length of long string exceeds input length"},"2294458973011079183":{"error_kind":"string","string":"Expected a list"},"2446709291901099778":{"error_kind":"fmtstring","length":31,"item_types":[{"kind":"string","length":12}]},"2814641233417603000":{"error_kind":"fmtstring","length":32,"item_types":[{"kind":"string","length":12}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3492945213712566949":{"error_kind":"string","string":"Subarray index out of bound"},"3649116680727309155":{"error_kind":"string","string":"Expected to consume all key nibbles"},"3990714964858224170":{"error_kind":"string","string":"Value length mismatch"},"4649481178424447293":{"error_kind":"fmtstring","length":31,"item_types":[{"kind":"string","length":5}]},"4989950638959520334":{"error_kind":"fmtstring","length":32,"item_types":[{"kind":"string","length":17}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5493362915830397726":{"error_kind":"string","string":"Prefix must be 0, 1, 2 or 3"},"5655419122065692946":{"error_kind":"string","string":"Length of length exceeds input length"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"6236500010476601753":{"error_kind":"fmtstring","length":32,"item_types":[{"kind":"string","length":7}]},"6360937559958062612":{"error_kind":"string","string":"Cannot pop from an empty fragment"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6768678589290466106":{"error_kind":"fmtstring","length":30,"item_types":[{"kind":"string","length":9}]},"6797140530996405384":{"error_kind":"fmtstring","length":31,"item_types":[{"kind":"string","length":7}]},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"7512174461964532630":{"error_kind":"fmtstring","length":30,"item_types":[{"kind":"string","length":10}]},"7673055947793783294":{"error_kind":"string","string":"Element is not a string of length < 56 bytes"},"7701088741439810963":{"error_kind":"string","string":"Expected a hash at the end of the extension node"},"7727927684323588447":{"error_kind":"string","string":"Expected a hash at position given by the key nibble"},"7729612060405699720":{"error_kind":"string","string":"Node RLP length exceeds MAX_LEN"},"7932861116973345373":{"error_kind":"string","string":"Value mismatch"},"7976774808975071288":{"error_kind":"string","string":"Bytes implicit data length must be at least 2 times larger than bytes explicit length"},"8449533356146759774":{"error_kind":"string","string":"Extension key part does not correspond to given key nibbles"},"8647927282746596079":{"error_kind":"fmtstring","length":30,"item_types":[{"kind":"string","length":13}]},"8764575204013396926":{"error_kind":"string","string":"Leaf parity prefix must be 2 or 3"},"8940778978892985534":{"error_kind":"string","string":"Key mismatch in the leaf"},"9003498225274356583":{"error_kind":"fmtstring","length":30,"item_types":[{"kind":"string","length":17}]},"9262262581089067316":{"error_kind":"string","string":"Length of length is zero"},"9610804029702890081":{"error_kind":"string","string":"Inconsistent rlp length"},"9733638806613941694":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32}]},"9931858164094679337":{"error_kind":"fmtstring","length":30,"item_types":[{"kind":"string","length":12}]},"10029016582456820804":{"error_kind":"string","string":"Fragment length exceeds data length"},"10459214753737813644":{"error_kind":"string","string":"Total length exceeds input length"},"10736731826012069778":{"error_kind":"fmtstring","length":31,"item_types":[{"kind":"string","length":9}]},"10854030354164654860":{"error_kind":"string","string":"Address mismatch"},"11183658210205501665":{"error_kind":"fmtstring","length":30,"item_types":[{"kind":"string","length":5}]},"11201295997920925782":{"error_kind":"string","string":"Expected a zero after a prefix of even parity"},"13113033765825030666":{"error_kind":"fmtstring","length":32,"item_types":[{"kind":"string","length":10}]},"13169712016435268629":{"error_kind":"string","string":"Decoded length of long list exceeds input length"},"13521589430615575074":{"error_kind":"fmtstring","length":31,"item_types":[{"kind":"string","length":13}]},"13851312983424125104":{"error_kind":"fmtstring","length":32,"item_types":[{"kind":"string","length":5}]},"13857984082167849225":{"error_kind":"string","string":"Invalid node hash"},"14130454602814610950":{"error_kind":"string","string":"Extension parity prefix must be 0 or 1"},"14177523539272545097":{"error_kind":"string","string":"Array index out of bound"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14384811266519685328":{"error_kind":"string","string":"Subfragment overflows fragment"},"14420715966409058246":{"error_kind":"string","string":"Length of length exceeds maximum"},"14462956016171063393":{"error_kind":"string","string":"Leaf expected to have 2 fields"},"14651816509643900852":{"error_kind":"string","string":"Decoded length of short string exceeds input length"},"14729908539421612020":{"error_kind":"fmtstring","length":30,"item_types":[{"kind":"string","length":7}]},"14911434386120940114":{"error_kind":"string","string":"Invalid number of fields in account RLP"},"15862946155048515401":{"error_kind":"string","string":"Decoded length of short list exceeds input length"},"15864849592686294349":{"error_kind":"fmtstring","length":32,"item_types":[{"kind":"string","length":9}]},"16538375868159084754":{"error_kind":"string","string":"Block number does not match the argument"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17362798791118512561":{"error_kind":"fmtstring","length":31,"item_types":[{"kind":"string","length":10}]},"17772659172029321311":{"error_kind":"fmtstring","length":32,"item_types":[{"kind":"string","length":13}]},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"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","file_map":{"3":{"source":"use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        unsafe {\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n}\n","path":"std/array/mod.nr"},"5":{"source":"use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: StructDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: StructDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n","path":"std/cmp.nr"},"6":{"source":"use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"12":{"source":"// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n","path":"std/convert.nr"},"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"19":{"source":"use crate::runtime::is_unconstrained;\n\nglobal BLOCK_SIZE_IN_BYTES: u32 = 136; //(1600 - BITS * 2) / WORD_SIZE;\nglobal WORD_SIZE: u32 = 8; // Limbs are made up of u64s so 8 bytes each.\nglobal LIMBS_PER_BLOCK: u32 = BLOCK_SIZE_IN_BYTES / WORD_SIZE;\nglobal NUM_KECCAK_LANES: u32 = 25;\n\n#[foreign(keccakf1600)]\npub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {}\n\n#[no_predicates]\n#[deprecated(\"keccak256 is being deprecated from the stdlib, use https://github.com/noir-lang/keccak256 instead\")]\npub(crate) fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32] {\n    assert(N >= message_size);\n\n    // Copy input to block bytes. For that we'll need at least input bytes (N)\n    // but we want it to be padded to a multiple of BLOCK_SIZE_IN_BYTES.\n    let mut block_bytes = [0; ((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES];\n    if is_unconstrained() {\n        for i in 0..message_size {\n            block_bytes[i] = input[i];\n        }\n    } else {\n        for i in 0..N {\n            if i < message_size {\n                block_bytes[i] = input[i];\n            }\n        }\n    }\n\n    //1. format_input_lanes\n    let max_blocks = (N + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    //maximum number of bytes to hash\n    let real_max_blocks = (message_size + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    let real_blocks_bytes = real_max_blocks * BLOCK_SIZE_IN_BYTES;\n\n    block_bytes[message_size] = 1;\n    block_bytes[real_blocks_bytes - 1] = 0x80;\n\n    // populate a vector of 64-bit limbs from our byte array\n    let mut sliced_buffer =\n        [0; (((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES) / WORD_SIZE];\n    for i in 0..sliced_buffer.len() {\n        let limb_start = WORD_SIZE * i;\n\n        let mut sliced = 0;\n        let mut v = 1;\n        for k in 0..WORD_SIZE {\n            sliced += v * (block_bytes[limb_start + k] as Field);\n            v *= 256;\n        }\n\n        sliced_buffer[i] = sliced as u64;\n    }\n\n    //2. sponge_absorb\n    let mut state: [u64; NUM_KECCAK_LANES] = [0; NUM_KECCAK_LANES];\n    // When in an unconstrained runtime we can take advantage of runtime loop bounds,\n    // thus allowing us to simplify the loop body.\n    if is_unconstrained() {\n        for i in 0..real_max_blocks {\n            if (i == 0) {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = sliced_buffer[j];\n                }\n            } else {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\n                }\n            }\n            state = keccakf1600(state);\n        }\n    } else {\n        // `real_max_blocks` is guaranteed to at least be `1`\n        // We peel out the first block as to avoid a conditional inside of the loop.\n        // Otherwise, a dynamic predicate can cause a blowup in a constrained runtime.\n        for j in 0..LIMBS_PER_BLOCK {\n            state[j] = sliced_buffer[j];\n        }\n        state = keccakf1600(state);\n        for i in 1..max_blocks {\n            if i < real_max_blocks {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\n                }\n                state = keccakf1600(state);\n            }\n        }\n    }\n\n    //3. sponge_squeeze\n    let mut result = [0; 32];\n    for i in 0..4 {\n        let lane = state[i] as Field;\n        let lane_le: [u8; 8] = lane.to_le_bytes();\n        for j in 0..8 {\n            result[8 * i + j] = lane_le[j];\n        }\n    }\n    result\n}\n\nmod tests {\n    use super::keccak256;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x5a, 0x50, 0x2f, 0x9f, 0xca, 0x46, 0x7b, 0x26, 0x6d, 0x5b, 0x78, 0x33, 0x65, 0x19,\n            0x37, 0xe8, 0x05, 0x27, 0x0c, 0xa3, 0xf3, 0xaf, 0x1c, 0x0d, 0xd2, 0x46, 0x2d, 0xca,\n            0x4b, 0x3b, 0x1a, 0xbf,\n        ];\n        assert_eq(keccak256(input, input.len()), result);\n    }\n\n    #[test]\n    fn hash_hello_world() {\n        let input = \"Hello world!\".as_bytes();\n        let result = [\n            0xec, 0xd0, 0xe1, 0x8, 0xa9, 0x8e, 0x19, 0x2a, 0xf1, 0xd2, 0xc2, 0x50, 0x55, 0xf4, 0xe3,\n            0xbe, 0xd7, 0x84, 0xb5, 0xc8, 0x77, 0x20, 0x4e, 0x73, 0x21, 0x9a, 0x52, 0x3, 0x25, 0x1f,\n            0xea, 0xab,\n        ];\n        assert_eq(keccak256(input, input.len()), result);\n    }\n\n    #[test]\n    fn var_size_hash() {\n        let input = [\n            189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205,\n            206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222,\n            223,\n        ];\n        let result = [\n            226, 37, 115, 94, 94, 196, 72, 116, 194, 105, 79, 233, 65, 12, 30, 94, 181, 131, 170,\n            219, 171, 166, 236, 88, 143, 67, 255, 160, 248, 214, 39, 129,\n        ];\n        assert_eq(keccak256(input, 13), result);\n    }\n\n    #[test]\n    fn hash_longer_than_136_bytes() {\n        let input = \"123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789\"\n            .as_bytes();\n        assert(input.len() > 136);\n\n        let result = [\n            0x1d, 0xca, 0xeb, 0xdf, 0xd9, 0xd6, 0x24, 0x67, 0x1c, 0x18, 0x16, 0xda, 0xd, 0x8a, 0xeb,\n            0xa8, 0x75, 0x71, 0x2c, 0xc, 0x89, 0xe0, 0x25, 0x2, 0xe8, 0xb6, 0x5e, 0x16, 0x5, 0x55,\n            0xe4, 0x40,\n        ];\n        assert_eq(keccak256(input, input.len()), result);\n    }\n}\n","path":"std/hash/keccak.nr"},"20":{"source":"pub mod poseidon;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\nuse crate::uint128::U128;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n","path":"std/hash/mod.nr"},"29":{"source":"pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod merkle;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod sha256;\npub mod sha512;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod uint128;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n}\n","path":"std/lib.nr"},"59":{"source":"use crate::cmp::{Eq, Ord, Ordering};\nuse crate::ops::{Add, BitAnd, BitOr, BitXor, Div, Mul, Not, Rem, Shl, Shr, Sub};\nuse crate::static_assert;\nuse super::{convert::AsPrimitive, default::Default};\n\nglobal pow64: Field = 18446744073709551616; //2^64;\nglobal pow63: Field = 9223372036854775808; // 2^63;\npub struct U128 {\n    pub(crate) lo: Field,\n    pub(crate) hi: Field,\n}\n\nimpl U128 {\n\n    pub fn from_u64s_le(lo: u64, hi: u64) -> U128 {\n        // in order to handle multiplication, we need to represent the product of two u64 without overflow\n        assert(crate::field::modulus_num_bits() as u32 > 128);\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    pub fn from_u64s_be(hi: u64, lo: u64) -> U128 {\n        U128::from_u64s_le(lo, hi)\n    }\n\n    pub fn zero() -> U128 {\n        U128 { lo: 0, hi: 0 }\n    }\n\n    pub fn one() -> U128 {\n        U128 { lo: 1, hi: 0 }\n    }\n    pub fn from_le_bytes(bytes: [u8; 16]) -> U128 {\n        let mut lo = 0;\n        let mut base = 1;\n        for i in 0..8 {\n            lo += (bytes[i] as Field) * base;\n            base *= 256;\n        }\n        let mut hi = 0;\n        base = 1;\n        for i in 8..16 {\n            hi += (bytes[i] as Field) * base;\n            base *= 256;\n        }\n        U128 { lo, hi }\n    }\n\n    pub fn to_be_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_be_bytes();\n        let hi: [u8; 8] = self.hi.to_be_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = hi[i];\n            bytes[i + 8] = lo[i];\n        }\n        bytes\n    }\n\n    pub fn to_le_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_le_bytes();\n        let hi: [u8; 8] = self.hi.to_le_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = lo[i];\n            bytes[i + 8] = hi[i];\n        }\n        bytes\n    }\n\n    pub fn from_hex<let N: u32>(hex: str<N>) -> U128 {\n        let bytes = hex.as_bytes();\n        // string must starts with \"0x\"\n        assert((bytes[0] == 48) & (bytes[1] == 120), \"Invalid hexadecimal string\");\n        static_assert(N < 35, \"Input does not fit into a U128\");\n\n        let mut lo = 0;\n        let mut hi = 0;\n        let mut base = 1;\n        if N <= 18 {\n            for i in 0..N - 2 {\n                lo += U128::decode_ascii(bytes[N - i - 1]) * base;\n                base = base * 16;\n            }\n        } else {\n            for i in 0..16 {\n                lo += U128::decode_ascii(bytes[N - i - 1]) * base;\n                base = base * 16;\n            }\n            base = 1;\n            for i in 17..N - 1 {\n                hi += U128::decode_ascii(bytes[N - i]) * base;\n                base = base * 16;\n            }\n        }\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    unconstrained fn unconstrained_check_is_upper_ascii(ascii: u8) -> bool {\n        ((ascii >= 65) & (ascii <= 90)) // Between 'A' and 'Z'\n    }\n\n    pub(crate) fn decode_ascii(ascii: u8) -> Field {\n        (\n            if ascii < 58 {\n                ascii - 48\n            } else {\n                // Safety: optionally adds 32 and then check (below) the result is in 'a..f' range\n                let ascii =\n                    ascii + 32 * (unsafe { U128::unconstrained_check_is_upper_ascii(ascii) as u8 });\n                assert(ascii >= 97); // enforce >= 'a'\n                assert(ascii <= 102); // enforce <= 'f'\n                ascii - 87\n            }\n        ) as Field\n    }\n\n    // TODO: Replace with a faster version.\n    // A circuit that uses this function can be slow to compute\n    // (we're doing up to 127 calls to compute the quotient)\n    unconstrained fn unconstrained_div(self: Self, b: U128) -> (U128, U128) {\n        if b == U128::zero() {\n            // Return 0,0 to avoid eternal loop\n            (U128::zero(), U128::zero())\n        } else if self < b {\n            (U128::zero(), self)\n        } else if self == b {\n            (U128::one(), U128::zero())\n        } else {\n            let (q, r) = if b.hi as u64 >= pow63 as u64 {\n                // The result of multiplication by 2 would overflow\n                (U128::zero(), self)\n            } else {\n                self.unconstrained_div(b * U128::from_u64s_le(2, 0))\n            };\n            let q_mul_2 = q * U128::from_u64s_le(2, 0);\n            if r < b {\n                (q_mul_2, r)\n            } else {\n                (q_mul_2 + U128::one(), r - b)\n            }\n        }\n    }\n\n    pub fn from_integer<T>(i: T) -> U128\n    where\n        T: AsPrimitive<Field>,\n    {\n        let f = i.as_();\n        // Reject values which would overflow a u128\n        f.assert_max_bit_size::<128>();\n        let lo = f as u64 as Field;\n        let hi = (f - lo) / pow64;\n        U128 { lo, hi }\n    }\n\n    pub fn to_integer<T>(self) -> T\n    where\n        Field: AsPrimitive<T>,\n    {\n        AsPrimitive::as_(self.lo + self.hi * pow64)\n    }\n\n    fn wrapping_mul(self: Self, b: U128) -> U128 {\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.lo * b.hi + self.hi * b.lo + carry;\n        let hi = high as u64 as Field;\n        U128 { lo, hi }\n    }\n}\n\nimpl Add for U128 {\n    fn add(self: Self, b: U128) -> U128 {\n        let low = self.lo + b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.hi + b.hi + carry;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to add with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Sub for U128 {\n    fn sub(self: Self, b: U128) -> U128 {\n        let low = pow64 + self.lo - b.lo;\n        let lo = low as u64 as Field;\n        let borrow = (low == lo) as Field;\n        let high = self.hi - b.hi - borrow;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to subtract with underflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Mul for U128 {\n    fn mul(self: Self, b: U128) -> U128 {\n        assert(self.hi * b.hi == 0, \"attempt to multiply with overflow\");\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = if crate::field::modulus_num_bits() as u32 > 196 {\n            (self.lo + self.hi) * (b.lo + b.hi) - low + carry\n        } else {\n            self.lo * b.hi + self.hi * b.lo + carry\n        };\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to multiply with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Div for U128 {\n    fn div(self: Self, b: U128) -> U128 {\n        // Safety: euclidian division is asserted to be correct: assert(a == b * q + r); and assert(r < b);\n        // Furthermore, U128 addition and multiplication ensures that b * q + r does not overflow\n        unsafe {\n            let (q, r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n            q\n        }\n    }\n}\n\nimpl Rem for U128 {\n    fn rem(self: Self, b: U128) -> U128 {\n        // Safety: cf div() above\n        unsafe {\n            let (q, r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n\n            r\n        }\n    }\n}\n\nimpl Eq for U128 {\n    fn eq(self: Self, b: U128) -> bool {\n        (self.lo == b.lo) & (self.hi == b.hi)\n    }\n}\n\nimpl Ord for U128 {\n    fn cmp(self, other: Self) -> Ordering {\n        let hi_ordering = (self.hi as u64).cmp((other.hi as u64));\n        let lo_ordering = (self.lo as u64).cmp((other.lo as u64));\n\n        if hi_ordering == Ordering::equal() {\n            lo_ordering\n        } else {\n            hi_ordering\n        }\n    }\n}\n\nimpl Not for U128 {\n    fn not(self) -> U128 {\n        U128 { lo: (!(self.lo as u64)) as Field, hi: (!(self.hi as u64)) as Field }\n    }\n}\n\nimpl BitOr for U128 {\n    fn bitor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) | (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) | (other.hi as u64)) as Field,\n        }\n    }\n}\n\nimpl BitAnd for U128 {\n    fn bitand(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) & (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) & (other.hi as u64)) as Field,\n        }\n    }\n}\n\nimpl BitXor for U128 {\n    fn bitxor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) ^ (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) ^ (other.hi as u64)) as Field,\n        }\n    }\n}\n\nimpl Shl for U128 {\n    fn shl(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift left with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self.wrapping_mul(U128::from_integer(y))\n    }\n}\n\nimpl Shr for U128 {\n    fn shr(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift right with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self / U128::from_integer(y)\n    }\n}\n\nimpl Default for U128 {\n    fn default() -> Self {\n        U128::zero()\n    }\n}\n\nmod tests {\n    use crate::default::Default;\n    use crate::ops::Not;\n    use crate::uint128::{pow63, pow64, U128};\n\n    #[test]\n    fn test_not(lo: u64, hi: u64) {\n        let num = U128::from_u64s_le(lo, hi);\n        let not_num = num.not();\n\n        assert_eq(not_num.hi, (hi.not() as Field));\n        assert_eq(not_num.lo, (lo.not() as Field));\n\n        let not_not_num = not_num.not();\n        assert_eq(num, not_not_num);\n    }\n    #[test]\n    fn test_construction() {\n        // Check little-endian u64 is inversed with big-endian u64 construction\n        let a = U128::from_u64s_le(2, 1);\n        let b = U128::from_u64s_be(1, 2);\n        assert_eq(a, b);\n        // Check byte construction is equivalent\n        let c = U128::from_le_bytes([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n        let d = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        assert_eq(c, d);\n    }\n    #[test]\n    fn test_byte_decomposition() {\n        let a = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        // Get big-endian and little-endian byte decompostions\n        let le_bytes_a = a.to_le_bytes();\n        let be_bytes_a = a.to_be_bytes();\n\n        // Check equivalence\n        for i in 0..16 {\n            assert_eq(le_bytes_a[i], be_bytes_a[15 - i]);\n        }\n        // Reconstruct U128 from byte decomposition\n        let b = U128::from_le_bytes(le_bytes_a);\n        // Check that it's the same element\n        assert_eq(a, b);\n    }\n    #[test]\n    fn test_hex_constuction() {\n        let a = U128::from_u64s_le(0x1, 0x2);\n        let b = U128::from_hex(\"0x20000000000000001\");\n        assert_eq(a, b);\n\n        let c = U128::from_hex(\"0xffffffffffffffffffffffffffffffff\");\n        let d = U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff);\n        assert_eq(c, d);\n\n        let e = U128::from_hex(\"0x00000000000000000000000000000000\");\n        let f = U128::from_u64s_le(0, 0);\n        assert_eq(e, f);\n    }\n\n    // Ascii decode tests\n\n    #[test]\n    fn test_ascii_decode_correct_range() {\n        // '0'..'9' range\n        for i in 0..10 {\n            let decoded = U128::decode_ascii(48 + i);\n            assert_eq(decoded, i as Field);\n        }\n        // 'A'..'F' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(65 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n        // 'a'..'f' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(97 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_0() {\n        crate::println(U128::decode_ascii(0));\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_1() {\n        crate::println(U128::decode_ascii(47));\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_0() {\n        let _ = U128::decode_ascii(58);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_1() {\n        let _ = U128::decode_ascii(64);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_0() {\n        let _ = U128::decode_ascii(71);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_1() {\n        let _ = U128::decode_ascii(96);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_greater_than_102_fails() {\n        let _ = U128::decode_ascii(103);\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_regression() {\n        // This code will actually fail because of ascii_decode,\n        // but in the past it was possible to create a value > (1<<128)\n        let a = U128::from_hex(\"0x~fffffffffffffffffffffffffffffff\");\n        let b: Field = a.to_integer();\n        let c: [u8; 17] = b.to_le_bytes();\n        assert(c[16] != 0);\n    }\n\n    #[test]\n    fn test_unconstrained_div() {\n        // Test the potential overflow case\n        let a = U128::from_u64s_le(0x0, 0xffffffffffffffff);\n        let b = U128::from_u64s_le(0x0, 0xfffffffffffffffe);\n        let c = U128::one();\n        let d = U128::from_u64s_le(0x0, 0x1);\n        // Safety: testing context\n        unsafe {\n            let (q, r) = a.unconstrained_div(b);\n            assert_eq(q, c);\n            assert_eq(r, d);\n        }\n\n        let a = U128::from_u64s_le(2, 0);\n        let b = U128::one();\n        // Check the case where a is a multiple of b\n        // Safety: testing context\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (a, U128::zero()));\n        }\n\n        // Check where b is a multiple of a\n        // Safety: testing context\n        unsafe {\n            let (c, d) = b.unconstrained_div(a);\n            assert_eq((c, d), (U128::zero(), b));\n        }\n\n        // Dividing by zero returns 0,0\n        let a = U128::from_u64s_le(0x1, 0x0);\n        let b = U128::zero();\n        // Safety: testing context\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (U128::zero(), U128::zero()));\n        }\n        // Dividing 1<<127 by 1<<127 (special case)\n        let a = U128::from_u64s_le(0x0, pow63 as u64);\n        let b = U128::from_u64s_le(0x0, pow63 as u64);\n        // Safety: testing context\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (U128::one(), U128::zero()));\n        }\n    }\n\n    #[test]\n    fn integer_conversions() {\n        // Maximum\n        let start: Field = 0xffffffffffffffffffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Minimum\n        let start: Field = 0x0;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Low limb\n        let start: Field = 0xffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // High limb\n        let start: Field = 0xffffffffffffffff0000000000000000;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn integer_conversions_fuzz(lo: u64, hi: u64) {\n        let start: Field = (lo as Field) + pow64 * (hi as Field);\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        // 1*0==0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::one()));\n\n        // 0*1==0\n        assert_eq(U128::zero(), U128::one().wrapping_mul(U128::zero()));\n\n        // 1*1==1\n        assert_eq(U128::one(), U128::one().wrapping_mul(U128::one()));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::zero()));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::from_u64s_le(0, 1).wrapping_mul(U128::one()));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::one().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::from_u64s_le(0, 1)));\n        // -1 * -1 == 1\n        assert_eq(\n            U128::one(),\n            U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff).wrapping_mul(\n                U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff),\n            ),\n        );\n    }\n\n    #[test]\n    fn test_default() {\n        assert_eq(U128::default(), U128::zero());\n    }\n}\n","path":"std/uint128.nr"},"61":{"source":"use dep::ethereum::account_with_storage::{get_header, StorageWithinBlock};\nuse dep::ethereum::misc::types::{Address, Bytes32};\nuse dep::ethereum::account::{get_account, AccountWithinBlock, MAX_PREFIXED_KEY_NIBBLE_LEN};\nuse dep::ethereum::merkle_patricia_proofs::proof::{ProofInput, Key, Value, Proof, Node, Leaf, verify_merkle_proof};\nuse dep::ethereum::verifiers::storage::verify_storage_values;\nuse dep::ethereum::account_with_storage::get_account_with_storage;\nuse dep::hydra::bn254::{enc, dec};\nuse dep::keccak256::keccak256;\n\n\n// Alice sign nonce n & n-1\n// n-1 is hashed and check that keccak(sig(n-1))) exist in the storage of the contract\n// if it does, prove state of balanceCommit exist for that key(keccak(sig(n-1)))\n// use sig(n-1) to decrypt the balanceCommit of n-1 and save the value\n\n// updated Finalbalance = receipt_balance_change + n-1 decrypted balanceCommit\n// encrypt the FinalBalance with sign(n)\n\n// output chain_id, block_number, keccak(sign(n))[commit2], encrypted_FinalBalance\n\n\n\n\nfn main(\n    alice_signature_nonce_1: [u8; 65],\n    alice_signature_nonce_2: [u8; 65],\n    chain_id: pub Field,\n    block_number: u64,\n    message_nonce_1: u64,\n    pub_x_1: [u8; 32],\n    pub_y_1: [u8; 32],\n    pub_x_2: [u8; 32],\n    pub_y_2: [u8; 32],\n    contract_address: Address,\n    receipt_amount: i64,\n) -> pub (Field, Field, Field, Field, Field, Field, Field) {\n\n    // ---- Check nonce are valid ------ //\n    let message_nonce_2 = message_nonce_1 + 1;\n    let hashed_message_1 = hash_u64(message_nonce_1);\n    let hashed_message_2 = hash_u64(message_nonce_2);\n\n\n    // Create 64-byte signature by taking first 64 bytes\n    let mut sig_64_1: [u8; 64] = [0; 64];\n    let mut sig_64_2: [u8; 64] = [0; 64];\n    for i in 0..64 {\n        sig_64_1[i] = alice_signature_nonce_1[i];\n        sig_64_2[i] = alice_signature_nonce_2[i];\n    }\n\n    assert(std::ecdsa_secp256k1::verify_signature(pub_x_1, pub_y_1, sig_64_1, hashed_message_1));\n    assert(std::ecdsa_secp256k1::verify_signature(pub_x_2, pub_y_2, sig_64_2, hashed_message_2));\n\n    let balance_commit_slot = 2;\n\n    let commit_1_hash = \n        keccak256(hex_bytes_to_ascii(alice_signature_nonce_1), 132);\n    let commit_2_hash = \n        keccak256(hex_bytes_to_ascii(alice_signature_nonce_2), 132);\n    \n    //----- compute storage keys ----- //\n\n    let mut key_and_slot: [u8; 64] = [0; 64];    \n    for i in 0..32 {\n        key_and_slot[i] = commit_1_hash[i];\n    }\n    key_and_slot[63] = balance_commit_slot as u8;  \n    let commit_1_storage_key = keccak256(key_and_slot, 64);\n\n    for i in 0..32 {\n        key_and_slot[i] = commit_2_hash[i];\n    }\n    key_and_slot[63] = balance_commit_slot as u8;  \n    let balance_commit_1_storage_key = keccak256(key_and_slot, 64);\n\n    //---- Get Verified Storage Values ----- //\n        // get balance for key(commit_1_storage_key) => balance_commit_verified_storage.values[0]\n    let commit_1_verified_storage = unsafe {get_account_with_storage(\n        chain_id,\n        block_number,\n        contract_address,\n        commit_1_storage_key\n    )};\n    // If key value dosent exist in mapping (commit=>balance) then the oracle will reject\n    // therefore we might check mapping(commit=>bool) is true, but we can neglet it here\n    // as a false commitment wont match the sig, and a non mapped key will throw error\n\n    //------ Compose new balance -----------//\n    // @Dev: Security is low, for same sig and fiferent balance an attacker\n    // could figure out the length of the value, by checking the switching bytes\n    // But since we use 1 commit 1 derived key we get rid of this iussue\n    \n    // 1) decrypt balanceCommit for n-1 \n    let iv = [\n        message_nonce_1 as Field, \n        bytes_to_field(pub_x_1), \n        bytes_to_field(pub_y_1), \n        0\n    ];\n    let nonce_1_derived_key = derive_key_from_signature(alice_signature_nonce_1);\n    let encrypted_balance = safe_storage_to_field(commit_1_verified_storage.values[0]);\n    let decrypted_1_balance_commit_balance = \n        decrypt_balance(alice_signature_nonce_1, encrypted_balance);\n    // 2) add receipt_amount to the decrypted balanceCommit for n-1 \n    let receipt_amount_field: Field = receipt_amount as Field;\n    let new_balance = decrypted_1_balance_commit_balance + receipt_amount_field;\n    // 3) encrypt the new balance with sign(n)\n    let new_key = derive_key_from_signature(alice_signature_nonce_2);\n    let balance_fields = [new_balance, 0, 0, 0, 0, 0, 0, 0];\n    let encrypted_fields = enc::encrypt(balance_fields, new_key, iv);\n\n    let encrypted_final_balance = encrypted_fields[0];\n    // nullifier serve to prevent double spending of same state, we dont need to check\n    // storage value for it, this pass to bob. If nullifier already exist bob's proof will be \n    // rejected in the smart contract\n    \n    // Extract last bytes before truncation\n    let block_hash_last_byte = commit_1_verified_storage.block_hash[31] as Field;\n    let commit_hash_last_byte = commit_2_hash[31] as Field;\n    let last_bytes = (block_hash_last_byte * 256) + commit_hash_last_byte;\n\n    (   \n        receipt_amount_field,\n        block_number as Field, \n        address_to_field(contract_address),\n        field_from_bytes_32_trunc(commit_1_verified_storage.block_hash), \n        encrypted_final_balance, \n        field_from_bytes_32_trunc(commit_2_hash),\n        last_bytes  \n    )\n}\n\n\n\nfn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n\n// Define a larger key size that can accommodate the nibble conversion of a 32-byte key\nglobal LARGER_KEY_SIZE: u32 = 132; // 2 * 32 + 68 (extra space for prefix)\n\n// Derive a deterministic key from a signature\nfn derive_key_from_signature(signature: [u8; 65]) -> [Field; 4] {\n    let mut key = [0; 4];\n    for i in 0..4 {\n        let mut value: u64 = 0;\n        for j in 0..16 {\n            value = (value << 4) | (signature[i * 16 + j] as u64);\n        }\n        key[i] = value as Field;\n    }\n    key\n}\n\nfn decrypt_balance(\n    // Signature data\n    signature: [u8; 65],\n    \n    // Encrypted balance (field element)\n    encrypted_balance: Field,\n) -> pub Field {\n    // Derive key from signature (same as encryption)\n    let key = derive_key_from_signature(signature);\n    \n    // Create a fixed IV (same as encryption)\n    let iv = [0, 0, 0, 0];\n    \n    // Create encrypted fields array\n    let encrypted_fields = [encrypted_balance, 0, 0, 0, 0, 0, 0, 0];\n\n    \n    // Decrypt the fields\n    let decrypted_fields = dec::decrypt(encrypted_fields, key, iv);\n    \n    \n    // Return the first decrypted field element\n    decrypted_fields[0]\n}\n\n// Helper function to convert a single hex nibble to its ASCII character\nfn nibble_to_ascii(nibble: u8) -> u8 {\n    if nibble < 10 {\n        nibble + 48  // '0' to '9'\n    } else {\n        nibble + 87  // 'a' to 'f'\n    }\n}\n\n// Function to convert hex bytes to ASCII string representation\nfn hex_bytes_to_ascii(hex_bytes: [u8; 65]) -> [u8; 132] {\n    let mut result: [u8; 132] = [0; 132];\n    \n    // Add \"0x\" prefix\n    result[0] = 48;  // '0'\n    result[1] = 120; // 'x'\n    \n    // Convert each byte to two ASCII characters\n    for i in 0..65 {\n        let byte = hex_bytes[i];\n        let high_nibble = byte >> 4;\n        let low_nibble = byte & 0x0f;\n        \n        result[2 + i * 2] = nibble_to_ascii(high_nibble);\n        result[2 + i * 2 + 1] = nibble_to_ascii(low_nibble);\n    }\n    \n    result\n}\n\n// Function to convert bytes to a Field value\nfn bytes_to_field(bytes: [u8; 32]) -> Field {\n    let mut result: Field = 0;\n    \n    // Convert bytes to field\n    for i in 0..32 {\n        result = result * 256 + (bytes[i] as Field);\n    }\n    \n    result\n}\n\n// Function to convert Address (20 bytes) to Field\nfn address_to_field(address: Address) -> Field {\n    let mut result: Field = 0;\n    \n    // Convert bytes to field\n    for i in 0..20 {\n        result = result * 256 + (address[i] as Field);\n    }\n    \n    result\n}\n\n\n// Unconstrained function to convert u64 to ASCII bytes\nunconstrained fn u64_to_ascii_bytes(value: u64) -> [u8; 20] {\n    let mut result: [u8; 20] = [0; 20];\n    let mut temp = value;\n    let mut pos = 19;\n    \n    // Handle zero case\n    if value == 0 {\n        result[19] = 48; // '0'\n    } else {\n        // Convert each digit to ASCII\n        while temp > 0 {\n            let digit = (temp % 10) as u8;\n            result[pos] = digit + 48; // Convert to ASCII\n            temp = temp / 10;\n            if pos > 0 {\n                pos -= 1;\n            }\n        }\n    }\n    \n    // Shift all digits to the right\n    let mut shifted: [u8; 20] = [0; 20];\n    let mut count = 0;\n    for i in 0..20 {\n        if result[i] != 0 {\n            count += 1;\n        }\n    }\n    \n    for i in 0..count {\n        shifted[20 - count + i] = result[20 - count + i];\n    }\n    \n    shifted\n}\n\n// Function to hash a u64 value using Keccak256\nfn hash_u64(value: u64) -> [u8; 32] {\n    // Convert value to ASCII bytes using unconstrained function\n    let digits = unsafe { u64_to_ascii_bytes(value) };\n    \n    // Count non-zero digits\n    let mut digit_count = 0;\n    for i in 0..20 {\n        if digits[i] != 0 {\n            digit_count += 1;\n        }\n    }\n    \n    // Copy digits to message\n    let mut message: [u8; 64] = [0; 64];\n    for i in 0..20 {\n        if i < digit_count {\n            message[i] = digits[20 - digit_count + i];\n        }\n    }\n    \n    // Hash the digits\n    keccak256(message, digit_count)\n}\n\n// Function to safely convert storage value to field\nfn safe_storage_to_field(storage_value: [u8; 32]) -> Field {\n    // Convert bytes to field directly\n    // Noir's field type automatically handles overflow\n    bytes_to_field(storage_value)\n}\n\n#[test]\nfn test_hash_u64_values() {\n    // Test with 1\n    let hash_1 = hash_u64(1);\n    let expected_hash_1: [u8; 32] = [\n        0xc8, 0x9e, 0xfd, 0xaa, 0x54, 0xc0, 0xf2, 0x0c, 0x7a, 0xdf, 0x61, 0x28, 0x82, 0xdf, 0x09, 0x50,\n        0xf5, 0xa9, 0x51, 0x63, 0x7e, 0x03, 0x07, 0xcd, 0xcb, 0x4c, 0x67, 0x2f, 0x29, 0x8b, 0x8b, 0xc6\n    ];\n    assert(hash_1 == expected_hash_1);\n    \n    // Test with 10\n    let hash_10 = hash_u64(10);\n    let expected_hash_10: [u8; 32] = [\n        0x1a, 0x19, 0x2f, 0xab, 0xce, 0x13, 0x98, 0x8b, 0x84, 0x99, 0x4d, 0x42, 0x96, 0xe6, 0xcd, 0xc4,\n        0x18, 0xd5, 0x5e, 0x2f, 0x1d, 0x7f, 0x94, 0x21, 0x88, 0xd4, 0x04, 0x0b, 0x94, 0xfc, 0x57, 0xac\n    ];\n    assert(hash_10 == expected_hash_10);\n    \n    // Test with 100\n    let hash_100 = hash_u64(100);\n    let expected_hash_100: [u8; 32] = [\n        0x8c, 0x18, 0x21, 0x0d, 0xf0, 0xd9, 0x51, 0x4f, 0x2d, 0x2e, 0x5d, 0x8c, 0xa7, 0xc1, 0x00, 0x97,\n        0x82, 0x19, 0xee, 0x80, 0xd3, 0x96, 0x8a, 0xd8, 0x50, 0xab, 0x5e, 0xad, 0x20, 0x82, 0x87, 0xb3\n    ];\n    assert(hash_100 == expected_hash_100);\n    \n    // Print the hashes for verification\n    println(\"Hash of 1:\");\n    println(hash_1);\n    println(\"Hash of 10:\");\n    println(hash_10);\n    println(\"Hash of 100:\");\n    println(hash_100);\n}\n\n#[test]\nfn test_init() {\n    // Chain ID for Sepolia testnet\n    let chain_id = 11155111;\n    \n    // Block number\n    let block_number =   8275916;\n    \n    // Message nonces\n    let message_nonce_1 = 1;\n    let message_nonce_2 = 2;\n    \n    // contract_address to check - using the correct type\n    let contract_address: Address = [0x58, 0x2B, 0xEE, 0x8f, 0x43, 0xBF, 0x20, 0x39, 0x64, 0xd3, 0x8c, 0x54, 0xFA, 0x03, 0xe6, 0x2d, 0x61, 0x61, 0x59, 0xfA];\n    \n    // Signatures (65 bytes)\n    let alice_signature_nonce_1: [u8; 65] = [\n        0x07, 0x2f, 0x3e, 0x1e, 0x23, 0xa2, 0x17, 0xbd, 0xc3, 0xc4, 0x1b, 0x4c, 0x61, 0x35, 0x2b, 0xcc,\n        0x78, 0xd8, 0x14, 0x0e, 0xb9, 0x81, 0x0b, 0xd3, 0xd3, 0x60, 0x37, 0xfb, 0x65, 0xc7, 0xaf, 0x40,\n        0x6d, 0x4c, 0x37, 0x72, 0xb0, 0xc4, 0xd4, 0xfb, 0x29, 0x8c, 0xec, 0x36, 0xd0, 0x9d, 0x64, 0x6f,\n        0xf6, 0xa2, 0x49, 0x71, 0x0e, 0x43, 0xcd, 0xf2, 0x85, 0x6e, 0x5d, 0x4e, 0xfd, 0xbf, 0x7b, 0xd3,\n        0x1c\n    ];\n    let alice_signature_nonce_2: [u8; 65] = [\n        0x47, 0x65, 0xf9, 0xcb, 0xeb, 0xb3, 0xff, 0x25, 0x24, 0x5f, 0xc8, 0xe3, 0x81, 0x8f, 0x36, 0xa2,\n        0xf4, 0xfa, 0x09, 0xf9, 0x89, 0xd3, 0x20, 0xcd, 0xef, 0xc4, 0x65, 0xb2, 0x95, 0xd6, 0xa0, 0xaf,\n        0x37, 0x73, 0x11, 0x57, 0x5a, 0xc4, 0x51, 0x99, 0xd9, 0xab, 0x0a, 0x9f, 0x58, 0x54, 0x3f, 0x12,\n        0xf2, 0x5e, 0x33, 0xdc, 0xc4, 0xc7, 0xe7, 0xf0, 0x93, 0x19, 0x88, 0x68, 0x20, 0x88, 0xb6, 0xe7,\n        0x1c\n    ];\n\n    // Public key coordinates\n    let pub_x_1: [u8; 32] = [\n        0xca, 0xb1, 0x4a, 0x0b, 0xb5, 0x57, 0xdf, 0xe9, 0x0a, 0x26, 0x8d, 0xcd, 0x04, 0xf1, 0x7e, 0x2e,\n        0xa8, 0xd8, 0xcc, 0xd5, 0x57, 0x71, 0xaa, 0x18, 0xec, 0x72, 0x3a, 0xf2, 0xee, 0x45, 0x92, 0xe6\n    ];\n    let pub_y_1: [u8; 32] = [\n        0x75, 0xd4, 0x4b, 0xb8, 0xbc, 0x98, 0xdb, 0x93, 0x24, 0x0f, 0x48, 0x07, 0x7c, 0x63, 0xaa, 0x4b,\n        0x29, 0xd5, 0x9a, 0xa3, 0x35, 0xcf, 0xf4, 0xb2, 0xa0, 0x88, 0x23, 0x4f, 0x69, 0xc2, 0x2e, 0xba\n    ];\n\n    // Using same public key for both signatures\n    let pub_x_2: [u8; 32] = [\n        0x97, 0x0f, 0xaa, 0x1e, 0xf6, 0xfd, 0xfe, 0xdc, 0xc5, 0x21, 0x56, 0xe4, 0x88, 0x0d, 0x2a, 0x0d,\n        0xce, 0x57, 0xaf, 0xfa, 0xf1, 0x99, 0xe6, 0x60, 0x8e, 0x9b, 0x23, 0xc9, 0xf0, 0x85, 0xd2, 0xd1\n    ];\n    let pub_y_2: [u8; 32] = [\n        0x34, 0x2a, 0x1e, 0xa1, 0xd1, 0x84, 0x38, 0x92, 0x34, 0x7a, 0x8f, 0x9a, 0x0d, 0xcb, 0x09, 0x72,\n        0xfc, 0xd0, 0x3f, 0xe0, 0x17, 0xd2, 0x6c, 0xb2, 0xb4, 0xcd, 0xd4, 0x63, 0xbf, 0x7b, 0x9a, 0xf2\n    ];\n    \n    let receipt_amount = -100;\n    \n    let (receipt_amount, block_number, contract_address, block_hash, encrypted_balance, commit_2_hash, last_bytes) = main(\n        alice_signature_nonce_1, \n        alice_signature_nonce_2, \n        chain_id, \n        block_number,\n        message_nonce_1,\n        pub_x_1,\n        pub_y_1,\n        pub_x_2,\n        pub_y_2,\n        contract_address, \n        receipt_amount\n    );\n    println(\"---- CIRCUIT OUTPUT ----\");\n    println(\"receipt_amount\");\n    println(receipt_amount);\n    println(\"block_number\");\n    println(block_number);\n    println(\"contract_address\");\n    println(contract_address);\n    println(\"block_hash\");\n    println(block_hash);\n    println(\"encrypted_balance\");\n    println(encrypted_balance);\n    println(\"commit_2_hash\");\n    println(commit_2_hash);\n    println(\"last_bytes\");\n    println(last_bytes);\n    println(\"---- END OF CIRCUIT OUTPUT ----\");\n}\n\n#[test]\nfn test_storage_key_generation() {\n    // Given hash\n    let hash: [u8; 32] = [\n        0x48, 0xfc, 0x0d, 0xf3, 0x39, 0x48, 0xd2, 0x89, 0x57, 0xd5, 0xf6, 0x2e, 0xe1, 0x76, 0x43, 0xb0,\n        0x31, 0x1d, 0x4d, 0xda, 0x43, 0xf2, 0xcf, 0x74, 0x78, 0x39, 0x70, 0x3c, 0x52, 0xf3, 0x80, 0x98\n    ];\n    \n    // Create a buffer for the concatenated key and slot\n    let mut key_and_slot: [u8; 64] = [0; 64];\n    \n    // Copy the hash into the buffer\n    for i in 0..32 {\n        key_and_slot[i] = hash[i];\n    }\n    \n    // Add the slot number at the end (padded with zeros)\n    key_and_slot[63] = 2;  // slot 2\n    \n    // Hash the concatenated key and slot to get the storage key\n    let storage_key = keccak256(key_and_slot, 64);\n    \n    println(\"Original hash:\");\n    println(hash);\n    println(\"Generated storage key:\");\n    println(storage_key);\n}\n\n#[test]\nfn test_hex_literal_hashing() {\n    // The actual hex values as bytes\n    let hex_bytes = [\n        0x47, 0x65, 0xf9, 0xcb, 0xeb, 0xb3, 0xff, 0x25, 0x24, 0x5f, 0xc8, 0xe3, 0x81, 0x8f, 0x36, 0xa2,\n        0xf4, 0xfa, 0x09, 0xf9, 0x89, 0xd3, 0x20, 0xcd, 0xef, 0xc4, 0x65, 0xb2, 0x95, 0xd6, 0xa0, 0xaf,\n        0x37, 0x73, 0x11, 0x57, 0x5a, 0xc4, 0x51, 0x99, 0xd9, 0xab, 0x0a, 0x9f, 0x58, 0x54, 0x3f, 0x12,\n        0xf2, 0x5e, 0x33, 0xdc, 0xc4, 0xc7, 0xe7, 0xf0, 0x93, 0x19, 0x88, 0x68, 0x20, 0x88, 0xb6, 0xe7,\n        0x1c\n    ];\n\n    // Convert hex bytes to ASCII string representation\n    let hex_string_bytes = hex_bytes_to_ascii(hex_bytes);\n\n    println(\"Hash from ASCII string bytes (including '0x' prefix):\");\n    println(keccak256(hex_string_bytes, 132));\n\n    println(\"Hash from actual hex bytes:\");\n    println(keccak256(hex_bytes, 65));\n} \n\n#[test]\nfn test_encryption() {\n    let alice_signature_nonce_1: [u8; 65] = [\n        0x07, 0x2f, 0x3e, 0x1e, 0x23, 0xa2, 0x17, 0xbd, 0xc3, 0xc4, 0x1b, 0x4c, 0x61, 0x35, 0x2b, 0xcc,\n        0x78, 0xd8, 0x14, 0x0e, 0xb9, 0x81, 0x0b, 0xd3, 0xd3, 0x60, 0x37, 0xfb, 0x65, 0xc7, 0xaf, 0x40,\n        0x6d, 0x4c, 0x37, 0x72, 0xb0, 0xc4, 0xd4, 0xfb, 0x29, 0x8c, 0xec, 0x36, 0xd0, 0x9d, 0x64, 0x6f,\n        0xf6, 0xa2, 0x49, 0x71, 0x0e, 0x43, 0xcd, 0xf2, 0x85, 0x6e, 0x5d, 0x4e, 0xfd, 0xbf, 0x7b, 0x23,\n        0x1c\n    ];\n\n    // Derive key from signature\n    let key = derive_key_from_signature(alice_signature_nonce_1);\n    println(\"Derived key:\");\n    println(key);\n\n    // Create a nonce and IV\n    let nonce = 11561; // Example nonce, can be generated dynamically\n    let iv = [nonce, 432, 324, 14]; // Example IV construction\n\n    // Create fields array with a dynamic receipt amount\n    let receipt_amount = 100; // Example receipt amount\n    let fields = [receipt_amount as Field, 0, 0, 0, 0, 0, 0, 0];\n    println(\"Fields before encryption:\");\n    println(fields);\n\n    // Encrypt the fields\n    let encrypted_fields = enc::encrypt(fields, key, iv);\n    println(\"Encrypted field [0]\");\n    println(encrypted_fields[0]);\n\n    // Mock an encrypted field for decryption\n    let mock_encrypt_field: Field = 0x2b82640da1997b95668f4e3718b5be7dc34dbd77f217a367f53aec0256ad151;\n\n    // Wrap the mock encrypted field in an array\n    let encrypted_array: [Field; 1] = [mock_encrypt_field];\n\n    // Decrypt the first encrypted field\n    let decrypted_fields = dec::decrypt(encrypted_fields, key, iv);\n    let decrypted_value = decrypted_fields[0]; // Assuming the first field is the one we want\n    println(\"Decrypted value:\");\n    println(decrypted_value);\n\n    // Assert that the decrypted value matches the original\n    assert(decrypted_value == (receipt_amount as Field));\n} ","path":"/home/drone/projects/rione/circuits/main/gazometer_p2p/alice_receipt/src/main.nr"},"63":{"source":"use crate::account::{MAX_ACCOUNT_DEPTH_NO_LEAF_M, MAX_ACCOUNT_LEAF_LEN, MAX_ACCOUNT_STATE_LEN};\nuse crate::header::{BlockHeaderPartial, get_header};\nuse crate::merkle_patricia_proofs::proof::ProofInput;\nuse crate::misc::{\n    bytes::right_pad,\n    fragment::Fragment,\n    types::{Address, Bytes32, BYTES32_LENGTH, HASH_LEN},\n};\nuse crate::rlp::decode::decode_string;\nuse crate::serde::Serde;\nuse crate::verifiers::account::verify_account;\nuse crate::verifiers::storage::{verify_storage_values, verify_storage_values_against_block};\n\nuse dep::std::hash::keccak256;\n\nglobal MAX_KEY_LEN: u32 = 32;\nglobal MAX_PREFIXED_KEY_NIBBLE_LEN: u32 = 66; // (MAX_KEY_LEN + 1) * 2\nglobal MAX_STORAGE_DEPTH_NO_LEAF_M: u32 = 6; // Emperically correct values to be determined after we scan ethereum state trie.\n\nglobal MAX_STORAGE_VALUE_LEN: u32 = 32; // Values taken from storageProofConfig in storage.ts.\nglobal MAX_STORAGE_LEAF_LEN: u32 = 69;\n\npub struct Account {\n    pub nonce: u64,\n    pub balance: Field,\n    pub storage_root: Bytes32,\n    pub code_hash: Bytes32,\n}\n\nimpl Eq for Account {\n    fn eq(self, other: Self) -> bool {\n        (self.nonce == other.nonce)\n            & (self.balance == other.balance)\n            & (self.storage_root == other.storage_root)\n            & (self.code_hash == other.code_hash)\n    }\n}\n\n// For now oracle does not support returning array of arrays so at the moment we support only one storage proof.\n// When https://github.com/noir-lang/noir/issues/4498 is resolved we can change to `StateAndStorageProof<N>` and `storage_proof: [StorageProof; N]`.\nstruct StateAndStorageProofInput {\n    account: Account,\n    state_proof_input: ProofInput<MAX_PREFIXED_KEY_NIBBLE_LEN, MAX_ACCOUNT_STATE_LEN, MAX_ACCOUNT_DEPTH_NO_LEAF_M, MAX_ACCOUNT_LEAF_LEN>,\n    storage_proof_input: ProofInput<MAX_PREFIXED_KEY_NIBBLE_LEN, MAX_STORAGE_VALUE_LEN, MAX_STORAGE_DEPTH_NO_LEAF_M, MAX_STORAGE_LEAF_LEN>,\n}\n\npub struct StorageWithinBlock<let N: u32> {\n    pub block_hash: Bytes32,\n    pub account: Account,\n    pub values: [Bytes32; N],\n}\n\ntype ProofInputSerialized<let LEN: u32> = [Field; LEN];\n\nimpl Eq for StorageWithinBlock<1> {\n    fn eq(self, other: Self) -> bool {\n        (self.block_hash == other.block_hash)\n            & (self.account == other.account)\n            & (self.values[0] == other.values[0])\n    }\n}\n\nfn assert_storage_key_equals(\n    storage_key: Bytes32,\n    storage_key_hash: [u8; MAX_PREFIXED_KEY_NIBBLE_LEN],\n) {\n    let storage_key_hash_fragment = Fragment::new(\n        MAX_PREFIXED_KEY_NIBBLE_LEN - HASH_LEN,\n        HASH_LEN,\n        storage_key_hash,\n    );\n    let other_storage_key_hash_fragment =\n        Fragment::from_array(keccak256(storage_key, BYTES32_LENGTH as u32));\n    assert(\n        storage_key_hash_fragment.eq(other_storage_key_hash_fragment),\n        \"Storage key does not match the argument\",\n    );\n}\n\nfn get_fragment<let N: u32>(left_padded_value: [u8; N]) -> Fragment<N, u8> {\n    let value_len = right_pad(left_padded_value).len();\n    let value_offset = N - value_len;\n    Fragment::new(value_offset, value_len, left_padded_value)\n}\n\nfn get_storage_value(\n    rlp_encoded_value: [u8; MAX_STORAGE_VALUE_LEN],\n) -> [u8; MAX_STORAGE_VALUE_LEN] {\n    let mut storage_value = get_fragment(rlp_encoded_value);\n    let rlp_fragment = decode_string(storage_value);\n    let rlp_header_len = rlp_fragment.offset;\n\n    // Storage value is maximum 32 bytes long, so its RLP-encoding's header is maximum 1 byte long.\n    assert(rlp_header_len <= 1, \"Expected RLP header to be maximum 1 byte long\");\n    if rlp_fragment.offset == 1 {\n        let rlp_header_position = storage_value.offset;\n        storage_value.data[rlp_header_position] = 0;\n    }\n\n    storage_value.data\n}\n\nunconstrained pub fn get_account_with_storage(\n    chain_id: Field,\n    block_number: u64,\n    address: Address,\n    storage_key: Bytes32,\n) -> StorageWithinBlock<1> {\n    let BlockHeaderPartial { number, hash, state_root, transactions_root: _, receipts_root: _ } =\n        unsafe { get_header(chain_id, block_number) };\n    \n    // Explicitly verify that the header is for the requested block number\n    assert(number == block_number, \"Header block number does not match requested block number\");\n    let StateAndStorageProofInput { account, state_proof_input, storage_proof_input } =\n        unsafe { get_proof_unconstrained(chain_id, block_number, address, storage_key) };\n    \n    verify_account(address, account, state_proof_input, state_root);\n\n    // Use the more robust verification against block\n \n    verify_storage_values_against_block(\n        chain_id,\n        block_number,\n        [storage_proof_input],\n        account.storage_root\n    );\n    \n    //assert_storage_key_equals(storage_key, storage_proof_input.key);\n  \n    StorageWithinBlock {\n        block_hash: hash,\n        account,\n        values: [get_storage_value(storage_proof_input.value)],\n    }\n}\n\npub fn verify_storage_proof_at_block_number(\n    chain_id: Field,\n    block_number: u64,\n    address: Address,\n    storage_key: Bytes32,\n    expected_value: Bytes32\n) -> bool {\n    // Get the block header to verify block number\n    let BlockHeaderPartial { number, hash, state_root, transactions_root: _, receipts_root: _ } =\n        unsafe { get_header(chain_id, block_number) };\n    \n    // Explicitly verify that the header is for the requested block number\n    assert(number == block_number, \"Header block number does not match requested block number\");\n \n    // Get the proof data from the oracle\n    let StateAndStorageProofInput { account, state_proof_input, storage_proof_input } =\n        unsafe { get_proof_unconstrained(chain_id, block_number, address, storage_key) };\n    \n    // Verify the account against the state root from the block header\n    verify_account(address, account, state_proof_input, state_root);\n    // Verify the storage proof against the account's storage root\n    verify_storage_values_against_block(\n        chain_id,\n        block_number,\n        [storage_proof_input],\n        account.storage_root\n    );\n\n    // Verify the storage key matches what was requested\n    assert_storage_key_equals(storage_key, storage_proof_input.key);\n    \n    // Decode the RLP-encoded value from the proof\n    let actual_value = get_storage_value(storage_proof_input.value);\n    \n    // Check if the value matches the expected value\n    actual_value == expected_value\n}\n\n#[oracle(get_proof)]\nunconstrained fn get_proof_oracle<let STATE_PROOF_INPUT_LEN: u32, let STORAGE_PROOF_INPUT: u32>(\n    _chain_id: Field,\n    _block_no: u64,\n    _address: Address,\n    _storage_key: Bytes32,\n    ) -> (Account, ProofInputSerialized<STATE_PROOF_INPUT_LEN>, ProofInputSerialized<STORAGE_PROOF_INPUT>) {}\n\nunconstrained fn get_proof_unconstrained(\n    chain_id: Field,\n    block_no: u64,\n    address: Address,\n    storage_key: Bytes32,\n) -> StateAndStorageProofInput {\n    let (account, state_proof_input, storage_proof_input) =\n        unsafe { get_proof_oracle(chain_id, block_no, address, storage_key) };\n    \n    let state_proof_input = unsafe { Serde::deserialize(state_proof_input) };\n    \n    let storage_proof_input = unsafe { Serde::deserialize(storage_proof_input) };\n    StateAndStorageProofInput { account, state_proof_input, storage_proof_input }\n}","path":"/home/drone/projects/rione/circuits/ethereum/circuits/lib/src/account_with_storage.nr"},"69":{"source":"use crate::misc::types::Bytes32;\nuse crate::verifiers::header::verify_header;\nuse crate::misc::{fragment::Fragment, types::{BYTES32_LENGTH, ADDRESS_LENGTH, Address}};\nuse crate::uint256::U256;\nuse crate::merkle_patricia_proofs::proof::{ProofInput, Proof, Node, Leaf, MAX_NODE_LEN};\nuse crate::rlp::types::RlpFragment;\nuse dep::std::mem::zeroed;\n\nglobal MAX_HEADER_RLP_LEN: u32 = 708;\n\npub struct BlockHeaderPartial {\n    pub number: u64,\n    pub hash: Bytes32,\n    pub state_root: Bytes32,\n    pub transactions_root: Bytes32,\n    pub receipts_root: Bytes32,\n}\n\npub type BlockHeaderRlp = BoundedVec<u8, MAX_HEADER_RLP_LEN>;\n\npub fn get_header(chain_id: Field, block_number: u64) -> BlockHeaderPartial {\n    let (block_header_partial, block_header_rlp) = unsafe { get_header_unconstrained(chain_id, block_number) };\n    verify_header(chain_id, block_header_partial, block_header_rlp);\n    assert(block_header_partial.number == block_number, \"Block number does not match the argument\");\n    block_header_partial\n}\n\n#[oracle(get_header)]\nunconstrained fn get_header_oracle(_chain_id: Field, _block_no: u64) -> (BlockHeaderPartial, BlockHeaderRlp) {}\n\nunconstrained fn get_header_unconstrained(chain_id: Field, block_no: u64) -> (BlockHeaderPartial, BlockHeaderRlp) {\n    unsafe { get_header_oracle(chain_id, block_no) }\n}\n\nfn alter_array(bytes: [Field; 32]) -> [u8; 32] {\n    let mut result: [u8; 32] = zeroed();\n    for i in 0..32 {\n        result[i] = bytes[i] as u8;\n    }\n    result\n}\n","path":"/home/drone/projects/rione/circuits/ethereum/circuits/lib/src/header.nr"},"72":{"source":"use crate::rlp::types::RlpList;\nuse crate::rlp::decode::{decode_to_rlp_header, decode_list_of_small_strings, decode_list};\nuse crate::misc::{\n    fragment::Fragment, arrays::{sub_array_equals_up_to_length, memcpy_up_to_length},\n    types::{Hash, HASH_LEN}, bytes::{bytes_to_nibbles, byte_to_nibbles, right_pad}\n};\nuse dep::std::hash::keccak256;\n\nglobal MAX_NODE_LEN: u32 = 532;\nglobal MAX_NODE_FIELDS: u32 = 17;\nglobal BRANCH_NODE_NUM_FIELDS: u32 = 17;\nglobal EXTENSION_NODE_NUM_FIELDS: u32 = 2;\nglobal EVEN: u32 = 0;\nglobal ODD: u32 = 1;\n\npub type Node = [u8; MAX_NODE_LEN];\npub type Leaf<let MAX_LEAF_LEN: u32> = [u8; MAX_LEAF_LEN];\npub type Key<let MAX_PREFIXED_KEY_NIBBLE_LEN: u32> = [u8; MAX_PREFIXED_KEY_NIBBLE_LEN];\npub type Value<let MAX_VALUE_LEN: u32> = [u8; MAX_VALUE_LEN];\n\npub struct Proof<let MAX_DEPTH_NO_LEAF: u32, let MAX_LEAF_LEN: u32> {\n\tpub nodes: [Node; MAX_DEPTH_NO_LEAF],\n    // Leaf has a different max length than internal node as it contains the value of arbitrary length.\n\tpub leaf: Leaf<MAX_LEAF_LEN>,\n\tpub depth: u64\n}\n\npub struct ProofInput<let MAX_PREFIXED_KEY_NIBBLE_LEN: u32, let MAX_VALUE_LEN: u32, let MAX_DEPTH_NO_LEAF: u32, let MAX_LEAF_LEN: u32> {\n    pub key: Key<MAX_PREFIXED_KEY_NIBBLE_LEN>,\n    pub value: Value<MAX_VALUE_LEN>,\n    pub proof: Proof<MAX_DEPTH_NO_LEAF, MAX_LEAF_LEN>\n}\n\nimpl<let MAX_DEPTH_NO_LEAF: u32, let MAX_LEAF_LEN: u32> Eq for Proof<MAX_DEPTH_NO_LEAF, MAX_LEAF_LEN> {\n    fn eq(self, other: Self) -> bool {\n        (self.depth == other.depth) & (self.nodes == other.nodes) & (self.leaf == other.leaf)\n    }\n}\n\nimpl<let MAX_PREFIXED_KEY_NIBBLE_LEN: u32, let MAX_VALUE_LEN: u32, let MAX_DEPTH_NO_LEAF: u32, let MAX_LEAF_LEN: u32> Eq for ProofInput<MAX_PREFIXED_KEY_NIBBLE_LEN, MAX_VALUE_LEN, MAX_DEPTH_NO_LEAF, MAX_LEAF_LEN> {\n    fn eq(self, other: Self) -> bool {\n        (self.key == other.key) & (self.value == other.value) & (self.proof == other.proof)\n    }\n}\n\npub fn get_node_len<let MAX_LEN: u32>(node: [u8; MAX_LEN]) -> u32 {\n    let node_rlp_header = decode_to_rlp_header(Fragment::from_array(node));\n    let node_unpadded_len = node_rlp_header.offset + node_rlp_header.length;\n    assert(node_unpadded_len <= MAX_LEN, \"Node RLP length exceeds MAX_LEN\");\n\n    node_unpadded_len\n}\n\n// Prefixes mean:\n// 0 - Extension node, even number of nibbles\n// 1 - Extension node, odd number of nibbles\n// 2 - Leaf node, even number of nibbles\n// 3 - Leaf node, odd number of nibbles\npub fn parity(prefix: u8) -> u32 {\n    assert(prefix < 4, \"Prefix must be 0, 1, 2 or 3\");\n    (prefix % 2) as u32\n}\n\n// Leaf and extension nodes are RLP lists with 2 elements: prefixed key nibbles (in bytes) and value.\n// This function removes the prefix and returns appropriate number of key nibbles according to the parity of the prefix (see function: parity).\npub fn strip_prefix<let MAX_PREFIXED_KEY_NIBBLE_LEN: u32>(prefixed_key_bytes: Fragment<MAX_PREFIXED_KEY_NIBBLE_LEN, u8>) -> Fragment<MAX_PREFIXED_KEY_NIBBLE_LEN, u8> {\n    let mut prefixed_key_nibbles = bytes_to_nibbles(prefixed_key_bytes);\n\n    let prefix = prefixed_key_nibbles.pop_front();\n    let parity = parity(prefix);\n    if (parity == EVEN) {\n        assert(prefixed_key_nibbles.pop_front() == 0, \"Expected a zero after a prefix of even parity\");\n    }\n\n    prefixed_key_nibbles\n}\n\npub fn extract_hash_from_branch_node<let MAX_PREFIXED_KEY_NIBBLE_LEN: u32>(\n    node: Node,\n    node_rlp_list: RlpList<MAX_NODE_FIELDS>,\n    key_nibbles: Fragment<MAX_PREFIXED_KEY_NIBBLE_LEN, u8>,\n    key_ptr: &mut u32\n) -> Fragment<HASH_LEN, u8> {\n    let curr_nibble = key_nibbles.at(*key_ptr) as u32;\n    assert(\n        node_rlp_list.get(curr_nibble).length == HASH_LEN, \"Expected a hash at position given by the key nibble\"\n    );\n    *key_ptr += 1;\n\n    Fragment::new(node_rlp_list.get(curr_nibble).offset, HASH_LEN, node).focus()\n}\n\npub fn extract_hash_from_extension_node<let MAX_PREFIXED_KEY_NIBBLE_LEN: u32>(\n    node: Node,\n    node_rlp_list: RlpList<MAX_NODE_FIELDS>,\n    key_nibbles: Fragment<MAX_PREFIXED_KEY_NIBBLE_LEN, u8>,\n    key_ptr: &mut u32\n) -> Fragment<HASH_LEN, u8> {\n    let prefixed_extension_key_part: Fragment<MAX_PREFIXED_KEY_NIBBLE_LEN, u8> = Fragment::new(node_rlp_list.get(0).offset, node_rlp_list.get(0).length, node).focus();\n\n    let (prefix, _) = byte_to_nibbles(prefixed_extension_key_part.at(0));\n    assert((prefix == 0) | (prefix == 1), \"Extension parity prefix must be 0 or 1\");\n    let extension_key_part = strip_prefix(prefixed_extension_key_part); // Extension nodes have a prefix that needs to be removed.\n    let curr_key_nibbles_part = key_nibbles.subfragment(*key_ptr, extension_key_part.length);\n    assert(\n        extension_key_part == curr_key_nibbles_part, \"Extension key part does not correspond to given key nibbles\"\n    );\n    assert(node_rlp_list.get(1).length == HASH_LEN, \"Expected a hash at the end of the extension node\");\n    *key_ptr += extension_key_part.length;\n\n    Fragment::new(node_rlp_list.get(1).offset, HASH_LEN, node).focus()\n}\n\npub fn extract_hash<let MAX_PREFIXED_KEY_NIBBLE_LEN: u32>(\n    node: Node,\n    key_nibbles: Fragment<MAX_PREFIXED_KEY_NIBBLE_LEN, u8>,\n    key_ptr: &mut u32\n) -> Fragment<HASH_LEN, u8> {\n    let mut hash = Fragment::from_array([0; HASH_LEN]);\n    let node_rlp_list: RlpList<MAX_NODE_FIELDS> = decode_list_of_small_strings(Fragment::from_array(node));\n\n    if (node_rlp_list.len == BRANCH_NODE_NUM_FIELDS) {\n        hash = extract_hash_from_branch_node(node, node_rlp_list, key_nibbles, key_ptr);\n    } else if (node_rlp_list.len == EXTENSION_NODE_NUM_FIELDS) {\n        hash = extract_hash_from_extension_node(node, node_rlp_list, key_nibbles, key_ptr);\n    } else {\n        assert(false, \"Invalid node type\");\n    }\n\n    hash\n}\n\npub fn verify_node_hash<let MAX_LEN: u32>(node: [u8; MAX_LEN], hash: [u8; HASH_LEN]) {\n    assert(keccak256(node, get_node_len(node) as u32) == hash, \"Invalid node hash\");\n}\n\npub fn verify_leaf<let MAX_LEAF_LEN: u32, let MAX_PREFIXED_KEY_NIBBLE_LEN: u32, let MAX_VALUE_LEN: u32>(\n    leaf: Leaf<MAX_LEAF_LEN>,\n    key_nibbles: Fragment<MAX_PREFIXED_KEY_NIBBLE_LEN, u8>,\n    key_ptr: &mut u32,\n    value: Value<MAX_VALUE_LEN>\n) {\n    let leaf_rlp_list: RlpList<2> = decode_list(Fragment::from_array(leaf));\n    assert(leaf_rlp_list.len == 2, \"Leaf expected to have 2 fields\");\n\n    let prefixed_leaf_key_part: Fragment<MAX_PREFIXED_KEY_NIBBLE_LEN, u8> = Fragment::new(leaf_rlp_list.get(0).offset, leaf_rlp_list.get(0).length, leaf).focus();\n\n    let (prefix, _) = byte_to_nibbles(prefixed_leaf_key_part.at(0));\n    assert((prefix == 2) | (prefix == 3), \"Leaf parity prefix must be 2 or 3\");\n    let leaf_key_part = strip_prefix(prefixed_leaf_key_part);\n    let left_key_ending = key_nibbles.subfragment(*key_ptr, leaf_key_part.length);\n    assert(leaf_key_part == left_key_ending, \"Key mismatch in the leaf\");\n    *key_ptr += leaf_key_part.length;\n    assert(*key_ptr == key_nibbles.length, \"Expected to consume all key nibbles\");\n\n    let value = right_pad(value);\n    let value_rlp_fragment = leaf_rlp_list.get(1);\n    // Verify that extracted value matches the expected value.\n    assert(value_rlp_fragment.length == value.len, \"Value length mismatch\");\n    assert(\n        sub_array_equals_up_to_length(\n            value.storage,\n            leaf,\n            value_rlp_fragment.offset,\n            value_rlp_fragment.length\n        ), \"Value mismatch\"\n    );\n}\n\npub fn verify_merkle_proof<let MAX_PREFIXED_KEY_NIBBLE_LEN: u32, let MAX_VALUE_LEN: u32, let MAX_DEPTH: u32, let MAX_LEAF_LEN: u32>(\n    key: Key<MAX_PREFIXED_KEY_NIBBLE_LEN>,\n    value: Value<MAX_VALUE_LEN>,\n    root: Hash,\n    proof: Proof<MAX_DEPTH, MAX_LEAF_LEN>\n) {\n    let key = right_pad(key);\n    let key_nibbles = bytes_to_nibbles(Fragment::from_vec(key));\n    let mut key_ptr = 0;\n\n    // Verify hashes of all the nodes in the proof path.\n    let mut curr_hash = Fragment::from_array(root);\n    for i in 0..MAX_DEPTH {    \n        // Handle the case where proof.depth is 0 by using a conditional\n        // that avoids subtraction when depth is 0\n        let should_process = (proof.depth > 0) & (i as u64 + 1 < proof.depth);\n        if should_process {\n            verify_node_hash(proof.nodes[i], curr_hash.data);\n            curr_hash = extract_hash(proof.nodes[i], key_nibbles, &mut key_ptr);\n        }\n    }\n    \n    // Only verify the leaf if proof.depth is greater than 0\n    if proof.depth > 0 {\n        verify_node_hash(proof.leaf, curr_hash.data);\n        verify_leaf(proof.leaf, key_nibbles, &mut key_ptr, value);\n    }\n}\n","path":"/home/drone/projects/rione/circuits/ethereum/circuits/lib/src/merkle_patricia_proofs/proof.nr"},"74":{"source":"use dep::std::{mem::zeroed, wrapping_add};\nuse crate::misc::fragment::Fragment;\n\npub fn alter_array<let ARRAY_LEN: u32>(array: [u8; ARRAY_LEN]) -> [u8; ARRAY_LEN] {\n    let mut copy = array.map(|x| x);\n    copy[0] = wrapping_add(copy[0], 1);\n    copy\n}\n\npub fn alter_fragment<let MAX_LEN: u32>(fragment: Fragment<MAX_LEN, u8>) -> Fragment<MAX_LEN, u8> {\n    let mut copy = fragment;\n    copy.set(0, wrapping_add(copy.at(0), 1));\n    copy\n}\n\npub fn field_to_u8_array<let ARRAY_LEN: u32>(array: [Field; ARRAY_LEN]) -> [u8; ARRAY_LEN] {\n    let mut result: [u8; ARRAY_LEN] = zeroed();\n    for i in 0..ARRAY_LEN {\n        result[i] = array[i] as u8;\n    }\n    result\n}\n\npub fn u8_to_field_array<let ARRAY_LEN: u32>(array: [u8; ARRAY_LEN]) -> [Field; ARRAY_LEN] {\n    let mut result: [Field; ARRAY_LEN] = zeroed();\n    for i in 0..ARRAY_LEN {\n        result[i] = array[i] as Field;\n    }\n    result\n}\n\npub fn resize<TItem, let NEW_LEN: u32, let OLD_LEN: u32>(src: [TItem; OLD_LEN]) -> [TItem; NEW_LEN] {\n    assert(NEW_LEN >= OLD_LEN, \"New length must be greater than or equal to old length\");\n    let mut dest = [zeroed(); NEW_LEN];\n    for i in 0..OLD_LEN {\n        dest[i] = src[i];\n    }\n    dest\n}\n\npub(crate) fn memcpy_up_to_length<TItem, let SRC_LEN: u32, let DEST_LEN: u32>(dest: &mut [TItem; DEST_LEN], src: [TItem; SRC_LEN], offset: u32, length: u32) {\n    assert(length <= DEST_LEN, \"Destination index out of bound\");\n    assert(offset + length <= SRC_LEN, \"Source index out of bound\");\n    for i in 0..DEST_LEN {\n        if i < length {\n            (*dest)[i] = src[offset + i];\n        }\n    }\n}\n\n// Fills destination array with content of source array starting from the offset in source array.\npub(crate) fn memcpy<TItem, let SRC_LEN: u32, let DEST_LEN: u32>(dest: &mut [TItem; DEST_LEN], src: [TItem; SRC_LEN], offset: u32) {\n    memcpy_up_to_length(dest, src, offset, DEST_LEN);\n}\n\npub fn subarray_inferred_len<TItem, let SRC_LEN: u32, let DEST_LEN: u32>(src: [TItem; SRC_LEN], offset: u32) -> [TItem; DEST_LEN] {\n    let mut dest = [zeroed(); DEST_LEN];\n    memcpy(&mut dest, src, offset);\n    dest\n}\n\npub fn sub_array_equals_up_to_length<TItem, let SUBARRAY_LEN: u32, let ARRAY_LEN: u32>(\n    subarray: [TItem; SUBARRAY_LEN],\n    array: [TItem; ARRAY_LEN],\n    offset: u32,\n    length: u32\n) -> bool where TItem: Eq {\n    assert(length <= SUBARRAY_LEN, \"Subarray index out of bound\");\n    assert(offset + length <= ARRAY_LEN, \"Array index out of bound\");\n    let mut result = true;\n    for i in 0..SUBARRAY_LEN {\n        if i < length {\n            result &= subarray[i] == array[offset + i];\n        }\n    }\n    result\n}\n\npub fn sub_array_equals<TItem, let SUBARRAY_LEN: u32, let ARRAY_LEN: u32>(\n    subarray: [TItem; SUBARRAY_LEN],\n    array: [TItem; ARRAY_LEN],\n    offset: u32\n) -> bool where TItem: Eq {\n    assert(offset + SUBARRAY_LEN <= ARRAY_LEN, \"Array index out of bound\");\n    let mut result = true;\n    for i in 0..SUBARRAY_LEN {\n        result &= subarray[i] == array[offset + i];\n    }\n    result\n}\n","path":"/home/drone/projects/rione/circuits/ethereum/circuits/lib/src/misc/arrays.nr"},"78":{"source":"use crate::misc::fragment::Fragment;\n\npub fn byte_to_nibbles(byte: u8) -> (u8, u8) {\n    let upper = byte / 16;\n    let lower = byte - 16 * upper;\n\n    (upper, lower)\n}\n\npub fn bytes_to_nibbles<let MAX_NIBBLE_LEN: u32>(bytes: Fragment<MAX_NIBBLE_LEN, u8>) -> Fragment<MAX_NIBBLE_LEN, u8> {\n    assert(\n        MAX_NIBBLE_LEN >= 2 * bytes.length, \"Bytes implicit data length must be at least 2 times larger than bytes explicit length\"\n    );\n\n    let nibbles = &mut Fragment::new_with_length(2 * bytes.length, [0; MAX_NIBBLE_LEN]);\n    bytes.each(\n        |byte, i| {\n        let (hi, lo) = byte_to_nibbles(byte);\n\n        nibbles.set(2 * i, hi);\n        nibbles.set(2 * i + 1, lo);\n    }\n    );\n\n    *nibbles\n}\n\npub fn nibbles_to_byte(upper: u8, lower: u8) -> u8 {\n    assert(upper < 16, \"Nibble value must be less than 16\");\n    assert(lower < 16, \"Nibble value must be less than 16\");\n\n    upper * 16 + lower\n}\n\npub fn nibbles_to_bytes<let BYTES_LEN: u32, let NIB_LEN: u32>(nibbles: [u8; NIB_LEN]) -> [u8; BYTES_LEN] {\n    assert(NIB_LEN == 2 * BYTES_LEN, \"Generic arguments don't match\");\n\n    let mut bytes = [0; BYTES_LEN];\n\n    for i in 0..NIB_LEN / 2 {\n        let byte = nibbles_to_byte(nibbles[2 * i], nibbles[2 * i + 1]);\n        bytes[i] = byte;\n    }\n\n    bytes\n}\n\npub fn right_pad<let N: u32>(arr: [u8; N]) -> BoundedVec<u8, N> {\n    byte_value(arr)\n}\n\npub fn left_to_right_padding<let N: u32>(nibbles: [u8; N]) -> ([u8; N], u32) {\n    let mut BoundedVec {storage: shifted, len} = right_pad(nibbles);\n    if (len % 2 == 1) {\n        shift_right_by_one(&mut shifted);\n        len += 1;\n    }\n\n    let shifted_by = N - len;\n    (shifted, shifted_by)\n}\n\npub fn shift_right_by_one<let N: u32>(arr: &mut [u8; N]) {\n    assert(arr[N - 1] == 0, \"Last element must be zero to shift the array right by one\");\n\n    let mut last = 0;\n    for i in 0..N {\n        let tmp = (*arr)[i];\n        (*arr)[i] = last;\n        last = tmp;\n    }\n}\n\npub(crate) fn left_byte_shift<let N: u32>(input: [u8; N], n: u32) -> [u8; N] {\n    let mut out = [0; N];\n\n    for i in 0..N {\n        let index_ind = (((i + n) as u32) < (N as u32)) as u32;\n        out[i] = (index_ind as u8) * input[index_ind * (i + n)];\n    }\n\n    out\n}\n\n// Converts big-endian byte array to a right-padded one.\npub(crate) fn byte_value<let N: u32>(in_value: [u8; N]) -> BoundedVec<u8, N> {\n    let mut value_length = 0;\n\n    for i in 0..N {\n        let num_bytes_ind = (value_length == 0) as u32;\n        let byte_ind = (in_value[i] != 0) as u32;\n        value_length = num_bytes_ind * byte_ind * (N - i) + (1 - num_bytes_ind) * value_length;\n    }\n\n    let value = left_byte_shift(in_value, N - value_length);\n\n    BoundedVec { storage: value, len: value_length }\n}\n\npub fn add_bigint<let N: u32>(left: [u8; N], right: [u8; N]) -> [u8; N] {\n    let mut carry: u32 = 0;\n    let mut result: [u8; N] = [0; N];\n\n    for j in 0..N {\n        let index = N - j - 1;\n        let sum = left[index] as u32 + right[index] as u32 + carry;\n        result[index] = sum as u8;\n        carry = sum >> 8;\n    }\n\n    assert(carry == 0, \"Addition overflow\");\n\n    result\n}\n","path":"/home/drone/projects/rione/circuits/ethereum/circuits/lib/src/misc/bytes.nr"},"82":{"source":"use crate::misc::{arrays::{memcpy_up_to_length, resize}, iterator::Iterator};\nuse dep::std::mem::zeroed;\n\npub struct Fragment<let MAX_DATA_LEN: u32, T> {\n    pub offset: u32,\n    pub length: u32,\n    pub data: [T; MAX_DATA_LEN]\n}\n\nimpl<let MAX_DATA_LEN: u32, T> Fragment<MAX_DATA_LEN, T> {\n    pub fn empty() -> Fragment<MAX_DATA_LEN, T> {\n        Fragment { offset: 0, length: 0, data: std::mem::zeroed() }\n    }\n\n    pub fn new(offset: u32, length: u32, data: [T; MAX_DATA_LEN]) -> Fragment<MAX_DATA_LEN, T> {\n        assert(offset + length <= data.len(), \"Fragment length exceeds data length\");\n\n        Fragment { offset, length, data }\n    }\n\n    pub fn new_with_length(length: u32, data: [T; MAX_DATA_LEN]) -> Fragment<MAX_DATA_LEN, T> {\n        assert(length <= data.len(), \"Fragment length exceeds data length\");\n\n        Fragment { offset: 0, length, data }\n    }\n\n    pub fn from_array(data: [T; MAX_DATA_LEN]) -> Fragment<MAX_DATA_LEN, T> {\n        Fragment { offset: 0, length: data.len(), data }\n    }\n\n    pub fn from_array_resize<let DATA_LEN: u32>(data: [T; DATA_LEN]) -> Fragment<MAX_DATA_LEN, T> {\n        Fragment { offset: 0, length: data.len(), data: resize(data) }\n    }\n\n    pub fn to_array<let NEW_MAX_LEN: u32>(self) -> [T; NEW_MAX_LEN] {\n        self.focus().data\n    }\n\n    pub fn to_bounded_vec<let N: u32>(self) -> BoundedVec<T, N> {\n        assert(self.length <= N, \"Fragment length exceeds BoundedVec max length\");\n        let bounded_vec: &mut BoundedVec<T, N> = &mut BoundedVec::new();\n        self.each(|x, _| bounded_vec.push(x));\n\n        *bounded_vec\n    }\n\n    pub fn from_vec(vec: BoundedVec<T, MAX_DATA_LEN>) -> Fragment<MAX_DATA_LEN, T> {\n        Fragment::new_with_length(vec.len, vec.storage)\n    }\n\n    pub fn focus<let NEW_MAX_LEN: u32>(self) -> Fragment<NEW_MAX_LEN, T> {\n        assert(NEW_MAX_LEN >= self.length, \"New max length is smaller than fragment length\");\n\n        let mut new_data: [T; NEW_MAX_LEN] = std::mem::zeroed();\n        memcpy_up_to_length(&mut new_data, self.data, self.offset, self.length);\n\n        Fragment { offset: 0, length: self.length, data: new_data }\n    }\n\n    pub fn subfragment(self, offset: u32, length: u32) -> Fragment<MAX_DATA_LEN, T> {\n        assert(offset + length <= self.length, \"Subfragment overflows fragment\");\n\n        Fragment { offset: self.offset + offset, length, data: self.data }\n    }\n\n    pub fn is_empty(self) -> bool {\n        self.length == 0\n    }\n\n    pub fn at(self, index: u32) -> T {\n        assert(index < self.length, \"Index out of bounds\");\n\n        self.data[self.offset + index]\n    }\n\n    pub fn set(&mut self, index: u32, value: T) {\n        let length = self.length;\n        assert(\n            index < self.length, f\"Index out of bounds, tried to set at index {index} but the length is {length}\"\n        );\n\n        self.data[self.offset + index] = value;\n    }\n\n    pub fn pop_front(&mut self) -> T {\n        assert(!self.is_empty(), \"Cannot pop from an empty fragment\");\n        self.offset += 1;\n        self.length -= 1;\n        self.data[self.offset - 1]\n    }\n\n    pub fn pop_front_array<let LEN: u32>(&mut self) -> [T; LEN] {\n        assert(self.length >= LEN, \"Cannot pop array: fragment is too short\");\n        let mut res: [T; LEN] = std::mem::zeroed();\n        res.map(|_| self.pop_front())\n    }\n\n    pub fn pop_back(&mut self) -> T {\n        assert(!self.is_empty(), \"Cannot pop from an empty fragment\");\n        self.length -= 1;\n        self.data[self.offset + self.length]\n    }\n\n    pub fn push_back(&mut self, value: T) {\n        assert(self.offset + self.length + 1 <= MAX_DATA_LEN, \"Cannot push: fragment is full\");\n        self.data[self.offset + self.length] = value;\n        self.length += 1;\n    }\n\n    pub fn extend_back<let LEN: u32>(&mut self, other: [T; LEN]) {\n        for i in 0..LEN {\n            self.push_back(other[i]);\n        }\n    }\n\n    pub fn eq<let OTHER_MAX_DATA_LEN: u32>(self, other: Fragment<OTHER_MAX_DATA_LEN, T>) -> bool where T: Eq {\n        let res = &mut true;\n        if (self.length != other.length) {\n            *res = false;\n        }\n        self.each(\n            |el, i| {\n            if i < other.length {\n                *res &= el == other.at(i);\n            }\n        }\n        );\n\n        *res\n    }\n}\n\nimpl<let MAX_DATA_LEN: u32, T> Eq for Fragment<MAX_DATA_LEN, T> where T: Eq {\n    fn eq(self, other: Fragment<MAX_DATA_LEN, T>) -> bool {\n        let res = &mut true;\n        if self.length != other.length {\n            *res = false;\n        } else {\n            self.each(|el, i| {\n                *res &= el == other.at(i);\n            });\n        };\n\n        *res\n    }\n}\n\nimpl<let MAX_DATA_LEN: u32, T> Iterator<T> for Fragment<MAX_DATA_LEN, T> {\n    fn each<Env>(self, f: fn[Env](T, u32) -> ()) {\n        for i in 0..MAX_DATA_LEN {\n            if i < self.length {\n                f(self.at(i), i);\n            }\n        }\n    }\n}\n","path":"/home/drone/projects/rione/circuits/ethereum/circuits/lib/src/misc/fragment.nr"},"90":{"source":"use dep::std::wrapping_sub;\nuse crate::rlp::types::{RlpList, RlpFragment, RlpHeader, STRING, LIST};\nuse crate::misc::fragment::Fragment;\n\n// Maximum number of bytes required to represent entity length.\n// This means that this library can only decode RLP entities with a length of up to 2^16 - 1 bytes.\nglobal MAX_LEN_IN_BYTES: u32 = 2;\n\npub fn extract_payload_len<let N: u32>(data: Fragment<N, u8>, lenlen: u32) -> u32 {\n    assert(lenlen <= MAX_LEN_IN_BYTES, \"Length of length exceeds maximum\");\n    assert(lenlen <= data.length, \"Length of length exceeds input length\");\n    assert(lenlen != 0, \"Length of length is zero\");\n\n    let mut payload_length = 0;\n\n    for i in 0..MAX_LEN_IN_BYTES {\n        if (i < lenlen & i < data.length) {\n            payload_length = data.at(i) as u32 + payload_length * 256;\n        }\n    }\n\n    payload_length\n}\n\npub fn decode_to_rlp_header<let N: u32>(data: Fragment<N, u8>) -> RlpHeader {\n    let mut data = data;\n    let prefix = data.pop_front();\n\n    if (prefix < 0x80) { // single byte\n        RlpHeader { offset: 0, length: 1, data_type: STRING }\n    } else if (prefix < 0xb8) { // [0, 55] byte string\n        let offset = 1;\n        let length = wrapping_sub(prefix, 0x80) as u32;\n        assert(offset + length <= N, \"Decoded length of short string exceeds input length\");\n\n        RlpHeader { offset, length, data_type: STRING }\n    } else if (prefix < 0xc0) { // > 55 byte string\n        let offset = wrapping_sub(1 + prefix, 0xb7) as u32;\n        let length = extract_payload_len(data, wrapping_sub(prefix, 0xb7) as u32);\n        assert(offset + length <= N, \"Decoded length of long string exceeds input length\");\n\n        RlpHeader { offset, length, data_type: STRING }\n    } else if (prefix < 0xf8) { // [0, 55] byte list\n        let offset = 1;\n        let length = wrapping_sub(prefix, 0xc0) as u32;\n        assert(offset + length <= N, \"Decoded length of short list exceeds input length\");\n\n        RlpHeader { offset, length, data_type: LIST }\n    } else { // > 55 byte list\n        let offset = wrapping_sub(1 + prefix, 0xf7) as u32;\n        let length = extract_payload_len(data, wrapping_sub(prefix, 0xf7) as u32);\n        assert(offset + length <= N, \"Decoded length of long list exceeds input length\");\n\n        RlpHeader { offset, length, data_type: LIST }\n    }\n}\n\npub fn decode_string<let N: u32>(input: Fragment<N, u8>) -> RlpFragment {\n    let mut RlpHeader {offset, length, data_type} = decode_to_rlp_header(input);\n    let total_len = length + offset;\n    assert(total_len <= input.length, \"Total length exceeds input length\");\n\n    RlpFragment { offset, length, data_type: STRING }\n}\n\n// Strings are decoded and offsets point to the start of raw values, while list offsets point to the start of the RLP header.\npub fn decode_list<let N: u32, let MAX_FIELDS: u32>(data: Fragment<N, u8>) -> RlpList<MAX_FIELDS> {\n    let mut rlp_list: RlpList<MAX_FIELDS> = BoundedVec::new();\n\n    let RlpHeader {offset, length, data_type} = decode_to_rlp_header(data);\n    assert(data_type == LIST, \"Expected a list\");\n\n    let total_len = length + offset;\n    assert(total_len <= data.length, \"Total length exceeds input length\");\n\n    let mut current_offset = offset;\n    for _ in 0..MAX_FIELDS {\n        if (current_offset < total_len) {\n            let header: Fragment<N, u8> = data.subfragment(current_offset, data.length - current_offset);\n\n            let RlpHeader {offset: field_off, length: field_len, data_type: field_type} = decode_to_rlp_header(header);\n\n            let mut offset = current_offset;\n            let mut length = field_len;\n            if (field_type == STRING) {\n                offset += field_off;\n            } else {\n                length += field_off;\n            }\n\n            rlp_list.push(RlpFragment { offset, length, data_type: field_type });\n\n            current_offset += field_off + field_len;\n        }\n    }\n    assert(current_offset == total_len, \"Inconsistent rlp length\");\n\n    rlp_list\n}\n\n// The version of decode_list that is cheaper to call, but only works for lists of small strings (<= 55 bytes).\npub fn decode_list_of_small_strings<let N: u32, let NUM_FIELDS: u32>(data: Fragment<N, u8>) -> RlpList<NUM_FIELDS> {\n    let mut rlp_list: RlpList<NUM_FIELDS> = BoundedVec::new();\n\n    let RlpHeader {offset, length, data_type} = decode_to_rlp_header(data);\n    assert(data_type == LIST, \"Expected a list\");\n\n    let total_len = length + offset;\n    assert(total_len <= data.length, \"Total length exceeds input length\");\n\n    let mut current_offset = offset;\n    for _ in 0..NUM_FIELDS {\n        if (current_offset < total_len) {\n            let first_byte = data.at(current_offset);\n\n            let (field_off, field_len) = get_small_string_offset_and_length(first_byte);\n            rlp_list.push(RlpFragment { offset: current_offset + field_off, length: field_len, data_type: STRING });\n\n            current_offset += field_off + field_len;\n        }\n    }\n    assert(current_offset == total_len, \"Inconsistent rlp length\");\n\n    rlp_list\n}\n\npub fn get_small_string_offset_and_length(first_byte: u8) -> (u32, u32) {\n    assert(first_byte < 0xb8, \"Element is not a string of length < 56 bytes\");\n\n    if (first_byte < 0x80) {\n        (0, 1)\n    } else {\n        (1, wrapping_sub(first_byte as u32, 0x80))\n    }\n}\n","path":"/home/drone/projects/rione/circuits/ethereum/circuits/lib/src/rlp/decode.nr"},"91":{"source":"use crate::misc::{arrays::sub_array_equals_up_to_length, fragment::Fragment};\nuse crate::misc::bytes::byte_value;\nuse crate::misc::types::{Address, ADDRESS_LENGTH, Bytes32, BYTES32_LENGTH};\nuse dep::u2b::{u32_to_u8, u64_to_u8};\n\n// Enum for RLP data type\nglobal STRING: u32 = 0;\nglobal LIST: u32 = 1;\n\npub type RlpList<let MAX_FIELDS: u32> = BoundedVec<RlpFragment, MAX_FIELDS>;\n\npub struct RlpHeader {\n    pub offset: u32,\n    pub length: u32,\n    pub data_type: u32,\n}\n\nimpl Eq for RlpHeader {\n    fn eq(self, other: Self) -> bool {\n        (self.offset == other.offset)\n            & (self.length == other.length)\n            & (self.data_type == other.data_type)\n    }\n}\n\npub struct RlpFragment {\n    pub offset: u32,\n    pub length: u32,\n    pub data_type: u32,\n}\n\nimpl RlpFragment {\n    pub fn assert_eq_bytes<let FIELD_NAME_LEN: u32, let MAX_RLP_LEN: u32, let MAX_VALUE_LEN: u32>(\n        self,\n        field_name: str<FIELD_NAME_LEN>,\n        rlp: Fragment<MAX_RLP_LEN, u8>,\n        value: Fragment<MAX_VALUE_LEN, u8>,\n    ) {\n        assert(self.data_type == STRING, f\"{field_name}: Invalid RLP type\");\n        assert(self.length == value.length, f\"{field_name}: Invalid RLP length\");\n        assert(\n            rlp.subfragment(self.offset, self.length).eq(value),\n            f\"{field_name}: Invalid RLP value\",\n        );\n    }\n\n    pub fn assert_eq_bounded_vec<let FIELD_NAME_LEN: u32, let MAX_RLP_LEN: u32, let MAX_VALUE_LEN: u32>(\n        self,\n        field_name: str<FIELD_NAME_LEN>,\n        rlp: Fragment<MAX_RLP_LEN, u8>,\n        value: BoundedVec<u8, MAX_VALUE_LEN>,\n    ) {\n        self.assert_eq_bytes(field_name, rlp, Fragment::from_vec(value));\n    }\n\n    pub fn assert_empty_string<let FIELD_NAME_LEN: u32, let MAX_RLP_LEN: u32>(\n        self,\n        field_name: str<FIELD_NAME_LEN>,\n    ) {\n        assert(self.data_type == STRING, f\"{field_name}: Invalid RLP type\");\n        assert(self.length == 0, f\"{field_name}: Expected empty string\");\n    }\n\n    pub fn assert_eq_u1<let FIELD_NAME_LEN: u32, let MAX_RLP_LEN: u32>(\n        self,\n        field_name: str<FIELD_NAME_LEN>,\n        rlp: Fragment<MAX_RLP_LEN, u8>,\n        value: u1,\n    ) {\n        self.assert_eq_bytes(field_name, rlp, Fragment::from_array([value as u8]));\n    }\n\n    pub fn assert_eq_u8<let FIELD_NAME_LEN: u32, let MAX_RLP_LEN: u32>(\n        self,\n        field_name: str<FIELD_NAME_LEN>,\n        rlp: Fragment<MAX_RLP_LEN, u8>,\n        value: u8,\n    ) {\n        self.assert_eq_bounded_vec(field_name, rlp, byte_value([value]));\n    }\n\n    pub fn assert_eq_u32<let FIELD_NAME_LEN: u32, let MAX_RLP_LEN: u32>(\n        self,\n        field_name: str<FIELD_NAME_LEN>,\n        rlp: Fragment<MAX_RLP_LEN, u8>,\n        value: u32,\n    ) {\n        self.assert_eq_bounded_vec(field_name, rlp, byte_value(u32_to_u8(value)));\n    }\n\n    pub fn assert_eq_u64<let FIELD_NAME_LEN: u32, let MAX_RLP_LEN: u32>(\n        self,\n        field_name: str<FIELD_NAME_LEN>,\n        rlp: Fragment<MAX_RLP_LEN, u8>,\n        value: u64,\n    ) {\n        self.assert_eq_bounded_vec(field_name, rlp, byte_value(u64_to_u8(value)));\n    }\n\n    pub fn assert_eq_u128<let FIELD_NAME_LEN: u32, let MAX_RLP_LEN: u32>(\n        self,\n        field_name: str<FIELD_NAME_LEN>,\n        rlp: Fragment<MAX_RLP_LEN, u8>,\n        value: U128,\n    ) {\n        self.assert_eq_bounded_vec(field_name, rlp, byte_value(value.to_be_bytes()));\n    }\n\n    pub fn assert_eq_address<let FIELD_NAME_LEN: u32, let MAX_RLP_LEN: u32>(\n        self,\n        field_name: str<FIELD_NAME_LEN>,\n        rlp: Fragment<MAX_RLP_LEN, u8>,\n        value: Address,\n    ) {\n        self.assert_eq_bytes(field_name, rlp, Fragment::from_array(value));\n    }\n\n    pub fn assert_eq_bytes32<let FIELD_NAME_LEN: u32, let MAX_RLP_LEN: u32>(\n        self,\n        field_name: str<FIELD_NAME_LEN>,\n        rlp: Fragment<MAX_RLP_LEN, u8>,\n        value: Bytes32,\n    ) {\n        self.assert_eq_bytes(field_name, rlp, Fragment::from_array(value));\n    }\n}\n\nimpl Default for RlpFragment {\n    fn default() -> Self {\n        RlpFragment { offset: 0, length: 0, data_type: 0 }\n    }\n}\n\nimpl Eq for RlpFragment {\n    fn eq(self, other: Self) -> bool {\n        (self.offset == other.offset)\n            & (self.length == other.length)\n            & (self.data_type == other.data_type)\n    }\n}\n","path":"/home/drone/projects/rione/circuits/ethereum/circuits/lib/src/rlp/types.nr"},"93":{"source":"use crate::account::AccountWithinBlock;\nuse crate::account_with_storage::{StorageWithinBlock, Account};\nuse crate::constants::{SR_MAX_DEPTH_NO_LEAF, SR_MAX_PREFIXED_KEY_NIBBLE_LEN, SR_MAX_LEAF_LEN_M, SR_MAX_VALUE_LEN_M};\nuse crate::account::{\n    MAX_ACCOUNT_DEPTH_NO_LEAF_M, MAX_PREFIXED_KEY_NIBBLE_LEN as ACCOUNT_MAX_PREFIXED_KEY_NIBBLE_LEN,\n    MAX_ACCOUNT_STATE_LEN, MAX_ACCOUNT_LEAF_LEN\n};\nuse crate::account_with_storage::{\n    MAX_PREFIXED_KEY_NIBBLE_LEN as STORAGE_MAX_PREFIXED_KEY_NIBBLE_LEN, MAX_STORAGE_DEPTH_NO_LEAF_M,\n    MAX_STORAGE_VALUE_LEN, MAX_STORAGE_LEAF_LEN\n};\nuse crate::misc::{fragment::Fragment, types::{BYTES32_LENGTH, Bytes32, ADDRESS_LENGTH, Address}};\nuse crate::uint256::U256;\nuse crate::merkle_patricia_proofs::proof::{ProofInput, Proof, Node, Leaf, MAX_NODE_LEN};\nuse dep::std::mem::zeroed;\n\ntrait Serde<let LEN: u32> {\n    fn serialize(self) -> [Field; LEN];\n    fn deserialize(data: [Field; LEN]) -> Self;\n}\n\nglobal U128_SERIALIZED_LEN: u32 = 2;\n\nimpl Serde<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self.lo, self.hi]\n    }\n\n    fn deserialize(data: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128 { lo: data[0], hi: data[1] }\n    }\n}\n\nglobal U256_SERIALIZED_LEN: u32 = 4;\n\nimpl Serde<U256_SERIALIZED_LEN> for U256 {\n    fn serialize(self) -> [Field; U256_SERIALIZED_LEN] {\n        [self.low.lo, self.low.hi, self.high.lo, self.high.hi]\n    }\n\n    fn deserialize(data: [Field; U256_SERIALIZED_LEN]) -> Self {\n        U256 { low: U128 { lo: data[0], hi: data[1] }, high: U128 { lo: data[2], hi: data[3] } }\n    }\n}\n\nimpl<let LEN: u32> Serde<LEN> for [u8; LEN] {\n    fn serialize(self) -> [Field; LEN] {\n        let mut result: [Field; LEN] = zeroed();\n        for i in 0..LEN {\n            result[i] = self[i] as Field;\n        }\n        result\n    }\n\n    fn deserialize(data: [Field; LEN]) -> Self {\n        let mut result: [u8; LEN] = zeroed();\n        for i in 0..LEN {\n            result[i] = data[i] as u8;\n        }\n        result\n    }\n}\n\nglobal ACCOUNT_LEN: u32 = 1 + 1 + BYTES32_LENGTH + BYTES32_LENGTH;\n\nimpl Serde<ACCOUNT_LEN> for Account {\n    fn serialize(self) -> [Field; ACCOUNT_LEN] {\n        let mut data: BoundedVec<Field, ACCOUNT_LEN> = BoundedVec::new();\n        data.push(self.nonce as Field);\n        data.push(self.balance);\n        data.extend_from_array(self.storage_root.serialize());\n        data.extend_from_array(self.code_hash.serialize());\n        data.storage\n    }\n\n    fn deserialize(data: [Field; ACCOUNT_LEN]) -> Self {\n        let mut fragment = Fragment::from_array(data);\n        let nonce = fragment.pop_front() as u64;\n        let balance = fragment.pop_front();\n        let storage_root: Bytes32 = fragment.pop_front_array().deserialize();\n        let code_hash: Bytes32 = fragment.pop_front_array().deserialize();\n        Account {\n            nonce,\n            balance,\n            storage_root,\n            code_hash,\n        }\n    }\n}\n\nglobal ACCOUNT_BLOCK_LEN: u32 = ACCOUNT_LEN + BYTES32_LENGTH;\n\nimpl Serde<ACCOUNT_BLOCK_LEN> for AccountWithinBlock {\n    fn serialize(self) -> [Field; ACCOUNT_BLOCK_LEN] {\n        let mut data: BoundedVec<Field, ACCOUNT_BLOCK_LEN> = BoundedVec::new();\n        data.extend_from_array(self.account.serialize());\n        data.extend_from_array(self.block_hash.serialize());\n        data.storage\n    }\n\n    fn deserialize(data: [Field; ACCOUNT_BLOCK_LEN]) -> Self {\n        let mut fragment = Fragment::from_array(data);\n        let account = Account::deserialize(fragment.pop_front_array());\n        let block_hash = fragment.pop_front_array().deserialize();\n        AccountWithinBlock {\n            account,\n            block_hash,\n        }\n    }\n}\n\nglobal STORAGE_BLOCK_LEN: u32 = BYTES32_LENGTH + ACCOUNT_LEN + BYTES32_LENGTH;\n\nimpl Serde<STORAGE_BLOCK_LEN> for StorageWithinBlock<1> {\n    fn serialize(self) -> [Field; STORAGE_BLOCK_LEN] {\n        let mut data: BoundedVec<Field, STORAGE_BLOCK_LEN> = BoundedVec::new();\n        data.extend_from_array(self.block_hash.serialize());\n        data.extend_from_array(self.account.serialize());\n        data.extend_from_array(self.values[0].serialize());\n        data.storage\n    }\n\n    fn deserialize(data: [Field; STORAGE_BLOCK_LEN]) -> Self {\n        let mut fragment = Fragment::from_array(data);\n        let block_hash = fragment.pop_front_array().deserialize();\n        let account = Account::deserialize(fragment.pop_front_array());\n        let values = [fragment.pop_front_array().deserialize()];\n        StorageWithinBlock {\n            block_hash,\n            account,\n            values,\n        }\n    }\n}\n\n/** STATE PROOF INPUT **/\n\nglobal STATE_NODES_LEN_M: u32 = 5320; // MAX_NODE_LEN * MAX_ACCOUNT_DEPTH_NO_LEAF_M\n\npub fn serialize_state_nodes(nodes: [Node; MAX_ACCOUNT_DEPTH_NO_LEAF_M]) -> [Field; STATE_NODES_LEN_M] {\n    let mut data: BoundedVec<Field, STATE_NODES_LEN_M> = BoundedVec::new();\n    for i in 0..MAX_ACCOUNT_DEPTH_NO_LEAF_M {\n        data.extend_from_array(nodes[i].serialize());\n    }\n    data.storage\n}\n\npub fn deserialize_state_nodes(data: [Field; STATE_NODES_LEN_M]) -> [Node; MAX_ACCOUNT_DEPTH_NO_LEAF_M] {\n    let mut result: Fragment<MAX_ACCOUNT_DEPTH_NO_LEAF_M, Node> = Fragment::empty();\n    let mut fragment = Fragment::from_array(data);\n    for _ in 0..MAX_ACCOUNT_DEPTH_NO_LEAF_M {\n        let node: Node = fragment.pop_front_array().deserialize();\n        result.push_back(node);\n    }\n    result.data\n}\n\nglobal STATE_PROOF_LEN_M: u32 = 5469; // STATE_NODES_LEN_M + MAX_ACCOUNT_LEAF_LEN + 1\n\nimpl Serde<STATE_PROOF_LEN_M> for Proof<MAX_ACCOUNT_DEPTH_NO_LEAF_M, MAX_ACCOUNT_LEAF_LEN> {\n    fn serialize(self) -> [Field; STATE_PROOF_LEN_M] {\n        let mut data: BoundedVec<Field, STATE_PROOF_LEN_M> = BoundedVec::new();\n        data.extend_from_array(serialize_state_nodes(self.nodes));\n        data.extend_from_array(self.leaf.serialize());\n        data.push(self.depth as Field);\n        data.storage\n    }\n\n    fn deserialize(data: [Field; STATE_PROOF_LEN_M]) -> Self {\n        let mut fragment = Fragment::from_array(data);\n        let nodes = deserialize_state_nodes(fragment.pop_front_array());\n        let leaf = fragment.pop_front_array().deserialize();\n        let depth = fragment.pop_front() as u64;\n        Proof {\n            nodes,\n            leaf,\n            depth,\n        }\n    }\n}\n\nglobal STATE_PROOF_INPUT_LEN_M: u32 = 5645; // ACCOUNT_MAX_PREFIXED_KEY_NIBBLE_LEN + MAX_ACCOUNT_STATE_LEN + STATE_PROOF_LEN_M\n\nimpl Serde<STATE_PROOF_INPUT_LEN_M> for ProofInput<ACCOUNT_MAX_PREFIXED_KEY_NIBBLE_LEN, MAX_ACCOUNT_STATE_LEN, MAX_ACCOUNT_DEPTH_NO_LEAF_M, MAX_ACCOUNT_LEAF_LEN> {\n    fn serialize(self) -> [Field; STATE_PROOF_INPUT_LEN_M] {\n        let mut data: BoundedVec<Field, STATE_PROOF_INPUT_LEN_M> = BoundedVec::new();\n        data.extend_from_array(self.key.serialize());\n        data.extend_from_array(self.value.serialize());\n        data.extend_from_array(self.proof.serialize());\n        data.storage\n    }\n\n    fn deserialize(data: [Field; STATE_PROOF_INPUT_LEN_M]) -> Self {\n        let mut fragment = Fragment::from_array(data);\n        let key = fragment.pop_front_array().deserialize();\n        let value = fragment.pop_front_array().deserialize();\n        let proof = Serde::<STATE_PROOF_LEN_M>::deserialize(fragment.pop_front_array());\n        ProofInput {\n            key,\n            value,\n            proof\n        }\n    }\n}\n\n/** STORAGE PROOF INPUT **/\n\nglobal STORAGE_NODES_LEN_M: u32 = 3192; // MAX_NODE_LEN * MAX_STORAGE_DEPTH_NO_LEAF_M\n\npub fn serialize_storage_nodes(nodes: [Node; MAX_STORAGE_DEPTH_NO_LEAF_M]) -> [Field; STORAGE_NODES_LEN_M] {\n    let mut data: BoundedVec<Field, STORAGE_NODES_LEN_M> = BoundedVec::new();\n    for i in 0..MAX_STORAGE_DEPTH_NO_LEAF_M {\n        data.extend_from_array(nodes[i].serialize());\n    }\n    data.storage\n}\n\npub fn deserialize_storage_nodes(data: [Field; STORAGE_NODES_LEN_M]) -> [Node; MAX_STORAGE_DEPTH_NO_LEAF_M] {\n    let mut result: Fragment<MAX_STORAGE_DEPTH_NO_LEAF_M, Node> = Fragment::empty();\n    let mut fragment = Fragment::from_array(data);\n    for _ in 0..MAX_STORAGE_DEPTH_NO_LEAF_M {\n        let node: Node = fragment.pop_front_array().deserialize();\n        result.push_back(node);\n    }\n    result.data\n}\n\nglobal STORAGE_PROOF_LEN_M: u32 = 3262; // STORAGE_NODES_LEN_M + MAX_STORAGE_LEAF_LEN + 1\n\nimpl Serde<STORAGE_PROOF_LEN_M> for Proof<MAX_STORAGE_DEPTH_NO_LEAF_M, MAX_STORAGE_LEAF_LEN> {\n    fn serialize(self) -> [Field; STORAGE_PROOF_LEN_M] {\n        let mut data: BoundedVec<Field, STORAGE_PROOF_LEN_M> = BoundedVec::new();\n        data.extend_from_array(serialize_storage_nodes(self.nodes));\n        data.extend_from_array(self.leaf.serialize());\n        data.push(self.depth as Field);\n        data.storage\n    }\n\n    fn deserialize(data: [Field; STORAGE_PROOF_LEN_M]) -> Self {\n        let mut fragment = Fragment::from_array(data);\n        let nodes = deserialize_storage_nodes(fragment.pop_front_array());\n        let leaf = fragment.pop_front_array().deserialize();\n        let depth = fragment.pop_front() as u64;\n        Proof {\n            nodes,\n            leaf,\n            depth,\n        }\n    }\n}\n\nglobal STORAGE_PROOF_INPUT_LEN_M: u32 = 3360; // STORAGE_MAX_PREFIXED_KEY_NIBBLE_LEN + MAX_STORAGE_VALUE_LEN + STORAGE_PROOF_LEN_M\n\nimpl Serde<STORAGE_PROOF_INPUT_LEN_M> for ProofInput<STORAGE_MAX_PREFIXED_KEY_NIBBLE_LEN, MAX_STORAGE_VALUE_LEN, MAX_STORAGE_DEPTH_NO_LEAF_M, MAX_STORAGE_LEAF_LEN> {\n    fn serialize(self) -> [Field; STORAGE_PROOF_INPUT_LEN_M] {\n        let mut data: BoundedVec<Field, STORAGE_PROOF_INPUT_LEN_M> = BoundedVec::new();\n        data.extend_from_array(self.key.serialize());\n        data.extend_from_array(self.value.serialize());\n        data.extend_from_array(self.proof.serialize());\n        data.storage\n    }\n\n    fn deserialize(data: [Field; STORAGE_PROOF_INPUT_LEN_M]) -> Self {\n        let mut fragment = Fragment::from_array(data);\n        let key = fragment.pop_front_array().deserialize();\n        let value = fragment.pop_front_array().deserialize();\n        let proof = Serde::<STORAGE_PROOF_LEN_M>::deserialize(fragment.pop_front_array());\n        ProofInput {\n            key,\n            value,\n            proof\n        }\n    }\n}\n\n/** RECEIPT PROOF INPUT **/\n\nglobal RECEIPT_NODES_LEN_M: u32 = 3192; // MAX_NODE_LEN * SR_MAX_DEPTH_NO_LEAF\n\npub fn serialize_receipt_nodes(nodes: [Node; SR_MAX_DEPTH_NO_LEAF]) -> [Field; RECEIPT_NODES_LEN_M] {\n    let mut data: BoundedVec<Field, RECEIPT_NODES_LEN_M> = BoundedVec::new();\n    for i in 0..SR_MAX_DEPTH_NO_LEAF {\n        data.extend_from_array(nodes[i].serialize());\n    }\n    data.storage\n}\n\npub fn deserialize_receipt_nodes(data: [Field; RECEIPT_NODES_LEN_M]) -> [Node; SR_MAX_DEPTH_NO_LEAF] {\n    let mut result: Fragment<SR_MAX_DEPTH_NO_LEAF, Node> = Fragment::empty();\n    let mut fragment = Fragment::from_array(data);\n    for _ in 0..SR_MAX_DEPTH_NO_LEAF {\n        let node: Node = fragment.pop_front_array().deserialize();\n        result.push_back(node);\n    }\n    result.data\n}\n\nglobal RECEIPT_PROOF_LEN_M: u32 = 3262; // RECEIPT_NODES_LEN_M + SR_MAX_LEAF_LEN_M + 1\n\nimpl Serde<RECEIPT_PROOF_LEN_M> for Proof<SR_MAX_DEPTH_NO_LEAF, SR_MAX_LEAF_LEN_M> {\n    fn serialize(self) -> [Field; RECEIPT_PROOF_LEN_M] {\n        let mut data: BoundedVec<Field, RECEIPT_PROOF_LEN_M> = BoundedVec::new();\n        data.extend_from_array(serialize_receipt_nodes(self.nodes));\n        data.extend_from_array(self.leaf.serialize());\n        data.push(self.depth as Field);\n        data.storage\n    }\n\n    fn deserialize(data: [Field; RECEIPT_PROOF_LEN_M]) -> Self {\n        let mut fragment = Fragment::from_array(data);\n        let nodes = deserialize_receipt_nodes(fragment.pop_front_array());\n        let leaf = fragment.pop_front_array().deserialize();\n        let depth = fragment.pop_front() as u64;\n        Proof {\n            nodes,\n            leaf,\n            depth,\n        }\n    }\n}\n\nglobal RECEIPT_PROOF_INPUT_LEN_M: u32 = 3360; // SR_MAX_PREFIXED_KEY_NIBBLE_LEN + SR_MAX_VALUE_LEN_M + RECEIPT_PROOF_LEN_M\n\nimpl Serde<RECEIPT_PROOF_INPUT_LEN_M> for ProofInput<SR_MAX_PREFIXED_KEY_NIBBLE_LEN, SR_MAX_VALUE_LEN_M, SR_MAX_DEPTH_NO_LEAF, SR_MAX_LEAF_LEN_M> {\n    fn serialize(self) -> [Field; RECEIPT_PROOF_INPUT_LEN_M] {\n        let mut data: BoundedVec<Field, RECEIPT_PROOF_INPUT_LEN_M> = BoundedVec::new();\n        data.extend_from_array(self.key.serialize());\n        data.extend_from_array(self.value.serialize());\n        data.extend_from_array(self.proof.serialize());\n        data.storage\n    }\n\n    fn deserialize(data: [Field; RECEIPT_PROOF_INPUT_LEN_M]) -> Self {\n        let mut fragment = Fragment::from_array(data);\n        let key = fragment.pop_front_array().deserialize();\n        let value = fragment.pop_front_array().deserialize();\n        let proof = Serde::<RECEIPT_PROOF_LEN_M>::deserialize(fragment.pop_front_array());\n        ProofInput {\n            key,\n            value,\n            proof\n        }\n    }\n}\n\n/** TRANSACTION PROOF INPUT **/\npub global TX_PROOF_INPUT_LEN_M: u32 = 3360;  // Same as RECEIPT_PROOF_INPUT_LEN_M for now\n","path":"/home/drone/projects/rione/circuits/ethereum/circuits/lib/src/serde.nr"},"96":{"source":"use crate::account::{Account, MAX_PREFIXED_KEY_NIBBLE_LEN, MAX_ACCOUNT_STATE_LEN, MAX_ACCOUNT_LEAF_LEN};\nuse crate::misc::{types::{Address, ADDRESS_LENGTH}, bytes::right_pad, fragment::Fragment};\nuse crate::rlp::decode::decode_list_of_small_strings;\nuse crate::rlp::types::RlpList;\nuse crate::merkle_patricia_proofs::proof::{ProofInput, verify_merkle_proof};\nuse crate::HASH_LEN;\n\nuse dep::std::hash::keccak256;\n\nglobal ACCOUNT_FIELDS_COUNT: u32 = 4;\nglobal NONCE_INDEX: u32 = 0;\nglobal BALANCE_INDEX: u32 = 1;\nglobal STORAGE_ROOT_INDEX: u32 = 2;\nglobal CODE_HASH_INDEX: u32 = 3;\n\npub(crate) fn assert_account_equals(account_rlp_left_padded: [u8; MAX_ACCOUNT_STATE_LEN], account: Account) {\n    let account_rlp_right_padded = right_pad(account_rlp_left_padded).storage;\n    let account_rlp_list: RlpList<ACCOUNT_FIELDS_COUNT> = decode_list_of_small_strings(Fragment::from_array(account_rlp_right_padded));\n    assert(account_rlp_list.len == ACCOUNT_FIELDS_COUNT, \"Invalid number of fields in account RLP\");\n\n    let account_rlp = Fragment::from_array(account_rlp_right_padded);\n    account_rlp_list.get(NONCE_INDEX).assert_eq_u64(\"Nonce\", account_rlp, account.nonce);\n    account_rlp_list.get(BALANCE_INDEX).assert_eq_u128(\"Balance\", account_rlp, U128::from_integer(account.balance));\n\n    account_rlp_list.get(STORAGE_ROOT_INDEX).assert_eq_bytes32(\"Storage root\", account_rlp, account.storage_root);\n    account_rlp_list.get(CODE_HASH_INDEX).assert_eq_bytes32(\"Code hash\", account_rlp, account.code_hash);\n}\n\nfn assert_address_equals(address_hash: [u8; MAX_PREFIXED_KEY_NIBBLE_LEN], address: Address) {\n    let address_hash_fragment = Fragment::new(MAX_PREFIXED_KEY_NIBBLE_LEN - HASH_LEN, HASH_LEN, address_hash);\n    let other_address_hash_fragment = Fragment::from_array(keccak256(address, ADDRESS_LENGTH as u32));\n    assert(address_hash_fragment.eq(other_address_hash_fragment), \"Address mismatch\");\n}\n\npub fn verify_account<let MAX_DEPTH_NO_LEAF: u32>(\n    address: Address,\n    account: Account,\n    state_proof_input: ProofInput<MAX_PREFIXED_KEY_NIBBLE_LEN, MAX_ACCOUNT_STATE_LEN, MAX_DEPTH_NO_LEAF, MAX_ACCOUNT_LEAF_LEN>,\n    state_root: [u8; HASH_LEN]\n) {\n    assert_address_equals(state_proof_input.key, address);\n    assert_account_equals(state_proof_input.value, account);\n    verify_merkle_proof(\n        state_proof_input.key,\n        state_proof_input.value,\n        state_root,\n        state_proof_input.proof\n    );\n}\n","path":"/home/drone/projects/rione/circuits/ethereum/circuits/lib/src/verifiers/account.nr"},"97":{"source":"use dep::std::hash::keccak256;\n\nuse crate::chain::{ETHEREUM_MAINNET_ID, ETHEREUM_SEPOLIA_ID};\nuse crate::HASH_LEN;\nuse crate::header::{BlockHeaderPartial, BlockHeaderRlp};\nuse crate::misc::{arrays::sub_array_equals, fragment::Fragment};\nuse crate::rlp::decode::decode_list;\nuse crate::rlp::types::RlpList;\n\nglobal MAX_HEADER_FIELDS_COUNT: u32 = 20;\nglobal STATE_ROOT_INDEX: u32 = 3;\nglobal TRANSACTIONS_ROOT_INDEX: u32 = 4;\nglobal RECEIPTS_ROOT_INDEX: u32 = 5;\nglobal BLOCK_NUM_INDEX: u32 = 8;\n\nglobal LONDON_BLOCK_NUM: u64 = 12_965_000;\nglobal PARIS_BLOCK_NUM: u64 = 15_537_394;\nglobal CANCUN_BLOCK_NUM: u64 = 19_426_587;\n\npub(crate) fn get_header_fields_count(chain_id: Field, block_number: u64) -> u32 {\n    let mut fields_count = 15;\n    if chain_id == ETHEREUM_MAINNET_ID {\n        fields_count = 20;\n    } else if chain_id == ETHEREUM_SEPOLIA_ID {\n        fields_count = 20;\n    } else {\n        assert(false, \"Unsupported chain ID\");\n    }\n    \n    fields_count\n}\n\npub fn verify_header(\n    chain_id: Field,\n    block_header_partial: BlockHeaderPartial,\n    block_header_rlp: BlockHeaderRlp,\n) {\n    let block_header_rlp = Fragment::from_vec(block_header_rlp);\n    let header_rlp_list: RlpList<MAX_HEADER_FIELDS_COUNT> = decode_list(block_header_rlp);\n    let expected_header_fields_count =\n        get_header_fields_count(chain_id, block_header_partial.number);\n\n    assert(\n        expected_header_fields_count == header_rlp_list.len,\n        \"number of header RLP fields does not match\",\n    );\n\n    header_rlp_list.get(BLOCK_NUM_INDEX).assert_eq_u64(\n        \"Block number\",\n        block_header_rlp,\n        block_header_partial.number,\n    );\n    header_rlp_list.get(STATE_ROOT_INDEX).assert_eq_bytes32(\n        \"State root\",\n        block_header_rlp,\n        block_header_partial.state_root,\n    );\n    header_rlp_list.get(TRANSACTIONS_ROOT_INDEX).assert_eq_bytes32(\n        \"Transactions root\",\n        block_header_rlp,\n        block_header_partial.transactions_root,\n    );\n    header_rlp_list.get(RECEIPTS_ROOT_INDEX).assert_eq_bytes32(\n        \"Receipts root\",\n        block_header_rlp,\n        block_header_partial.receipts_root,\n    );\n\n   \n}\n","path":"/home/drone/projects/rione/circuits/ethereum/circuits/lib/src/verifiers/header.nr"},"100":{"source":"use crate::misc::types::Bytes32;\nuse crate::account::MAX_PREFIXED_KEY_NIBBLE_LEN;\nuse crate::account_with_storage::{MAX_STORAGE_VALUE_LEN, MAX_STORAGE_LEAF_LEN};\nuse crate::merkle_patricia_proofs::proof::{ProofInput, verify_merkle_proof};\nuse crate::header::{BlockHeaderPartial, get_header};\n\npub fn verify_storage_values<let N: u32, let MAX_STORAGE_DEPTH_NO_LEAF: u32>(\n    proof_inputs: [ProofInput<MAX_PREFIXED_KEY_NIBBLE_LEN, MAX_STORAGE_VALUE_LEN, MAX_STORAGE_DEPTH_NO_LEAF, MAX_STORAGE_LEAF_LEN>; N],\n    storage_root: Bytes32\n) {\n    for i in 0..N {\n        let proof_input = proof_inputs[i];\n        verify_merkle_proof(\n            proof_input.key,\n            proof_input.value,\n            storage_root,\n            proof_input.proof\n        );\n    }\n}\n\npub fn verify_storage_values_against_block<let N: u32, let MAX_STORAGE_DEPTH_NO_LEAF: u32>(\n    chain_id: Field,\n    block_number: u64,\n    proof_inputs: [ProofInput<MAX_PREFIXED_KEY_NIBBLE_LEN, MAX_STORAGE_VALUE_LEN, MAX_STORAGE_DEPTH_NO_LEAF, MAX_STORAGE_LEAF_LEN>; N],\n    storage_root: Bytes32\n) {\n\n    let header = unsafe { get_header(chain_id, block_number) };\n    \n    assert(header.number == block_number, \"Block number mismatch in storage verification\");\n    \n    verify_storage_values(proof_inputs, storage_root);\n}\n","path":"/home/drone/projects/rione/circuits/ethereum/circuits/lib/src/verifiers/storage.nr"},"107":{"source":"pub fn u32_to_u8(num: u32) -> [u8; 4] {\n    let mut out: [u8; 4] = [0; 4];\n    for i in 0..4 {\n        let shift: u8 = (24 - (i * 8));\n        out[i] = (num >> shift) as u8;\n    }\n\n    out\n}\n\n#[test]\nfn test_u32() {\n    let small = u32_to_u8(10);\n    assert(small.len() == 4);\n    assert(small[0] == 0);\n    assert(small[1] == 0);\n    assert(small[2] == 0);\n    assert(small[3] == 10);\n\n    let two_byte = u32_to_u8(256);\n    assert(two_byte[0] == 0x00);\n    assert(two_byte[1] == 0x00);\n    assert(two_byte[2] == 0x01);\n    assert(two_byte[3] == 0x00);\n\n    let ceil = u32_to_u8(4294967295);\n    assert(ceil[0] == 0xff);\n    assert(ceil[1] == 0xff);\n    assert(ceil[2] == 0xff);\n    assert(ceil[3] == 0xff);\n}\n\npub fn u64_to_u8(num: u64) -> [u8; 8] {\n    let mut out: [u8; 8] = [0; 8];\n    for i in 0..8 {\n        let shift: u8 = 56 - (i * 8);\n        out[i] = (num >> shift) as u8;\n    }\n\n    out\n}\n\n#[test]\nfn test_u64() {\n    let small = u64_to_u8(10);\n    assert(small.len() == 8);\n    assert(small[0] == 0);\n    assert(small[1] == 0);\n    assert(small[2] == 0);\n    assert(small[3] == 0);\n    assert(small[4] == 0);\n    assert(small[5] == 0);\n    assert(small[6] == 0);\n    assert(small[7] == 10);\n\n    let two_byte = u64_to_u8(256);\n    assert(two_byte[0] == 0x00);\n    assert(two_byte[1] == 0x00);\n    assert(two_byte[2] == 0x00);\n    assert(two_byte[3] == 0x00);\n    assert(two_byte[4] == 0x00);\n    assert(two_byte[5] == 0x00);\n    assert(two_byte[6] == 0x01);\n    assert(two_byte[7] == 0x00);\n\n    let random = u64_to_u8(0x1cbe443030);\n    assert(random[0] == 0x00);\n    assert(random[1] == 0x00);\n    assert(random[2] == 0x00);\n    assert(random[3] == 0x1c);\n    assert(random[4] == 0xbe);\n    assert(random[5] == 0x44);\n    assert(random[6] == 0x30);\n    assert(random[7] == 0x30);\n\n    let ceil = u64_to_u8(18446744073709551615);\n    assert(ceil[0] == 0xff);\n    assert(ceil[1] == 0xff);\n    assert(ceil[2] == 0xff);\n    assert(ceil[3] == 0xff);\n    assert(ceil[4] == 0xff);\n    assert(ceil[5] == 0xff);\n    assert(ceil[6] == 0xff);\n    assert(ceil[7] == 0xff);\n}\n","path":"/home/drone/nargo/github.com/vlayer-xyz/noir-u2b/v0.3.4/src/lib.nr"},"109":{"source":"use crate::bn254::ks;\n\n#[field(bn254)]\npub fn decrypt<let R: u32>(ciphers: [Field; R], key:[Field; 4],  iv:[Field; 4]) -> [Field; R] {\n    let mut plains = [0; R];\n    let (mut state, extended_key) = ks::hydra_body(key, iv);\n    let mut ks = ks::hydra_first_head(state, extended_key);\n    if R <= 8 as u32 {\n        for i in 0..R {\n            plains[i] = ciphers[i] - ks[i];\n        }\n    } else {\n        for i in 0..8 {\n            plains[i] = ciphers[i] - ks[i];\n        }\n        for i in 8..R {\n            let off = i % 8;\n            if off == 0 {\n                let result = ks::hydra_head(state, extended_key, off);\n                state = result.0;\n                ks = result.1;\n            }\n            plains[i] = ciphers[i] - ks[off];\n        }\n    }\n    plains\n}\n","path":"/home/drone/projects/rione/circuits/lib/noir-hydra/src/bn254/dec.nr"},"110":{"source":"use crate::bn254::ks;\n\n//encrypts up to 8000 Field Elements\n#[field(bn254)]\npub fn encrypt<let R: u32>(plains: [Field; R], key:[Field; 4],  iv:[Field; 4]) -> [Field; R] {\n    let mut ciphers = [0; R];\n    let (mut state, extended_key) = ks::hydra_body(key, iv);\n    let mut ks = ks::hydra_first_head(state, extended_key);\n    if R <= 8 as u32 {\n        for i in 0..R {\n            ciphers[i] = plains[i] + ks[i];\n        }\n    } else {\n        for i in 0..8 {\n            ciphers[i] = plains[i] + ks[i];\n        }\n        for i in 8..R {\n            let off = i % 8;\n            if off == 0 {\n                let result = ks::hydra_head(state, extended_key, off);\n                state = result.0;\n                ks = result.1;\n            }\n            ciphers[i] = plains[i] + ks[off];\n        }\n    }\n    ciphers\n}\n","path":"/home/drone/projects/rione/circuits/lib/noir-hydra/src/bn254/enc.nr"},"111":{"source":"use crate::bn254::consts;\n\n#[field(bn254)]\npub(crate) fn hydra_body(key: [Field; 4], iv: [Field; 4]) -> ([Field; 8], [Field; 8]) {\n    let (mut state, z) = permutation_b(vec_add(iv, key));\n    state = vec_add(state, key);\n    (vec_concat(state, z), vec_concat(key, matrix_e(key)))\n}\n\n#[field(bn254)]\npub(crate) fn hydra_first_head<let R: u32>(state: [Field; 8], key: [Field; 8]) ->  [Field; 8] {\n    vec_add(permutation_h(state, key), state)\n}\n\n#[field(bn254)]\npub(crate) fn hydra_head<let R: u32>(state: [Field; 8], key: [Field; 8], index: u32) -> ([Field; 8], [Field; 8]) {\n    let roll = rolling(state, index);\n    (roll, vec_add(permutation_h(roll, key), roll))\n}\n\n\nfn rolling(state: [Field; 8], index: u32) -> [Field; 8] {\n    let (y, z) = vec_split(state);\n    let (y, z) = non_linear_r(y, z);\n    let y_perm = matrix_i(y, consts::Mi);\n    let z_perm = matrix_i(z, consts::Mi);\n    vec_add(vec_concat(y_perm, z_perm), consts::rc_r[index])\n}\n\nfn permutation_h(mut roll: [Field; 8], extended_key: [Field; 8]) -> [Field; 8] {\n    for i in 0..consts::Rh {\n        roll = non_linear_h(roll);\n        roll = matrix_i(roll, consts::Mh);\n        roll = vec_add(roll, consts::rc_h[i]);\n        roll = vec_add(roll, extended_key);\n    }\n    roll\n}\n\nfn permutation_b(state: [Field; 4]) -> ([Field;4], [Field; 4]) {\n    let mut acc = [0; 4];\n    let mut state = matrix_e(state);\n    for i in 0..consts::Re_1 {\n        state = non_linear_e(state);\n        state = matrix_e(state);\n        state = vec_add(state, consts::rc_b[i]);\n        acc = vec_add(acc, state);\n    }\n    for i in 0..consts::Ri {\n        state = non_linear_i(state);\n        state = matrix_i(state, consts::Mi);\n        state = vec_add(state, consts::rc_b[i + consts::Re_1]);\n        acc = vec_add(acc, state);\n    }\n    for i in consts::Re_1..consts::Re_1 + consts::Re_2 - 1 {\n        state = non_linear_e(state);\n        state = matrix_e(state);\n        state = vec_add(state, consts::rc_b[i + consts::Ri]);\n        acc = vec_add(acc, state);\n    }\n\n    //one more time but without addition\n    state = non_linear_e(state);\n    state = matrix_e(state);\n    state = vec_add(state, consts::rc_b[consts::Re_1 + consts::Re_2 - 1 + consts::Ri]);\n    (state, acc)\n}\n\n#[field(bn254)]\npub(crate) fn hydra_body_ks(key: [Field; 4], iv: [Field; 4]) -> [Field; 4] {\n    let state = vec_add(key, iv);\n    let mut state = matrix_e(state);\n    for i in 0..consts::Re_1 {\n        state = non_linear_e(state);\n        state = matrix_e(state);\n        state = vec_add(state, consts::rc_b[i]);\n    }\n    for i in 0..consts::Ri {\n        state = non_linear_i(state);\n        state = matrix_i(state, consts::Mi);\n        state = vec_add(state, consts::rc_b[i + consts::Re_1]);\n    }\n    for i in consts::Re_1..consts::Re_1 + consts::Re_2 {\n        state = non_linear_e(state);\n        state = matrix_e(state);\n        state = vec_add(state, consts::rc_b[i + consts::Ri]);\n    }\n    vec_add(state, key)\n}\n\nfn matrix_e<let R: u32>(state: [Field; R]) -> [Field; R] {\n    let sum = state.reduce(|a,b| a + b);\n    let rot_state = rotate_left(state);\n    let mut result = [0; R];\n    for i in 0..R {\n        result[i] = sum + rot_state[i] + state[i] + state[i];\n    }\n    result\n}\n\nfn matrix_i<let R: u32, let L: u32>(state: [Field; R], mat:[[Field; R]; L]) -> [Field; R] {\n    let sum = state.reduce(|a,b| a + b);\n    let mut out = [sum; R];\n    out[0] += state[0] * mat[0][0];\n    for i in 1..R {\n        out[i] += (state[0] * mat[i][0]) + (state[i] * mat[i][i]);\n    }\n    out\n}\n\nfn rotate_left<let R: u32>(mat: [Field; R]) -> [Field; R] {\n    let mut rotated = [0; R];\n    for i in 1..R {\n        rotated[i-1] = mat[i];\n    }\n    rotated[R-1] = mat[0];\n    rotated\n}\n\nfn non_linear_h(roll: [Field; 8]) -> [Field; 8] {\n    let mut dot = roll[0] + roll[1] + roll[2] + roll[3] - roll[4] - roll[5] - roll[6] - roll[7];\n    dot = square(dot);\n    roll.map(|r| r + dot)\n}\n\nfn non_linear_e(state: [Field;4]) -> [Field; 4] {\n    [state[0].pow_32(5), state[1].pow_32(5), state[2].pow_32(5), state[3].pow_32(5)]\n}\n\nfn non_linear_i(state: [Field; 4]) -> [Field;4] {\n    let (dot1, dot2) = get_lm_dot(state);\n    let sum = square(square(dot1) + dot2);\n    [state[0] + sum, state[1] + sum, state[2] + sum, state[3] + sum]\n}\n\nfn non_linear_r(y: [Field;4], z: [Field; 4]) -> ([Field; 4], [Field; 4]) {\n    let (vy, wy) = get_lm_dot(y);\n    let (wz, vz) = get_lm_dot(z);\n    let v = (vy * vz);\n    let w = (wy * wz);\n    (y.map(|yi| yi + v), z.map(|zi| zi + w))\n}\n\nfn get_lm_dot(state: [Field; 4]) -> (Field, Field) {\n    let tmp = state[0] - state[3];\n    (tmp - state[1] + state[2], tmp + state[1] - state[2])\n}\n\nfn square(x: Field) -> Field {\n    x * x\n}\n\nfn vec_concat(lhs:  [Field; 4], rhs: [Field; 4]) -> [Field; 8] {\n    [lhs[0], lhs[1], lhs[2], lhs[3], rhs[0], rhs[1], rhs[2], rhs[3]]\n}\n\nfn vec_split(vec:  [Field; 8]) -> ([Field; 4], [Field; 4]) {\n    ([vec[0], vec[1], vec[2], vec[3]], [vec[4], vec[5], vec[6], vec[7]])\n}\n\nfn vec_add<let R: u32>(lhs: [Field; R], rhs: [Field; R]) -> [Field; R] {\n    let mut result = [0; R];\n    for i in 0..R {\n        result[i] = lhs[i] + rhs[i];\n    }\n    result\n}\n\n#[test]\nfn test_rotate_left() {\n    let test = [0, 1, 2, 3, 4, 5, 6, 7];\n    assert(rotate_left(test) == [1, 2, 3, 4, 5, 6, 7, 0]);\n}\n\n#[test]\nfn test_get_lm_dot() {\n    let (dot1, dot2) = get_lm_dot([17162050878538720375407210140639637720303994375562539862452690421292386592590,\n            11912527370530146728703046717149243981430064476687468213603991691404411193217,\n            18430438893156814166144129663793173051281448131580613239977654404180923080739,\n            7614633435608198927774246011281602559236719354621200488645904294064394220068]);\n    assert(dot1 == 16065328965557188885074047076001964230918658675834484400180448840004504260044);\n    assert(dot2 == 3029505920303854010191881182714106091215891366048194347433123414451480485000);\n}\n\n#[test]\nfn test_non_linear_h() {\n    let state = non_linear_h([17311339206079525542322783825459319113913165622286561296721622612914673407804,\n            16276728151221844182140219810267241649985535582588722449384727866117202327093,\n            10801048258802086965858707507694761799252711922965390030528950861087300763030,\n            3638652786377497073268842010725440468491752112825502524378677961251293024759,\n            7645315248887656730315052486323154491745884763740850513982583264261456826307,\n            10323065323391982836294143162837377995469044206483281154564046348037825339388,\n            20343326181502906791617898953771792194510136932068335746318866730568328752863,\n            17802268834568716074000952286650978346952421838604678848244855399442974823193]);\n    assert(state == [4547325791835956019343387175706495521510639735313024107278926563682326597476,\n        3512714736978274659160823160514418057583009695615185259942031816884855516765,\n        19925277716397792665125716603199213295398550436407887184784458998430762448319,\n        12762882243973202772535851106229891964637590626267999678634186098594754710048,\n        16769544706483362429582061581827605987891723277183347668238091401604918511596,\n        19447294780987688535561152258341829491614882719925778308819554485381287024677,\n        7579312767259337268638502304018968602107611045094798556876170681335981942535,\n        5038255420325146551021555636898154754549895951631141658802159350210628012865]);\n}\n\n#[test]\nfn test_non_linear_i() {\n    let state = non_linear_i([17162050878538720375407210140639637720303994375562539862452690421292386592590,\n            11912527370530146728703046717149243981430064476687468213603991691404411193217,\n            18430438893156814166144129663793173051281448131580613239977654404180923080739,\n            7614633435608198927774246011281602559236719354621200488645904294064394220068]);\n    assert(state == [4309430684818317694633606829961546606191461818288188130026024885465599697736,\n        20948150048649019270175849151728427955865896319829150824875530342153432793980,\n        5577818699436411485370526353115081937168915574306261507550988868354136185885,\n        16650256113727071469247048445860786533672551197762883099917442944813415820831]);\n}\n\n#[test]\nfn test_non_linear_e() {\n    assert(non_linear_e([10, 8, 8, 9]) == [100000, 32768, 32768, 59049]);\n}\n\n#[test]\nfn test_non_linear_r() {\n    let y_in = [17311339206079525542322783825459319113913165622286561296721622612914673407804,\n        16276728151221844182140219810267241649985535582588722449384727866117202327093,\n        10801048258802086965858707507694761799252711922965390030528950861087300763030,\n        3638652786377497073268842010725440468491752112825502524378677961251293024759];\n    let z_in = [7645315248887656730315052486323154491745884763740850513982583264261456826307,\n        10323065323391982836294143162837377995469044206483281154564046348037825339388,\n        20343326181502906791617898953771792194510136932068335746318866730568328752863,\n        17802268834568716074000952286650978346952421838604678848244855399442974823193];\n    let (y_out, z_out) = non_linear_r(y_in, z_in);\n    assert(y_out == [16474558665066990056068011496692118409558256462734362411538742665023636404753,\n        15439947610209308695885447481500040945630626423036523564201847918226165324042,\n        9964267717789551479603935178927561094897802763413191145346070913196263759979,\n        2801872245364961587014069681958239764136842953273303639195798013360256021708]);\n    assert(z_out == [18800231885746230730599298706870897921156360762149932570264867923720730257667,\n        21477981960250556836578389383385121424879520204892363210846331007497098770748,\n        9609999946522205569655739429062260535372248530061383458902947203451793688606,\n        7068942599588014852038792761941446687814533436597726560828935872326439758936]);\n}\n\n#[test]\nfn test_matrix_e() {\n    assert(matrix_e([2, 1, 1, 1]) == [10, 8, 8, 9]);\n}\n","path":"/home/drone/projects/rione/circuits/lib/noir-hydra/src/bn254/ks.nr"},"114":{"source":"\r\nuse std::runtime::is_unconstrained;\r\nuse std::hash::keccak::keccakf1600;\r\n\r\nglobal BLOCK_SIZE_IN_BYTES: u32 = 136; //(1600 - BITS * 2) / WORD_SIZE;\r\nglobal WORD_SIZE: u32 = 8; // Limbs are made up of u64s so 8 bytes each.\r\nglobal LIMBS_PER_BLOCK: u32 = BLOCK_SIZE_IN_BYTES / WORD_SIZE;\r\nglobal NUM_KECCAK_LANES: u32 = 25;\r\n\r\n#[no_predicates]\r\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32] {\r\n    assert(N >= message_size);\r\n\r\n    // Copy input to block bytes. For that we'll need at least input bytes (N)\r\n    // but we want it to be padded to a multiple of BLOCK_SIZE_IN_BYTES.\r\n    let mut block_bytes = [0; ((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES];\r\n    if is_unconstrained() {\r\n        for i in 0..message_size {\r\n            block_bytes[i] = input[i];\r\n        }\r\n    } else {\r\n        for i in 0..N {\r\n            if i < message_size {\r\n                block_bytes[i] = input[i];\r\n            }\r\n        }\r\n    }\r\n\r\n    //1. format_input_lanes\r\n    let max_blocks = (N + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\r\n    //maximum number of bytes to hash\r\n    let real_max_blocks = (message_size + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\r\n    let real_blocks_bytes = real_max_blocks * BLOCK_SIZE_IN_BYTES;\r\n\r\n    block_bytes[message_size] = 1;\r\n    block_bytes[real_blocks_bytes - 1] = 0x80;\r\n\r\n    // populate a vector of 64-bit limbs from our byte array\r\n    let mut sliced_buffer =\r\n        [0; (((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES) / WORD_SIZE];\r\n    for i in 0..sliced_buffer.len() {\r\n        let limb_start = WORD_SIZE * i;\r\n\r\n        let mut sliced = 0;\r\n        let mut v = 1;\r\n        for k in 0..WORD_SIZE {\r\n            sliced += v * (block_bytes[limb_start + k] as Field);\r\n            v *= 256;\r\n        }\r\n\r\n        sliced_buffer[i] = sliced as u64;\r\n    }\r\n\r\n    //2. sponge_absorb\r\n    let mut state: [u64; NUM_KECCAK_LANES] = [0; NUM_KECCAK_LANES];\r\n    // When in an unconstrained runtime we can take advantage of runtime loop bounds,\r\n    // thus allowing us to simplify the loop body.\r\n    if is_unconstrained() {\r\n        for i in 0..real_max_blocks {\r\n            if (i == 0) {\r\n                for j in 0..LIMBS_PER_BLOCK {\r\n                    state[j] = sliced_buffer[j];\r\n                }\r\n            } else {\r\n                for j in 0..LIMBS_PER_BLOCK {\r\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\r\n                }\r\n            }\r\n            state = keccakf1600(state);\r\n        }\r\n    } else {\r\n        // `real_max_blocks` is guaranteed to at least be `1`\r\n        // We peel out the first block as to avoid a conditional inside of the loop.\r\n        // Otherwise, a dynamic predicate can cause a blowup in a constrained runtime.\r\n        for j in 0..LIMBS_PER_BLOCK {\r\n            state[j] = sliced_buffer[j];\r\n        }\r\n        state = keccakf1600(state);\r\n        for i in 1..max_blocks {\r\n            if i < real_max_blocks {\r\n                for j in 0..LIMBS_PER_BLOCK {\r\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\r\n                }\r\n                state = keccakf1600(state);\r\n            }\r\n        }\r\n    }\r\n\r\n    //3. sponge_squeeze\r\n    let mut result = [0; 32];\r\n    for i in 0..4 {\r\n        let lane = state[i] as Field;\r\n        let lane_le: [u8; 8] = lane.to_le_bytes();\r\n        for j in 0..8 {\r\n            result[8 * i + j] = lane_le[j];\r\n        }\r\n    }\r\n    result\r\n}","path":"/home/drone/projects/rione/circuits/lib/keccak256/src/keccak256.nr"}},"names":["main"],"brillig_names":["u64_to_ascii_bytes","get_account_with_storage","directive_invert","directive_integer_quotient","directive_to_radix"]}