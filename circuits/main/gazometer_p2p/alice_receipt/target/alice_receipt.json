{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":928747737725852039,"abi":{"parameters":[{"name":"alice_signature_nonce_1","type":{"kind":"array","length":65,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"alice_signature_nonce_2","type":{"kind":"array","length":65,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"chain_id","type":{"kind":"field"},"visibility":"public"},{"name":"block_number","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"message_nonce_1","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"message_nonce_2","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"pub_x_1","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"pub_y_1","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"pub_x_2","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"pub_y_2","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"contract_address","type":{"kind":"array","length":20,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"receipt_amount","type":{"kind":"field"},"visibility":"public"}],"return_type":{"abi_type":{"kind":"tuple","fields":[{"kind":"field"},{"kind":"field"},{"kind":"field"},{"kind":"field"},{"kind":"field"},{"kind":"field"},{"kind":"field"},{"kind":"field"}]},"visibility":"public"},"error_types":{"292786241566106125":{"error_kind":"fmtstring","length":31,"item_types":[{"kind":"string","length":17}]},"662911055836379074":{"error_kind":"string","string":"Cannot pop array: fragment is too short"},"808102636936227868":{"error_kind":"string","string":"Cannot push: fragment is full"},"1257039332889662951":{"error_kind":"string","string":"Unsupported chain ID"},"1702844987497767662":{"error_kind":"string","string":"number of header RLP fields does not match"},"1784090300352196074":{"error_kind":"string","string":"New max length is smaller than fragment length"},"1797804167342671480":{"error_kind":"string","string":"Invalid node type"},"1848132903095460097":{"error_kind":"string","string":"Expected RLP header to be maximum 1 byte long"},"1975296384129351436":{"error_kind":"string","string":"Decoded length of long string exceeds input length"},"2294458973011079183":{"error_kind":"string","string":"Expected a list"},"2446709291901099778":{"error_kind":"fmtstring","length":31,"item_types":[{"kind":"string","length":12}]},"2814641233417603000":{"error_kind":"fmtstring","length":32,"item_types":[{"kind":"string","length":12}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3492945213712566949":{"error_kind":"string","string":"Subarray index out of bound"},"3649116680727309155":{"error_kind":"string","string":"Expected to consume all key nibbles"},"3990714964858224170":{"error_kind":"string","string":"Value length mismatch"},"4649481178424447293":{"error_kind":"fmtstring","length":31,"item_types":[{"kind":"string","length":5}]},"4989950638959520334":{"error_kind":"fmtstring","length":32,"item_types":[{"kind":"string","length":17}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5493362915830397726":{"error_kind":"string","string":"Prefix must be 0, 1, 2 or 3"},"5655419122065692946":{"error_kind":"string","string":"Length of length exceeds input length"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"6236500010476601753":{"error_kind":"fmtstring","length":32,"item_types":[{"kind":"string","length":7}]},"6360937559958062612":{"error_kind":"string","string":"Cannot pop from an empty fragment"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6768678589290466106":{"error_kind":"fmtstring","length":30,"item_types":[{"kind":"string","length":9}]},"6797140530996405384":{"error_kind":"fmtstring","length":31,"item_types":[{"kind":"string","length":7}]},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"7512174461964532630":{"error_kind":"fmtstring","length":30,"item_types":[{"kind":"string","length":10}]},"7673055947793783294":{"error_kind":"string","string":"Element is not a string of length < 56 bytes"},"7701088741439810963":{"error_kind":"string","string":"Expected a hash at the end of the extension node"},"7727927684323588447":{"error_kind":"string","string":"Expected a hash at position given by the key nibble"},"7729612060405699720":{"error_kind":"string","string":"Node RLP length exceeds MAX_LEN"},"7932861116973345373":{"error_kind":"string","string":"Value mismatch"},"7976774808975071288":{"error_kind":"string","string":"Bytes implicit data length must be at least 2 times larger than bytes explicit length"},"8449533356146759774":{"error_kind":"string","string":"Extension key part does not correspond to given key nibbles"},"8647927282746596079":{"error_kind":"fmtstring","length":30,"item_types":[{"kind":"string","length":13}]},"8764575204013396926":{"error_kind":"string","string":"Leaf parity prefix must be 2 or 3"},"8940778978892985534":{"error_kind":"string","string":"Key mismatch in the leaf"},"9003498225274356583":{"error_kind":"fmtstring","length":30,"item_types":[{"kind":"string","length":17}]},"9262262581089067316":{"error_kind":"string","string":"Length of length is zero"},"9610804029702890081":{"error_kind":"string","string":"Inconsistent rlp length"},"9733638806613941694":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32}]},"9931858164094679337":{"error_kind":"fmtstring","length":30,"item_types":[{"kind":"string","length":12}]},"10029016582456820804":{"error_kind":"string","string":"Fragment length exceeds data length"},"10459214753737813644":{"error_kind":"string","string":"Total length exceeds input length"},"10736731826012069778":{"error_kind":"fmtstring","length":31,"item_types":[{"kind":"string","length":9}]},"10854030354164654860":{"error_kind":"string","string":"Address mismatch"},"11183658210205501665":{"error_kind":"fmtstring","length":30,"item_types":[{"kind":"string","length":5}]},"11201295997920925782":{"error_kind":"string","string":"Expected a zero after a prefix of even parity"},"13113033765825030666":{"error_kind":"fmtstring","length":32,"item_types":[{"kind":"string","length":10}]},"13169712016435268629":{"error_kind":"string","string":"Decoded length of long list exceeds input length"},"13521589430615575074":{"error_kind":"fmtstring","length":31,"item_types":[{"kind":"string","length":13}]},"13851312983424125104":{"error_kind":"fmtstring","length":32,"item_types":[{"kind":"string","length":5}]},"13857984082167849225":{"error_kind":"string","string":"Invalid node hash"},"14130454602814610950":{"error_kind":"string","string":"Extension parity prefix must be 0 or 1"},"14177523539272545097":{"error_kind":"string","string":"Array index out of bound"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14384811266519685328":{"error_kind":"string","string":"Subfragment overflows fragment"},"14420715966409058246":{"error_kind":"string","string":"Length of length exceeds maximum"},"14462956016171063393":{"error_kind":"string","string":"Leaf expected to have 2 fields"},"14651816509643900852":{"error_kind":"string","string":"Decoded length of short string exceeds input length"},"14729908539421612020":{"error_kind":"fmtstring","length":30,"item_types":[{"kind":"string","length":7}]},"14911434386120940114":{"error_kind":"string","string":"Invalid number of fields in account RLP"},"15862946155048515401":{"error_kind":"string","string":"Decoded length of short list exceeds input length"},"15864849592686294349":{"error_kind":"fmtstring","length":32,"item_types":[{"kind":"string","length":9}]},"16538375868159084754":{"error_kind":"string","string":"Block number does not match the argument"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17362798791118512561":{"error_kind":"fmtstring","length":31,"item_types":[{"kind":"string","length":10}]},"17772659172029321311":{"error_kind":"fmtstring","length":32,"item_types":[{"kind":"string","length":13}]},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"","file_map":{"3":{"source":"use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        unsafe {\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n}\n","path":"std/array/mod.nr"},"5":{"source":"use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: StructDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: StructDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n","path":"std/cmp.nr"},"6":{"source":"use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"12":{"source":"// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n","path":"std/convert.nr"},"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"19":{"source":"use crate::runtime::is_unconstrained;\n\nglobal BLOCK_SIZE_IN_BYTES: u32 = 136; //(1600 - BITS * 2) / WORD_SIZE;\nglobal WORD_SIZE: u32 = 8; // Limbs are made up of u64s so 8 bytes each.\nglobal LIMBS_PER_BLOCK: u32 = BLOCK_SIZE_IN_BYTES / WORD_SIZE;\nglobal NUM_KECCAK_LANES: u32 = 25;\n\n#[foreign(keccakf1600)]\npub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {}\n\n#[no_predicates]\n#[deprecated(\"keccak256 is being deprecated from the stdlib, use https://github.com/noir-lang/keccak256 instead\")]\npub(crate) fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32] {\n    assert(N >= message_size);\n\n    // Copy input to block bytes. For that we'll need at least input bytes (N)\n    // but we want it to be padded to a multiple of BLOCK_SIZE_IN_BYTES.\n    let mut block_bytes = [0; ((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES];\n    if is_unconstrained() {\n        for i in 0..message_size {\n            block_bytes[i] = input[i];\n        }\n    } else {\n        for i in 0..N {\n            if i < message_size {\n                block_bytes[i] = input[i];\n            }\n        }\n    }\n\n    //1. format_input_lanes\n    let max_blocks = (N + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    //maximum number of bytes to hash\n    let real_max_blocks = (message_size + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    let real_blocks_bytes = real_max_blocks * BLOCK_SIZE_IN_BYTES;\n\n    block_bytes[message_size] = 1;\n    block_bytes[real_blocks_bytes - 1] = 0x80;\n\n    // populate a vector of 64-bit limbs from our byte array\n    let mut sliced_buffer =\n        [0; (((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES) / WORD_SIZE];\n    for i in 0..sliced_buffer.len() {\n        let limb_start = WORD_SIZE * i;\n\n        let mut sliced = 0;\n        let mut v = 1;\n        for k in 0..WORD_SIZE {\n            sliced += v * (block_bytes[limb_start + k] as Field);\n            v *= 256;\n        }\n\n        sliced_buffer[i] = sliced as u64;\n    }\n\n    //2. sponge_absorb\n    let mut state: [u64; NUM_KECCAK_LANES] = [0; NUM_KECCAK_LANES];\n    // When in an unconstrained runtime we can take advantage of runtime loop bounds,\n    // thus allowing us to simplify the loop body.\n    if is_unconstrained() {\n        for i in 0..real_max_blocks {\n            if (i == 0) {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = sliced_buffer[j];\n                }\n            } else {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\n                }\n            }\n            state = keccakf1600(state);\n        }\n    } else {\n        // `real_max_blocks` is guaranteed to at least be `1`\n        // We peel out the first block as to avoid a conditional inside of the loop.\n        // Otherwise, a dynamic predicate can cause a blowup in a constrained runtime.\n        for j in 0..LIMBS_PER_BLOCK {\n            state[j] = sliced_buffer[j];\n        }\n        state = keccakf1600(state);\n        for i in 1..max_blocks {\n            if i < real_max_blocks {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\n                }\n                state = keccakf1600(state);\n            }\n        }\n    }\n\n    //3. sponge_squeeze\n    let mut result = [0; 32];\n    for i in 0..4 {\n        let lane = state[i] as Field;\n        let lane_le: [u8; 8] = lane.to_le_bytes();\n        for j in 0..8 {\n            result[8 * i + j] = lane_le[j];\n        }\n    }\n    result\n}\n\nmod tests {\n    use super::keccak256;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x5a, 0x50, 0x2f, 0x9f, 0xca, 0x46, 0x7b, 0x26, 0x6d, 0x5b, 0x78, 0x33, 0x65, 0x19,\n            0x37, 0xe8, 0x05, 0x27, 0x0c, 0xa3, 0xf3, 0xaf, 0x1c, 0x0d, 0xd2, 0x46, 0x2d, 0xca,\n            0x4b, 0x3b, 0x1a, 0xbf,\n        ];\n        assert_eq(keccak256(input, input.len()), result);\n    }\n\n    #[test]\n    fn hash_hello_world() {\n        let input = \"Hello world!\".as_bytes();\n        let result = [\n            0xec, 0xd0, 0xe1, 0x8, 0xa9, 0x8e, 0x19, 0x2a, 0xf1, 0xd2, 0xc2, 0x50, 0x55, 0xf4, 0xe3,\n            0xbe, 0xd7, 0x84, 0xb5, 0xc8, 0x77, 0x20, 0x4e, 0x73, 0x21, 0x9a, 0x52, 0x3, 0x25, 0x1f,\n            0xea, 0xab,\n        ];\n        assert_eq(keccak256(input, input.len()), result);\n    }\n\n    #[test]\n    fn var_size_hash() {\n        let input = [\n            189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205,\n            206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222,\n            223,\n        ];\n        let result = [\n            226, 37, 115, 94, 94, 196, 72, 116, 194, 105, 79, 233, 65, 12, 30, 94, 181, 131, 170,\n            219, 171, 166, 236, 88, 143, 67, 255, 160, 248, 214, 39, 129,\n        ];\n        assert_eq(keccak256(input, 13), result);\n    }\n\n    #[test]\n    fn hash_longer_than_136_bytes() {\n        let input = \"123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789\"\n            .as_bytes();\n        assert(input.len() > 136);\n\n        let result = [\n            0x1d, 0xca, 0xeb, 0xdf, 0xd9, 0xd6, 0x24, 0x67, 0x1c, 0x18, 0x16, 0xda, 0xd, 0x8a, 0xeb,\n            0xa8, 0x75, 0x71, 0x2c, 0xc, 0x89, 0xe0, 0x25, 0x2, 0xe8, 0xb6, 0x5e, 0x16, 0x5, 0x55,\n            0xe4, 0x40,\n        ];\n        assert_eq(keccak256(input, input.len()), result);\n    }\n}\n","path":"std/hash/keccak.nr"},"20":{"source":"pub mod poseidon;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\nuse crate::uint128::U128;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n","path":"std/hash/mod.nr"},"29":{"source":"pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod merkle;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod sha256;\npub mod sha512;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod uint128;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n}\n","path":"std/lib.nr"},"59":{"source":"use crate::cmp::{Eq, Ord, Ordering};\nuse crate::ops::{Add, BitAnd, BitOr, BitXor, Div, Mul, Not, Rem, Shl, Shr, Sub};\nuse crate::static_assert;\nuse super::{convert::AsPrimitive, default::Default};\n\nglobal pow64: Field = 18446744073709551616; //2^64;\nglobal pow63: Field = 9223372036854775808; // 2^63;\npub struct U128 {\n    pub(crate) lo: Field,\n    pub(crate) hi: Field,\n}\n\nimpl U128 {\n\n    pub fn from_u64s_le(lo: u64, hi: u64) -> U128 {\n        // in order to handle multiplication, we need to represent the product of two u64 without overflow\n        assert(crate::field::modulus_num_bits() as u32 > 128);\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    pub fn from_u64s_be(hi: u64, lo: u64) -> U128 {\n        U128::from_u64s_le(lo, hi)\n    }\n\n    pub fn zero() -> U128 {\n        U128 { lo: 0, hi: 0 }\n    }\n\n    pub fn one() -> U128 {\n        U128 { lo: 1, hi: 0 }\n    }\n    pub fn from_le_bytes(bytes: [u8; 16]) -> U128 {\n        let mut lo = 0;\n        let mut base = 1;\n        for i in 0..8 {\n            lo += (bytes[i] as Field) * base;\n            base *= 256;\n        }\n        let mut hi = 0;\n        base = 1;\n        for i in 8..16 {\n            hi += (bytes[i] as Field) * base;\n            base *= 256;\n        }\n        U128 { lo, hi }\n    }\n\n    pub fn to_be_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_be_bytes();\n        let hi: [u8; 8] = self.hi.to_be_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = hi[i];\n            bytes[i + 8] = lo[i];\n        }\n        bytes\n    }\n\n    pub fn to_le_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_le_bytes();\n        let hi: [u8; 8] = self.hi.to_le_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = lo[i];\n            bytes[i + 8] = hi[i];\n        }\n        bytes\n    }\n\n    pub fn from_hex<let N: u32>(hex: str<N>) -> U128 {\n        let bytes = hex.as_bytes();\n        // string must starts with \"0x\"\n        assert((bytes[0] == 48) & (bytes[1] == 120), \"Invalid hexadecimal string\");\n        static_assert(N < 35, \"Input does not fit into a U128\");\n\n        let mut lo = 0;\n        let mut hi = 0;\n        let mut base = 1;\n        if N <= 18 {\n            for i in 0..N - 2 {\n                lo += U128::decode_ascii(bytes[N - i - 1]) * base;\n                base = base * 16;\n            }\n        } else {\n            for i in 0..16 {\n                lo += U128::decode_ascii(bytes[N - i - 1]) * base;\n                base = base * 16;\n            }\n            base = 1;\n            for i in 17..N - 1 {\n                hi += U128::decode_ascii(bytes[N - i]) * base;\n                base = base * 16;\n            }\n        }\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    unconstrained fn unconstrained_check_is_upper_ascii(ascii: u8) -> bool {\n        ((ascii >= 65) & (ascii <= 90)) // Between 'A' and 'Z'\n    }\n\n    pub(crate) fn decode_ascii(ascii: u8) -> Field {\n        (\n            if ascii < 58 {\n                ascii - 48\n            } else {\n                // Safety: optionally adds 32 and then check (below) the result is in 'a..f' range\n                let ascii =\n                    ascii + 32 * (unsafe { U128::unconstrained_check_is_upper_ascii(ascii) as u8 });\n                assert(ascii >= 97); // enforce >= 'a'\n                assert(ascii <= 102); // enforce <= 'f'\n                ascii - 87\n            }\n        ) as Field\n    }\n\n    // TODO: Replace with a faster version.\n    // A circuit that uses this function can be slow to compute\n    // (we're doing up to 127 calls to compute the quotient)\n    unconstrained fn unconstrained_div(self: Self, b: U128) -> (U128, U128) {\n        if b == U128::zero() {\n            // Return 0,0 to avoid eternal loop\n            (U128::zero(), U128::zero())\n        } else if self < b {\n            (U128::zero(), self)\n        } else if self == b {\n            (U128::one(), U128::zero())\n        } else {\n            let (q, r) = if b.hi as u64 >= pow63 as u64 {\n                // The result of multiplication by 2 would overflow\n                (U128::zero(), self)\n            } else {\n                self.unconstrained_div(b * U128::from_u64s_le(2, 0))\n            };\n            let q_mul_2 = q * U128::from_u64s_le(2, 0);\n            if r < b {\n                (q_mul_2, r)\n            } else {\n                (q_mul_2 + U128::one(), r - b)\n            }\n        }\n    }\n\n    pub fn from_integer<T>(i: T) -> U128\n    where\n        T: AsPrimitive<Field>,\n    {\n        let f = i.as_();\n        // Reject values which would overflow a u128\n        f.assert_max_bit_size::<128>();\n        let lo = f as u64 as Field;\n        let hi = (f - lo) / pow64;\n        U128 { lo, hi }\n    }\n\n    pub fn to_integer<T>(self) -> T\n    where\n        Field: AsPrimitive<T>,\n    {\n        AsPrimitive::as_(self.lo + self.hi * pow64)\n    }\n\n    fn wrapping_mul(self: Self, b: U128) -> U128 {\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.lo * b.hi + self.hi * b.lo + carry;\n        let hi = high as u64 as Field;\n        U128 { lo, hi }\n    }\n}\n\nimpl Add for U128 {\n    fn add(self: Self, b: U128) -> U128 {\n        let low = self.lo + b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.hi + b.hi + carry;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to add with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Sub for U128 {\n    fn sub(self: Self, b: U128) -> U128 {\n        let low = pow64 + self.lo - b.lo;\n        let lo = low as u64 as Field;\n        let borrow = (low == lo) as Field;\n        let high = self.hi - b.hi - borrow;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to subtract with underflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Mul for U128 {\n    fn mul(self: Self, b: U128) -> U128 {\n        assert(self.hi * b.hi == 0, \"attempt to multiply with overflow\");\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = if crate::field::modulus_num_bits() as u32 > 196 {\n            (self.lo + self.hi) * (b.lo + b.hi) - low + carry\n        } else {\n            self.lo * b.hi + self.hi * b.lo + carry\n        };\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to multiply with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Div for U128 {\n    fn div(self: Self, b: U128) -> U128 {\n        // Safety: euclidian division is asserted to be correct: assert(a == b * q + r); and assert(r < b);\n        // Furthermore, U128 addition and multiplication ensures that b * q + r does not overflow\n        unsafe {\n            let (q, r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n            q\n        }\n    }\n}\n\nimpl Rem for U128 {\n    fn rem(self: Self, b: U128) -> U128 {\n        // Safety: cf div() above\n        unsafe {\n            let (q, r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n\n            r\n        }\n    }\n}\n\nimpl Eq for U128 {\n    fn eq(self: Self, b: U128) -> bool {\n        (self.lo == b.lo) & (self.hi == b.hi)\n    }\n}\n\nimpl Ord for U128 {\n    fn cmp(self, other: Self) -> Ordering {\n        let hi_ordering = (self.hi as u64).cmp((other.hi as u64));\n        let lo_ordering = (self.lo as u64).cmp((other.lo as u64));\n\n        if hi_ordering == Ordering::equal() {\n            lo_ordering\n        } else {\n            hi_ordering\n        }\n    }\n}\n\nimpl Not for U128 {\n    fn not(self) -> U128 {\n        U128 { lo: (!(self.lo as u64)) as Field, hi: (!(self.hi as u64)) as Field }\n    }\n}\n\nimpl BitOr for U128 {\n    fn bitor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) | (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) | (other.hi as u64)) as Field,\n        }\n    }\n}\n\nimpl BitAnd for U128 {\n    fn bitand(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) & (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) & (other.hi as u64)) as Field,\n        }\n    }\n}\n\nimpl BitXor for U128 {\n    fn bitxor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) ^ (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) ^ (other.hi as u64)) as Field,\n        }\n    }\n}\n\nimpl Shl for U128 {\n    fn shl(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift left with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self.wrapping_mul(U128::from_integer(y))\n    }\n}\n\nimpl Shr for U128 {\n    fn shr(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift right with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self / U128::from_integer(y)\n    }\n}\n\nimpl Default for U128 {\n    fn default() -> Self {\n        U128::zero()\n    }\n}\n\nmod tests {\n    use crate::default::Default;\n    use crate::ops::Not;\n    use crate::uint128::{pow63, pow64, U128};\n\n    #[test]\n    fn test_not(lo: u64, hi: u64) {\n        let num = U128::from_u64s_le(lo, hi);\n        let not_num = num.not();\n\n        assert_eq(not_num.hi, (hi.not() as Field));\n        assert_eq(not_num.lo, (lo.not() as Field));\n\n        let not_not_num = not_num.not();\n        assert_eq(num, not_not_num);\n    }\n    #[test]\n    fn test_construction() {\n        // Check little-endian u64 is inversed with big-endian u64 construction\n        let a = U128::from_u64s_le(2, 1);\n        let b = U128::from_u64s_be(1, 2);\n        assert_eq(a, b);\n        // Check byte construction is equivalent\n        let c = U128::from_le_bytes([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n        let d = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        assert_eq(c, d);\n    }\n    #[test]\n    fn test_byte_decomposition() {\n        let a = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        // Get big-endian and little-endian byte decompostions\n        let le_bytes_a = a.to_le_bytes();\n        let be_bytes_a = a.to_be_bytes();\n\n        // Check equivalence\n        for i in 0..16 {\n            assert_eq(le_bytes_a[i], be_bytes_a[15 - i]);\n        }\n        // Reconstruct U128 from byte decomposition\n        let b = U128::from_le_bytes(le_bytes_a);\n        // Check that it's the same element\n        assert_eq(a, b);\n    }\n    #[test]\n    fn test_hex_constuction() {\n        let a = U128::from_u64s_le(0x1, 0x2);\n        let b = U128::from_hex(\"0x20000000000000001\");\n        assert_eq(a, b);\n\n        let c = U128::from_hex(\"0xffffffffffffffffffffffffffffffff\");\n        let d = U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff);\n        assert_eq(c, d);\n\n        let e = U128::from_hex(\"0x00000000000000000000000000000000\");\n        let f = U128::from_u64s_le(0, 0);\n        assert_eq(e, f);\n    }\n\n    // Ascii decode tests\n\n    #[test]\n    fn test_ascii_decode_correct_range() {\n        // '0'..'9' range\n        for i in 0..10 {\n            let decoded = U128::decode_ascii(48 + i);\n            assert_eq(decoded, i as Field);\n        }\n        // 'A'..'F' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(65 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n        // 'a'..'f' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(97 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_0() {\n        crate::println(U128::decode_ascii(0));\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_1() {\n        crate::println(U128::decode_ascii(47));\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_0() {\n        let _ = U128::decode_ascii(58);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_1() {\n        let _ = U128::decode_ascii(64);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_0() {\n        let _ = U128::decode_ascii(71);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_1() {\n        let _ = U128::decode_ascii(96);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_greater_than_102_fails() {\n        let _ = U128::decode_ascii(103);\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_regression() {\n        // This code will actually fail because of ascii_decode,\n        // but in the past it was possible to create a value > (1<<128)\n        let a = U128::from_hex(\"0x~fffffffffffffffffffffffffffffff\");\n        let b: Field = a.to_integer();\n        let c: [u8; 17] = b.to_le_bytes();\n        assert(c[16] != 0);\n    }\n\n    #[test]\n    fn test_unconstrained_div() {\n        // Test the potential overflow case\n        let a = U128::from_u64s_le(0x0, 0xffffffffffffffff);\n        let b = U128::from_u64s_le(0x0, 0xfffffffffffffffe);\n        let c = U128::one();\n        let d = U128::from_u64s_le(0x0, 0x1);\n        // Safety: testing context\n        unsafe {\n            let (q, r) = a.unconstrained_div(b);\n            assert_eq(q, c);\n            assert_eq(r, d);\n        }\n\n        let a = U128::from_u64s_le(2, 0);\n        let b = U128::one();\n        // Check the case where a is a multiple of b\n        // Safety: testing context\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (a, U128::zero()));\n        }\n\n        // Check where b is a multiple of a\n        // Safety: testing context\n        unsafe {\n            let (c, d) = b.unconstrained_div(a);\n            assert_eq((c, d), (U128::zero(), b));\n        }\n\n        // Dividing by zero returns 0,0\n        let a = U128::from_u64s_le(0x1, 0x0);\n        let b = U128::zero();\n        // Safety: testing context\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (U128::zero(), U128::zero()));\n        }\n        // Dividing 1<<127 by 1<<127 (special case)\n        let a = U128::from_u64s_le(0x0, pow63 as u64);\n        let b = U128::from_u64s_le(0x0, pow63 as u64);\n        // Safety: testing context\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (U128::one(), U128::zero()));\n        }\n    }\n\n    #[test]\n    fn integer_conversions() {\n        // Maximum\n        let start: Field = 0xffffffffffffffffffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Minimum\n        let start: Field = 0x0;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Low limb\n        let start: Field = 0xffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // High limb\n        let start: Field = 0xffffffffffffffff0000000000000000;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn integer_conversions_fuzz(lo: u64, hi: u64) {\n        let start: Field = (lo as Field) + pow64 * (hi as Field);\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        // 1*0==0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::one()));\n\n        // 0*1==0\n        assert_eq(U128::zero(), U128::one().wrapping_mul(U128::zero()));\n\n        // 1*1==1\n        assert_eq(U128::one(), U128::one().wrapping_mul(U128::one()));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::zero()));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::from_u64s_le(0, 1).wrapping_mul(U128::one()));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::one().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::from_u64s_le(0, 1)));\n        // -1 * -1 == 1\n        assert_eq(\n            U128::one(),\n            U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff).wrapping_mul(\n                U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff),\n            ),\n        );\n    }\n\n    #[test]\n    fn test_default() {\n        assert_eq(U128::default(), U128::zero());\n    }\n}\n","path":"std/uint128.nr"},"61":{"source":"use dep::ethereum::account_with_storage::{get_header, StorageWithinBlock};\r\nuse dep::ethereum::misc::types::{Address, Bytes32};\r\nuse dep::ethereum::account::{get_account, AccountWithinBlock, MAX_PREFIXED_KEY_NIBBLE_LEN};\r\nuse dep::ethereum::merkle_patricia_proofs::proof::{ProofInput, Key, Value, Proof, Node, Leaf, verify_merkle_proof};\r\nuse dep::ethereum::verifiers::storage::verify_storage_values;\r\nuse dep::ethereum::account_with_storage::get_account_with_storage;\r\nuse dep::hydra::bn254::{enc, dec};\r\nuse dep::keccak256::keccak256;\r\n\r\n\r\n// Alice sign nonce n & n-1\r\n// n-1 is hashed and check that keccak(sig(n-1))) exist in the storage of the contract\r\n// if it does, prove state of balanceCommit exist for that key(keccak(sig(n-1)))\r\n// use sig(n-1) to decrypt the balanceCommit of n-1 and save the value\r\n\r\n// updated Finalbalance = receipt_balance_change + n-1 decrypted balanceCommit\r\n// encrypt the FinalBalance with sign(n)\r\n\r\n// output chain_id, block_number, keccak(sign(n))[commit2], encrypted_FinalBalance\r\n\r\n\r\n\r\nfn main(\r\n    alice_signature_nonce_1: [u8; 65],\r\n    alice_signature_nonce_2: [u8; 65],\r\n    chain_id: pub Field,\r\n    block_number: u64,\r\n    message_nonce_1: u64,\r\n    message_nonce_2: u64,\r\n    pub_x_1: [u8; 32],\r\n    pub_y_1: [u8; 32],\r\n    pub_x_2: [u8; 32],\r\n    pub_y_2: [u8; 32],\r\n    contract_address: Address,\r\n    receipt_amount: pub Field,\r\n) -> pub (Field, Field, Field, Field, Field, Field, Field, Field) {\r\n\r\n    // ---- Check nonce are valid ------ //\r\n    let hashed_message_1 = hash_u64(message_nonce_1);\r\n    let hashed_message_2 = hash_u64(message_nonce_2);\r\n    \r\n\r\n    // Create 64-byte signature by taking first 64 bytes\r\n    let mut sig_64_1: [u8; 64] = [0; 64];\r\n    let mut sig_64_2: [u8; 64] = [0; 64];\r\n    for i in 0..64 {\r\n        sig_64_1[i] = alice_signature_nonce_1[i];\r\n        sig_64_2[i] = alice_signature_nonce_2[i];\r\n    }\r\n\r\n    assert(std::ecdsa_secp256k1::verify_signature(pub_x_1, pub_y_1, sig_64_1, hashed_message_1));\r\n    assert(std::ecdsa_secp256k1::verify_signature(pub_x_2, pub_y_2, sig_64_2, hashed_message_2));\r\n\r\n    let balance_commit_slot = 2;\r\n\r\n    let commit_1_hash = \r\n        keccak256(hex_bytes_to_ascii(alice_signature_nonce_1), 132);\r\n    let commit_2_hash = \r\n        keccak256(hex_bytes_to_ascii(alice_signature_nonce_2), 132);\r\n    \r\n    //----- compute storage keys ----- //\r\n\r\n    let mut key_and_slot: [u8; 64] = [0; 64];    \r\n    for i in 0..32 {\r\n        key_and_slot[i] = commit_1_hash[i];\r\n    }\r\n    key_and_slot[63] = balance_commit_slot as u8;  \r\n    let commit_1_storage_key = keccak256(key_and_slot, 64);\r\n\r\n    for i in 0..32 {\r\n        key_and_slot[i] = commit_2_hash[i];\r\n    }\r\n    key_and_slot[63] = balance_commit_slot as u8;  \r\n    let balance_commit_1_storage_key = keccak256(key_and_slot, 64);\r\n\r\n    //---- Get Verified Storage Values ----- //\r\n        // get balance for key(commit_1_storage_key) => balance_commit_verified_storage.values[0]\r\n    let commit_1_verified_storage = unsafe {get_account_with_storage(\r\n        chain_id,\r\n        block_number,\r\n        contract_address,\r\n        commit_1_storage_key\r\n    )};\r\n    // If key value dosent exist in mapping (commit=>balance) then the oracle will reject\r\n    // therefore we might check mapping(commit=>bool) is true, but we can neglet it here\r\n    // as a false commitment wont match the sig, and a non mapped key will throw error\r\n\r\n   \r\n    \r\n    //------ Compose new balance -----------//\r\n    // @Dev: Security is low, for same sig and fiferent balance an attacker\r\n    // could figure out the length of the value, by checking the switching bytes\r\n    // But since we use 1 commit 1 derived key we get rid of this iussue\r\n    \r\n    // 1) decrypt balanceCommit for n-1 \r\n    let iv = [0, 0, 0, 0];\r\n    let nonce_1_derived_key = derive_key_from_signature(alice_signature_nonce_1);\r\n    let encrypted_balance = safe_storage_to_field(commit_1_verified_storage.values[0]);\r\n    let decrypted_1_balance_commit_balance = \r\n        decrypt_balance(alice_signature_nonce_1, encrypted_balance);\r\n    // 2) add receipt_amount to the decrypted balanceCommit for n-1 \r\n    let new_balance = decrypted_1_balance_commit_balance + receipt_amount;\r\n    // 3) encrypt the new balance with sign(n)\r\n    let new_key = derive_key_from_signature(alice_signature_nonce_2);\r\n    let balance_fields = [new_balance, 0, 0, 0, 0, 0, 0, 0];\r\n    let encrypted_fields = enc::encrypt(balance_fields, new_key, iv);\r\n\r\n    let encrypted_final_balance = encrypted_fields[0];\r\n    // nullifier serve to prevent double spending of same state, we dont need to check\r\n    // storage value for it, this pass to bob. If nullifier already exist bob's proof will be \r\n    // rejected in the smart contract\r\n    let nullifier = keccak256(keccak256(hex_bytes_to_ascii(alice_signature_nonce_2), 132), 32);\r\n    \r\n    // return chain_id, block_number, keccak(sign(n))[commit2], encrypted_FinalBalance\r\n    (\r\n        chain_id,\r\n        block_number as Field, \r\n        address_to_field(contract_address),\r\n        bytes_to_field(commit_1_verified_storage.block_hash), \r\n        bytes_to_field(nullifier), // <---- nullifier for commit_2 \r\n        encrypted_final_balance, // <-- balance destined for commit_2\r\n        bytes_to_field(commit_2_hash),\r\n        receipt_amount\r\n    )\r\n}\r\n\r\n// Define a larger key size that can accommodate the nibble conversion of a 32-byte key\r\nglobal LARGER_KEY_SIZE: u32 = 132; // 2 * 32 + 68 (extra space for prefix)\r\n\r\n// Derive a deterministic key from a signature\r\nfn derive_key_from_signature(signature: [u8; 65]) -> [Field; 4] {\r\n    let mut key = [0; 4];\r\n    for i in 0..4 {\r\n        let mut value: u64 = 0;\r\n        for j in 0..4 {\r\n            value = (value << 8) | (signature[i * 4 + j] as u64);\r\n        }\r\n        key[i] = value as Field;\r\n    }\r\n    key\r\n}\r\n\r\nfn decrypt_balance(\r\n    // Signature data\r\n    signature: [u8; 65],\r\n    \r\n    // Encrypted balance (field element)\r\n    encrypted_balance: Field,\r\n) -> pub Field {\r\n    // Derive key from signature (same as encryption)\r\n    let key = derive_key_from_signature(signature);\r\n    \r\n    // Create a fixed IV (same as encryption)\r\n    let iv = [0, 0, 0, 0];\r\n    \r\n    // Create encrypted fields array\r\n    let encrypted_fields = [encrypted_balance, 0, 0, 0, 0, 0, 0, 0];\r\n\r\n    \r\n    // Decrypt the fields\r\n    let decrypted_fields = dec::decrypt(encrypted_fields, key, iv);\r\n    \r\n    \r\n    // Return the first decrypted field element\r\n    decrypted_fields[0]\r\n}\r\n\r\n// Helper function to convert a single hex nibble to its ASCII character\r\nfn nibble_to_ascii(nibble: u8) -> u8 {\r\n    if nibble < 10 {\r\n        nibble + 48  // '0' to '9'\r\n    } else {\r\n        nibble + 87  // 'a' to 'f'\r\n    }\r\n}\r\n\r\n// Function to convert hex bytes to ASCII string representation\r\nfn hex_bytes_to_ascii(hex_bytes: [u8; 65]) -> [u8; 132] {\r\n    let mut result: [u8; 132] = [0; 132];\r\n    \r\n    // Add \"0x\" prefix\r\n    result[0] = 48;  // '0'\r\n    result[1] = 120; // 'x'\r\n    \r\n    // Convert each byte to two ASCII characters\r\n    for i in 0..65 {\r\n        let byte = hex_bytes[i];\r\n        let high_nibble = byte >> 4;\r\n        let low_nibble = byte & 0x0f;\r\n        \r\n        result[2 + i * 2] = nibble_to_ascii(high_nibble);\r\n        result[2 + i * 2 + 1] = nibble_to_ascii(low_nibble);\r\n    }\r\n    \r\n    result\r\n}\r\n\r\n// Function to convert bytes to a Field value\r\nfn bytes_to_field(bytes: [u8; 32]) -> Field {\r\n    let mut result: Field = 0;\r\n    \r\n    // Convert bytes to field\r\n    for i in 0..32 {\r\n        result = result * 256 + (bytes[i] as Field);\r\n    }\r\n    \r\n    result\r\n}\r\n\r\n// Function to convert Address (20 bytes) to Field\r\nfn address_to_field(address: Address) -> Field {\r\n    let mut result: Field = 0;\r\n    \r\n    // Convert bytes to field\r\n    for i in 0..20 {\r\n        result = result * 256 + (address[i] as Field);\r\n    }\r\n    \r\n    result\r\n}\r\n\r\n// Function to safely convert storage value to field\r\nfn safe_storage_to_field(storage_value: [u8; 32]) -> Field {\r\n    // Convert bytes to field directly\r\n    // Noir's field type automatically handles overflow\r\n    bytes_to_field(storage_value)\r\n}\r\n\r\n// Unconstrained function to convert u64 to ASCII bytes\r\nunconstrained fn u64_to_ascii_bytes(value: u64) -> [u8; 20] {\r\n    let mut result: [u8; 20] = [0; 20];\r\n    let mut temp = value;\r\n    let mut pos = 19;\r\n    \r\n    // Handle zero case\r\n    if value == 0 {\r\n        result[19] = 48; // '0'\r\n    } else {\r\n        // Convert each digit to ASCII\r\n        while temp > 0 {\r\n            let digit = (temp % 10) as u8;\r\n            result[pos] = digit + 48; // Convert to ASCII\r\n            temp = temp / 10;\r\n            if pos > 0 {\r\n                pos -= 1;\r\n            }\r\n        }\r\n    }\r\n    \r\n    // Shift all digits to the right\r\n    let mut shifted: [u8; 20] = [0; 20];\r\n    let mut count = 0;\r\n    for i in 0..20 {\r\n        if result[i] != 0 {\r\n            count += 1;\r\n        }\r\n    }\r\n    \r\n    for i in 0..count {\r\n        shifted[20 - count + i] = result[20 - count + i];\r\n    }\r\n    \r\n    shifted\r\n}\r\n\r\n// Function to hash a u64 value using Keccak256\r\nfn hash_u64(value: u64) -> [u8; 32] {\r\n    // Convert value to ASCII bytes using unconstrained function\r\n    let digits = unsafe { u64_to_ascii_bytes(value) };\r\n    \r\n    // Count non-zero digits\r\n    let mut digit_count = 0;\r\n    for i in 0..20 {\r\n        if digits[i] != 0 {\r\n            digit_count += 1;\r\n        }\r\n    }\r\n    \r\n    // Copy digits to message\r\n    let mut message: [u8; 64] = [0; 64];\r\n    for i in 0..20 {\r\n        if i < digit_count {\r\n            message[i] = digits[20 - digit_count + i];\r\n        }\r\n    }\r\n    \r\n    // Hash the digits\r\n    keccak256(message, digit_count)\r\n}\r\n\r\n\r\n#[test]\r\nfn test_hash_u64_values() {\r\n    // Test with 1\r\n    let hash_1 = hash_u64(1);\r\n    let expected_hash_1: [u8; 32] = [\r\n        0xc8, 0x9e, 0xfd, 0xaa, 0x54, 0xc0, 0xf2, 0x0c, 0x7a, 0xdf, 0x61, 0x28, 0x82, 0xdf, 0x09, 0x50,\r\n        0xf5, 0xa9, 0x51, 0x63, 0x7e, 0x03, 0x07, 0xcd, 0xcb, 0x4c, 0x67, 0x2f, 0x29, 0x8b, 0x8b, 0xc6\r\n    ];\r\n    assert(hash_1 == expected_hash_1);\r\n    \r\n    // Test with 10\r\n    let hash_10 = hash_u64(10);\r\n    let expected_hash_10: [u8; 32] = [\r\n        0x1a, 0x19, 0x2f, 0xab, 0xce, 0x13, 0x98, 0x8b, 0x84, 0x99, 0x4d, 0x42, 0x96, 0xe6, 0xcd, 0xc4,\r\n        0x18, 0xd5, 0x5e, 0x2f, 0x1d, 0x7f, 0x94, 0x21, 0x88, 0xd4, 0x04, 0x0b, 0x94, 0xfc, 0x57, 0xac\r\n    ];\r\n    assert(hash_10 == expected_hash_10);\r\n    \r\n    // Test with 100\r\n    let hash_100 = hash_u64(100);\r\n    let expected_hash_100: [u8; 32] = [\r\n        0x8c, 0x18, 0x21, 0x0d, 0xf0, 0xd9, 0x51, 0x4f, 0x2d, 0x2e, 0x5d, 0x8c, 0xa7, 0xc1, 0x00, 0x97,\r\n        0x82, 0x19, 0xee, 0x80, 0xd3, 0x96, 0x8a, 0xd8, 0x50, 0xab, 0x5e, 0xad, 0x20, 0x82, 0x87, 0xb3\r\n    ];\r\n    assert(hash_100 == expected_hash_100);\r\n    \r\n    // Print the hashes for verification\r\n    println(\"Hash of 1:\");\r\n    println(hash_1);\r\n    println(\"Hash of 10:\");\r\n    println(hash_10);\r\n    println(\"Hash of 100:\");\r\n    println(hash_100);\r\n}\r\n\r\n#[test]\r\nfn test_storage_proof() {\r\n    // Chain ID for Sepolia testnet\r\n    let chain_id = 11155111;\r\n    \r\n    // Block number\r\n    let block_number = 8233854;\r\n    \r\n    // Message nonces\r\n    let message_nonce_1 = 1;\r\n    let message_nonce_2 = 2;\r\n    \r\n    // contract_address to check - using the correct type\r\n    let contract_address: Address = [0x58, 0x2B, 0xEE, 0x8f, 0x43, 0xBF, 0x20, 0x39, 0x64, 0xd3, 0x8c, 0x54, 0xFA, 0x03, 0xe6, 0x2d, 0x61, 0x61, 0x59, 0xfA];\r\n    \r\n    // Signatures (65 bytes)\r\n    let alice_signature_nonce_1: [u8; 65] = [\r\n        0x07, 0x2f, 0x3e, 0x1e, 0x23, 0xa2, 0x17, 0xbd, 0xc3, 0xc4, 0x1b, 0x4c, 0x61, 0x35, 0x2b, 0xcc,\r\n        0x78, 0xd8, 0x14, 0x0e, 0xb9, 0x81, 0x0b, 0xd3, 0xd3, 0x60, 0x37, 0xfb, 0x65, 0xc7, 0xaf, 0x40,\r\n        0x6d, 0x4c, 0x37, 0x72, 0xb0, 0xc4, 0xd4, 0xfb, 0x29, 0x8c, 0xec, 0x36, 0xd0, 0x9d, 0x64, 0x6f,\r\n        0xf6, 0xa2, 0x49, 0x71, 0x0e, 0x43, 0xcd, 0xf2, 0x85, 0x6e, 0x5d, 0x4e, 0xfd, 0xbf, 0x7b, 0xd3,\r\n        0x1c\r\n    ];\r\n    let alice_signature_nonce_2: [u8; 65] = [\r\n        0x47, 0x65, 0xf9, 0xcb, 0xeb, 0xb3, 0xff, 0x25, 0x24, 0x5f, 0xc8, 0xe3, 0x81, 0x8f, 0x36, 0xa2,\r\n        0xf4, 0xfa, 0x09, 0xf9, 0x89, 0xd3, 0x20, 0xcd, 0xef, 0xc4, 0x65, 0xb2, 0x95, 0xd6, 0xa0, 0xaf,\r\n        0x37, 0x73, 0x11, 0x57, 0x5a, 0xc4, 0x51, 0x99, 0xd9, 0xab, 0x0a, 0x9f, 0x58, 0x54, 0x3f, 0x12,\r\n        0xf2, 0x5e, 0x33, 0xdc, 0xc4, 0xc7, 0xe7, 0xf0, 0x93, 0x19, 0x88, 0x68, 0x20, 0x88, 0xb6, 0xe7,\r\n        0x1c\r\n    ];\r\n\r\n    // Public key coordinates\r\n    let pub_x_1: [u8; 32] = [\r\n        0xca, 0xb1, 0x4a, 0x0b, 0xb5, 0x57, 0xdf, 0xe9, 0x0a, 0x26, 0x8d, 0xcd, 0x04, 0xf1, 0x7e, 0x2e,\r\n        0xa8, 0xd8, 0xcc, 0xd5, 0x57, 0x71, 0xaa, 0x18, 0xec, 0x72, 0x3a, 0xf2, 0xee, 0x45, 0x92, 0xe6\r\n    ];\r\n    let pub_y_1: [u8; 32] = [\r\n        0x75, 0xd4, 0x4b, 0xb8, 0xbc, 0x98, 0xdb, 0x93, 0x24, 0x0f, 0x48, 0x07, 0x7c, 0x63, 0xaa, 0x4b,\r\n        0x29, 0xd5, 0x9a, 0xa3, 0x35, 0xcf, 0xf4, 0xb2, 0xa0, 0x88, 0x23, 0x4f, 0x69, 0xc2, 0x2e, 0xba\r\n    ];\r\n\r\n    // Using same public key for both signatures\r\n    let pub_x_2: [u8; 32] = [\r\n        0x97, 0x0f, 0xaa, 0x1e, 0xf6, 0xfd, 0xfe, 0xdc, 0xc5, 0x21, 0x56, 0xe4, 0x88, 0x0d, 0x2a, 0x0d,\r\n        0xce, 0x57, 0xaf, 0xfa, 0xf1, 0x99, 0xe6, 0x60, 0x8e, 0x9b, 0x23, 0xc9, 0xf0, 0x85, 0xd2, 0xd1\r\n    ];\r\n    let pub_y_2: [u8; 32] = [\r\n        0x34, 0x2a, 0x1e, 0xa1, 0xd1, 0x84, 0x38, 0x92, 0x34, 0x7a, 0x8f, 0x9a, 0x0d, 0xcb, 0x09, 0x72,\r\n        0xfc, 0xd0, 0x3f, 0xe0, 0x17, 0xd2, 0x6c, 0xb2, 0xb4, 0xcd, 0xd4, 0x63, 0xbf, 0x7b, 0x9a, 0xf2\r\n    ];\r\n    \r\n    let receipt_amount = 100;\r\n    \r\n    let (chain_id, block_number, contract_address, block_hash, nullifier, encrypted_balance, commit_2_hash, receipt_amount) = main(\r\n        alice_signature_nonce_1, \r\n        alice_signature_nonce_2, \r\n        chain_id, \r\n        block_number,\r\n        message_nonce_1,\r\n        message_nonce_2,\r\n        pub_x_1,\r\n        pub_y_1,\r\n        pub_x_2,\r\n        pub_y_2,\r\n        contract_address, \r\n        receipt_amount\r\n    );\r\n    println(\"---- CIRCUIT OUTPUT ----\");\r\n    println(\"chain_id\");\r\n    println(chain_id);\r\n    println(\"block_number\");\r\n    println(block_number);\r\n    println(\"contract_address\");\r\n    println(contract_address);\r\n    println(\"block_hash\");\r\n    println(block_hash);\r\n    println(\"nullifier\");\r\n    println(nullifier);\r\n    println(\"encrypted_balance\");\r\n    println(encrypted_balance);\r\n    println(\"commit_2_hash\");\r\n    println(commit_2_hash);\r\n    println(\"receipt_amount\");\r\n    println(receipt_amount);\r\n    println(\"---- END OF CIRCUIT OUTPUT ----\");\r\n}\r\n\r\n#[test]\r\nfn test_storage_key_generation() {\r\n    // Given hash\r\n    let hash: [u8; 32] = [\r\n        0x48, 0xfc, 0x0d, 0xf3, 0x39, 0x48, 0xd2, 0x89, 0x57, 0xd5, 0xf6, 0x2e, 0xe1, 0x76, 0x43, 0xb0,\r\n        0x31, 0x1d, 0x4d, 0xda, 0x43, 0xf2, 0xcf, 0x74, 0x78, 0x39, 0x70, 0x3c, 0x52, 0xf3, 0x80, 0x98\r\n    ];\r\n    \r\n    // Create a buffer for the concatenated key and slot\r\n    let mut key_and_slot: [u8; 64] = [0; 64];\r\n    \r\n    // Copy the hash into the buffer\r\n    for i in 0..32 {\r\n        key_and_slot[i] = hash[i];\r\n    }\r\n    \r\n    // Add the slot number at the end (padded with zeros)\r\n    key_and_slot[63] = 2;  // slot 2\r\n    \r\n    // Hash the concatenated key and slot to get the storage key\r\n    let storage_key = keccak256(key_and_slot, 64);\r\n    \r\n    println(\"Original hash:\");\r\n    println(hash);\r\n    println(\"Generated storage key:\");\r\n    println(storage_key);\r\n}\r\n\r\n#[test]\r\nfn test_hex_literal_hashing() {\r\n    // The actual hex values as bytes\r\n    let hex_bytes = [\r\n        0x47, 0x65, 0xf9, 0xcb, 0xeb, 0xb3, 0xff, 0x25, 0x24, 0x5f, 0xc8, 0xe3, 0x81, 0x8f, 0x36, 0xa2,\r\n        0xf4, 0xfa, 0x09, 0xf9, 0x89, 0xd3, 0x20, 0xcd, 0xef, 0xc4, 0x65, 0xb2, 0x95, 0xd6, 0xa0, 0xaf,\r\n        0x37, 0x73, 0x11, 0x57, 0x5a, 0xc4, 0x51, 0x99, 0xd9, 0xab, 0x0a, 0x9f, 0x58, 0x54, 0x3f, 0x12,\r\n        0xf2, 0x5e, 0x33, 0xdc, 0xc4, 0xc7, 0xe7, 0xf0, 0x93, 0x19, 0x88, 0x68, 0x20, 0x88, 0xb6, 0xe7,\r\n        0x1c\r\n    ];\r\n\r\n    // Convert hex bytes to ASCII string representation\r\n    let hex_string_bytes = hex_bytes_to_ascii(hex_bytes);\r\n\r\n    println(\"Hash from ASCII string bytes (including '0x' prefix):\");\r\n    println(keccak256(hex_string_bytes, 132));\r\n\r\n    println(\"Hash from actual hex bytes:\");\r\n    println(keccak256(hex_bytes, 65));\r\n} \r\n\r\n#[test]\r\nfn test_encryption() {\r\n    let alice_signature_nonce_1: [u8; 65] = [\r\n        0x07, 0x2f, 0x3e, 0x1e, 0x23, 0xa2, 0x17, 0xbd, 0xc3, 0xc4, 0x1b, 0x4c, 0x61, 0x35, 0x2b, 0xcc,\r\n        0x78, 0xd8, 0x14, 0x0e, 0xb9, 0x81, 0x0b, 0xd3, 0xd3, 0x60, 0x37, 0xfb, 0x65, 0xc7, 0xaf, 0x40,\r\n        0x6d, 0x4c, 0x37, 0x72, 0xb0, 0xc4, 0xd4, 0xfb, 0x29, 0x8c, 0xec, 0x36, 0xd0, 0x9d, 0x64, 0x6f,\r\n        0xf6, 0xa2, 0x49, 0x71, 0x0e, 0x43, 0xcd, 0xf2, 0x85, 0x6e, 0x5d, 0x4e, 0xfd, 0xbf, 0x7b, 0xd3,\r\n        0x1c\r\n    ];\r\n\r\n    // Derive key from signature\r\n    let key = derive_key_from_signature(alice_signature_nonce_1);\r\n    println(\"Derived key:\");\r\n    println(key);\r\n\r\n    // Create IV\r\n    let iv = [0, 0, 0, 0];\r\n\r\n    // Create fields array with value 100\r\n    let original_value = 100;\r\n    let fields = [original_value, 0, 0, 0, 0, 0, 0, 0];\r\n    println(\"Fields before encryption:\");\r\n    println(fields);\r\n\r\n    // Encrypt the fields\r\n    let encrypted_fields = enc::encrypt(fields, key, iv);\r\n    println(\"Encrypted field [0]\");\r\n    println(encrypted_fields[0]);\r\n    // Decrypt the first encrypted field\r\n    \r\n    let mock_encrypted_field: Field = 0x2eeabfd4c857e8331ed5eb0f233289420796d442d022d4bdae600f7909d6a356;\r\n    \r\n    let decrypted_value = decrypt_balance(alice_signature_nonce_1, mock_encrypted_field);\r\n    println(\"Decrypted value:\");\r\n    println(decrypted_value);\r\n\r\n    // Assert that the decrypted value matches the original\r\n    assert(decrypted_value == original_value);\r\n} ","path":"/home/drone/projects/rione/circuits/main/gazometer_users/alice_receipt/src/main.nr"},"63":{"source":"use crate::account::{MAX_ACCOUNT_DEPTH_NO_LEAF_M, MAX_ACCOUNT_LEAF_LEN, MAX_ACCOUNT_STATE_LEN};\nuse crate::header::{BlockHeaderPartial, get_header};\nuse crate::merkle_patricia_proofs::proof::ProofInput;\nuse crate::misc::{\n    bytes::right_pad,\n    fragment::Fragment,\n    types::{Address, Bytes32, BYTES32_LENGTH, HASH_LEN},\n};\nuse crate::rlp::decode::decode_string;\nuse crate::serde::Serde;\nuse crate::verifiers::account::verify_account;\nuse crate::verifiers::storage::{verify_storage_values, verify_storage_values_against_block};\n\nuse dep::std::hash::keccak256;\n\nglobal MAX_KEY_LEN: u32 = 32;\nglobal MAX_PREFIXED_KEY_NIBBLE_LEN: u32 = 66; // (MAX_KEY_LEN + 1) * 2\nglobal MAX_STORAGE_DEPTH_NO_LEAF_M: u32 = 6; // Emperically correct values to be determined after we scan ethereum state trie.\n\nglobal MAX_STORAGE_VALUE_LEN: u32 = 32; // Values taken from storageProofConfig in storage.ts.\nglobal MAX_STORAGE_LEAF_LEN: u32 = 69;\n\npub struct Account {\n    pub nonce: u64,\n    pub balance: Field,\n    pub storage_root: Bytes32,\n    pub code_hash: Bytes32,\n}\n\nimpl Eq for Account {\n    fn eq(self, other: Self) -> bool {\n        (self.nonce == other.nonce)\n            & (self.balance == other.balance)\n            & (self.storage_root == other.storage_root)\n            & (self.code_hash == other.code_hash)\n    }\n}\n\n// For now oracle does not support returning array of arrays so at the moment we support only one storage proof.\n// When https://github.com/noir-lang/noir/issues/4498 is resolved we can change to `StateAndStorageProof<N>` and `storage_proof: [StorageProof; N]`.\nstruct StateAndStorageProofInput {\n    account: Account,\n    state_proof_input: ProofInput<MAX_PREFIXED_KEY_NIBBLE_LEN, MAX_ACCOUNT_STATE_LEN, MAX_ACCOUNT_DEPTH_NO_LEAF_M, MAX_ACCOUNT_LEAF_LEN>,\n    storage_proof_input: ProofInput<MAX_PREFIXED_KEY_NIBBLE_LEN, MAX_STORAGE_VALUE_LEN, MAX_STORAGE_DEPTH_NO_LEAF_M, MAX_STORAGE_LEAF_LEN>,\n}\n\npub struct StorageWithinBlock<let N: u32> {\n    pub block_hash: Bytes32,\n    pub account: Account,\n    pub values: [Bytes32; N],\n}\n\ntype ProofInputSerialized<let LEN: u32> = [Field; LEN];\n\nimpl Eq for StorageWithinBlock<1> {\n    fn eq(self, other: Self) -> bool {\n        (self.block_hash == other.block_hash)\n            & (self.account == other.account)\n            & (self.values[0] == other.values[0])\n    }\n}\n\nfn assert_storage_key_equals(\n    storage_key: Bytes32,\n    storage_key_hash: [u8; MAX_PREFIXED_KEY_NIBBLE_LEN],\n) {\n    let storage_key_hash_fragment = Fragment::new(\n        MAX_PREFIXED_KEY_NIBBLE_LEN - HASH_LEN,\n        HASH_LEN,\n        storage_key_hash,\n    );\n    let other_storage_key_hash_fragment =\n        Fragment::from_array(keccak256(storage_key, BYTES32_LENGTH as u32));\n    assert(\n        storage_key_hash_fragment.eq(other_storage_key_hash_fragment),\n        \"Storage key does not match the argument\",\n    );\n}\n\nfn get_fragment<let N: u32>(left_padded_value: [u8; N]) -> Fragment<N, u8> {\n    let value_len = right_pad(left_padded_value).len();\n    let value_offset = N - value_len;\n    Fragment::new(value_offset, value_len, left_padded_value)\n}\n\nfn get_storage_value(\n    rlp_encoded_value: [u8; MAX_STORAGE_VALUE_LEN],\n) -> [u8; MAX_STORAGE_VALUE_LEN] {\n    let mut storage_value = get_fragment(rlp_encoded_value);\n    let rlp_fragment = decode_string(storage_value);\n    let rlp_header_len = rlp_fragment.offset;\n\n    // Storage value is maximum 32 bytes long, so its RLP-encoding's header is maximum 1 byte long.\n    assert(rlp_header_len <= 1, \"Expected RLP header to be maximum 1 byte long\");\n    if rlp_fragment.offset == 1 {\n        let rlp_header_position = storage_value.offset;\n        storage_value.data[rlp_header_position] = 0;\n    }\n\n    storage_value.data\n}\n\nunconstrained pub fn get_account_with_storage(\n    chain_id: Field,\n    block_number: u64,\n    address: Address,\n    storage_key: Bytes32,\n) -> StorageWithinBlock<1> {\n    let BlockHeaderPartial { number, hash, state_root, transactions_root: _, receipts_root: _ } =\n        unsafe { get_header(chain_id, block_number) };\n    \n    // Explicitly verify that the header is for the requested block number\n    assert(number == block_number, \"Header block number does not match requested block number\");\n    let StateAndStorageProofInput { account, state_proof_input, storage_proof_input } =\n        unsafe { get_proof_unconstrained(chain_id, block_number, address, storage_key) };\n    \n    verify_account(address, account, state_proof_input, state_root);\n\n    // Use the more robust verification against block\n \n    verify_storage_values_against_block(\n        chain_id,\n        block_number,\n        [storage_proof_input],\n        account.storage_root\n    );\n    \n    //assert_storage_key_equals(storage_key, storage_proof_input.key);\n  \n    StorageWithinBlock {\n        block_hash: hash,\n        account,\n        values: [get_storage_value(storage_proof_input.value)],\n    }\n}\n\npub fn verify_storage_proof_at_block_number(\n    chain_id: Field,\n    block_number: u64,\n    address: Address,\n    storage_key: Bytes32,\n    expected_value: Bytes32\n) -> bool {\n    // Get the block header to verify block number\n    let BlockHeaderPartial { number, hash, state_root, transactions_root: _, receipts_root: _ } =\n        unsafe { get_header(chain_id, block_number) };\n    \n    // Explicitly verify that the header is for the requested block number\n    assert(number == block_number, \"Header block number does not match requested block number\");\n \n    // Get the proof data from the oracle\n    let StateAndStorageProofInput { account, state_proof_input, storage_proof_input } =\n        unsafe { get_proof_unconstrained(chain_id, block_number, address, storage_key) };\n    \n    // Verify the account against the state root from the block header\n    verify_account(address, account, state_proof_input, state_root);\n    // Verify the storage proof against the account's storage root\n    verify_storage_values_against_block(\n        chain_id,\n        block_number,\n        [storage_proof_input],\n        account.storage_root\n    );\n\n    // Verify the storage key matches what was requested\n    assert_storage_key_equals(storage_key, storage_proof_input.key);\n    \n    // Decode the RLP-encoded value from the proof\n    let actual_value = get_storage_value(storage_proof_input.value);\n    \n    // Check if the value matches the expected value\n    actual_value == expected_value\n}\n\n#[oracle(get_proof)]\nunconstrained fn get_proof_oracle<let STATE_PROOF_INPUT_LEN: u32, let STORAGE_PROOF_INPUT: u32>(\n    _chain_id: Field,\n    _block_no: u64,\n    _address: Address,\n    _storage_key: Bytes32,\n    ) -> (Account, ProofInputSerialized<STATE_PROOF_INPUT_LEN>, ProofInputSerialized<STORAGE_PROOF_INPUT>) {}\n\nunconstrained fn get_proof_unconstrained(\n    chain_id: Field,\n    block_no: u64,\n    address: Address,\n    storage_key: Bytes32,\n) -> StateAndStorageProofInput {\n    let (account, state_proof_input, storage_proof_input) =\n        unsafe { get_proof_oracle(chain_id, block_no, address, storage_key) };\n    \n    let state_proof_input = unsafe { Serde::deserialize(state_proof_input) };\n    \n    let storage_proof_input = unsafe { Serde::deserialize(storage_proof_input) };\n    StateAndStorageProofInput { account, state_proof_input, storage_proof_input }\n}","path":"/home/drone/projects/rione/circuits/ethereum/circuits/lib/src/account_with_storage.nr"},"69":{"source":"use crate::misc::types::Bytes32;\nuse crate::verifiers::header::verify_header;\nuse crate::misc::{fragment::Fragment, types::{BYTES32_LENGTH, ADDRESS_LENGTH, Address}};\nuse crate::uint256::U256;\nuse crate::merkle_patricia_proofs::proof::{ProofInput, Proof, Node, Leaf, MAX_NODE_LEN};\nuse crate::rlp::types::RlpFragment;\nuse dep::std::mem::zeroed;\n\nglobal MAX_HEADER_RLP_LEN: u32 = 708;\n\npub struct BlockHeaderPartial {\n    pub number: u64,\n    pub hash: Bytes32,\n    pub state_root: Bytes32,\n    pub transactions_root: Bytes32,\n    pub receipts_root: Bytes32,\n}\n\npub type BlockHeaderRlp = BoundedVec<u8, MAX_HEADER_RLP_LEN>;\n\npub fn get_header(chain_id: Field, block_number: u64) -> BlockHeaderPartial {\n    let (block_header_partial, block_header_rlp) = unsafe { get_header_unconstrained(chain_id, block_number) };\n    verify_header(chain_id, block_header_partial, block_header_rlp);\n    assert(block_header_partial.number == block_number, \"Block number does not match the argument\");\n    block_header_partial\n}\n\n#[oracle(get_header)]\nunconstrained fn get_header_oracle(_chain_id: Field, _block_no: u64) -> (BlockHeaderPartial, BlockHeaderRlp) {}\n\nunconstrained fn get_header_unconstrained(chain_id: Field, block_no: u64) -> (BlockHeaderPartial, BlockHeaderRlp) {\n    unsafe { get_header_oracle(chain_id, block_no) }\n}\n\nfn alter_array(bytes: [Field; 32]) -> [u8; 32] {\n    let mut result: [u8; 32] = zeroed();\n    for i in 0..32 {\n        result[i] = bytes[i] as u8;\n    }\n    result\n}\n","path":"/home/drone/projects/rione/circuits/ethereum/circuits/lib/src/header.nr"},"72":{"source":"use crate::rlp::types::RlpList;\nuse crate::rlp::decode::{decode_to_rlp_header, decode_list_of_small_strings, decode_list};\nuse crate::misc::{\n    fragment::Fragment, arrays::{sub_array_equals_up_to_length, memcpy_up_to_length},\n    types::{Hash, HASH_LEN}, bytes::{bytes_to_nibbles, byte_to_nibbles, right_pad}\n};\nuse dep::std::hash::keccak256;\n\nglobal MAX_NODE_LEN: u32 = 532;\nglobal MAX_NODE_FIELDS: u32 = 17;\nglobal BRANCH_NODE_NUM_FIELDS: u32 = 17;\nglobal EXTENSION_NODE_NUM_FIELDS: u32 = 2;\nglobal EVEN: u32 = 0;\nglobal ODD: u32 = 1;\n\npub type Node = [u8; MAX_NODE_LEN];\npub type Leaf<let MAX_LEAF_LEN: u32> = [u8; MAX_LEAF_LEN];\npub type Key<let MAX_PREFIXED_KEY_NIBBLE_LEN: u32> = [u8; MAX_PREFIXED_KEY_NIBBLE_LEN];\npub type Value<let MAX_VALUE_LEN: u32> = [u8; MAX_VALUE_LEN];\n\npub struct Proof<let MAX_DEPTH_NO_LEAF: u32, let MAX_LEAF_LEN: u32> {\n\tpub nodes: [Node; MAX_DEPTH_NO_LEAF],\n    // Leaf has a different max length than internal node as it contains the value of arbitrary length.\n\tpub leaf: Leaf<MAX_LEAF_LEN>,\n\tpub depth: u64\n}\n\npub struct ProofInput<let MAX_PREFIXED_KEY_NIBBLE_LEN: u32, let MAX_VALUE_LEN: u32, let MAX_DEPTH_NO_LEAF: u32, let MAX_LEAF_LEN: u32> {\n    pub key: Key<MAX_PREFIXED_KEY_NIBBLE_LEN>,\n    pub value: Value<MAX_VALUE_LEN>,\n    pub proof: Proof<MAX_DEPTH_NO_LEAF, MAX_LEAF_LEN>\n}\n\nimpl<let MAX_DEPTH_NO_LEAF: u32, let MAX_LEAF_LEN: u32> Eq for Proof<MAX_DEPTH_NO_LEAF, MAX_LEAF_LEN> {\n    fn eq(self, other: Self) -> bool {\n        (self.depth == other.depth) & (self.nodes == other.nodes) & (self.leaf == other.leaf)\n    }\n}\n\nimpl<let MAX_PREFIXED_KEY_NIBBLE_LEN: u32, let MAX_VALUE_LEN: u32, let MAX_DEPTH_NO_LEAF: u32, let MAX_LEAF_LEN: u32> Eq for ProofInput<MAX_PREFIXED_KEY_NIBBLE_LEN, MAX_VALUE_LEN, MAX_DEPTH_NO_LEAF, MAX_LEAF_LEN> {\n    fn eq(self, other: Self) -> bool {\n        (self.key == other.key) & (self.value == other.value) & (self.proof == other.proof)\n    }\n}\n\npub fn get_node_len<let MAX_LEN: u32>(node: [u8; MAX_LEN]) -> u32 {\n    let node_rlp_header = decode_to_rlp_header(Fragment::from_array(node));\n    let node_unpadded_len = node_rlp_header.offset + node_rlp_header.length;\n    assert(node_unpadded_len <= MAX_LEN, \"Node RLP length exceeds MAX_LEN\");\n\n    node_unpadded_len\n}\n\n// Prefixes mean:\n// 0 - Extension node, even number of nibbles\n// 1 - Extension node, odd number of nibbles\n// 2 - Leaf node, even number of nibbles\n// 3 - Leaf node, odd number of nibbles\npub fn parity(prefix: u8) -> u32 {\n    assert(prefix < 4, \"Prefix must be 0, 1, 2 or 3\");\n    (prefix % 2) as u32\n}\n\n// Leaf and extension nodes are RLP lists with 2 elements: prefixed key nibbles (in bytes) and value.\n// This function removes the prefix and returns appropriate number of key nibbles according to the parity of the prefix (see function: parity).\npub fn strip_prefix<let MAX_PREFIXED_KEY_NIBBLE_LEN: u32>(prefixed_key_bytes: Fragment<MAX_PREFIXED_KEY_NIBBLE_LEN, u8>) -> Fragment<MAX_PREFIXED_KEY_NIBBLE_LEN, u8> {\n    let mut prefixed_key_nibbles = bytes_to_nibbles(prefixed_key_bytes);\n\n    let prefix = prefixed_key_nibbles.pop_front();\n    let parity = parity(prefix);\n    if (parity == EVEN) {\n        assert(prefixed_key_nibbles.pop_front() == 0, \"Expected a zero after a prefix of even parity\");\n    }\n\n    prefixed_key_nibbles\n}\n\npub fn extract_hash_from_branch_node<let MAX_PREFIXED_KEY_NIBBLE_LEN: u32>(\n    node: Node,\n    node_rlp_list: RlpList<MAX_NODE_FIELDS>,\n    key_nibbles: Fragment<MAX_PREFIXED_KEY_NIBBLE_LEN, u8>,\n    key_ptr: &mut u32\n) -> Fragment<HASH_LEN, u8> {\n    let curr_nibble = key_nibbles.at(*key_ptr) as u32;\n    assert(\n        node_rlp_list.get(curr_nibble).length == HASH_LEN, \"Expected a hash at position given by the key nibble\"\n    );\n    *key_ptr += 1;\n\n    Fragment::new(node_rlp_list.get(curr_nibble).offset, HASH_LEN, node).focus()\n}\n\npub fn extract_hash_from_extension_node<let MAX_PREFIXED_KEY_NIBBLE_LEN: u32>(\n    node: Node,\n    node_rlp_list: RlpList<MAX_NODE_FIELDS>,\n    key_nibbles: Fragment<MAX_PREFIXED_KEY_NIBBLE_LEN, u8>,\n    key_ptr: &mut u32\n) -> Fragment<HASH_LEN, u8> {\n    let prefixed_extension_key_part: Fragment<MAX_PREFIXED_KEY_NIBBLE_LEN, u8> = Fragment::new(node_rlp_list.get(0).offset, node_rlp_list.get(0).length, node).focus();\n\n    let (prefix, _) = byte_to_nibbles(prefixed_extension_key_part.at(0));\n    assert((prefix == 0) | (prefix == 1), \"Extension parity prefix must be 0 or 1\");\n    let extension_key_part = strip_prefix(prefixed_extension_key_part); // Extension nodes have a prefix that needs to be removed.\n    let curr_key_nibbles_part = key_nibbles.subfragment(*key_ptr, extension_key_part.length);\n    assert(\n        extension_key_part == curr_key_nibbles_part, \"Extension key part does not correspond to given key nibbles\"\n    );\n    assert(node_rlp_list.get(1).length == HASH_LEN, \"Expected a hash at the end of the extension node\");\n    *key_ptr += extension_key_part.length;\n\n    Fragment::new(node_rlp_list.get(1).offset, HASH_LEN, node).focus()\n}\n\npub fn extract_hash<let MAX_PREFIXED_KEY_NIBBLE_LEN: u32>(\n    node: Node,\n    key_nibbles: Fragment<MAX_PREFIXED_KEY_NIBBLE_LEN, u8>,\n    key_ptr: &mut u32\n) -> Fragment<HASH_LEN, u8> {\n    let mut hash = Fragment::from_array([0; HASH_LEN]);\n    let node_rlp_list: RlpList<MAX_NODE_FIELDS> = decode_list_of_small_strings(Fragment::from_array(node));\n\n    if (node_rlp_list.len == BRANCH_NODE_NUM_FIELDS) {\n        hash = extract_hash_from_branch_node(node, node_rlp_list, key_nibbles, key_ptr);\n    } else if (node_rlp_list.len == EXTENSION_NODE_NUM_FIELDS) {\n        hash = extract_hash_from_extension_node(node, node_rlp_list, key_nibbles, key_ptr);\n    } else {\n        assert(false, \"Invalid node type\");\n    }\n\n    hash\n}\n\npub fn verify_node_hash<let MAX_LEN: u32>(node: [u8; MAX_LEN], hash: [u8; HASH_LEN]) {\n    assert(keccak256(node, get_node_len(node) as u32) == hash, \"Invalid node hash\");\n}\n\npub fn verify_leaf<let MAX_LEAF_LEN: u32, let MAX_PREFIXED_KEY_NIBBLE_LEN: u32, let MAX_VALUE_LEN: u32>(\n    leaf: Leaf<MAX_LEAF_LEN>,\n    key_nibbles: Fragment<MAX_PREFIXED_KEY_NIBBLE_LEN, u8>,\n    key_ptr: &mut u32,\n    value: Value<MAX_VALUE_LEN>\n) {\n    let leaf_rlp_list: RlpList<2> = decode_list(Fragment::from_array(leaf));\n    assert(leaf_rlp_list.len == 2, \"Leaf expected to have 2 fields\");\n\n    let prefixed_leaf_key_part: Fragment<MAX_PREFIXED_KEY_NIBBLE_LEN, u8> = Fragment::new(leaf_rlp_list.get(0).offset, leaf_rlp_list.get(0).length, leaf).focus();\n\n    let (prefix, _) = byte_to_nibbles(prefixed_leaf_key_part.at(0));\n    assert((prefix == 2) | (prefix == 3), \"Leaf parity prefix must be 2 or 3\");\n    let leaf_key_part = strip_prefix(prefixed_leaf_key_part);\n    let left_key_ending = key_nibbles.subfragment(*key_ptr, leaf_key_part.length);\n    assert(leaf_key_part == left_key_ending, \"Key mismatch in the leaf\");\n    *key_ptr += leaf_key_part.length;\n    assert(*key_ptr == key_nibbles.length, \"Expected to consume all key nibbles\");\n\n    let value = right_pad(value);\n    let value_rlp_fragment = leaf_rlp_list.get(1);\n    // Verify that extracted value matches the expected value.\n    assert(value_rlp_fragment.length == value.len, \"Value length mismatch\");\n    assert(\n        sub_array_equals_up_to_length(\n            value.storage,\n            leaf,\n            value_rlp_fragment.offset,\n            value_rlp_fragment.length\n        ), \"Value mismatch\"\n    );\n}\n\npub fn verify_merkle_proof<let MAX_PREFIXED_KEY_NIBBLE_LEN: u32, let MAX_VALUE_LEN: u32, let MAX_DEPTH: u32, let MAX_LEAF_LEN: u32>(\n    key: Key<MAX_PREFIXED_KEY_NIBBLE_LEN>,\n    value: Value<MAX_VALUE_LEN>,\n    root: Hash,\n    proof: Proof<MAX_DEPTH, MAX_LEAF_LEN>\n) {\n    let key = right_pad(key);\n    let key_nibbles = bytes_to_nibbles(Fragment::from_vec(key));\n    let mut key_ptr = 0;\n\n    // Verify hashes of all the nodes in the proof path.\n    let mut curr_hash = Fragment::from_array(root);\n    for i in 0..MAX_DEPTH {    \n        // Handle the case where proof.depth is 0 by using a conditional\n        // that avoids subtraction when depth is 0\n        let should_process = (proof.depth > 0) & (i as u64 + 1 < proof.depth);\n        if should_process {\n            verify_node_hash(proof.nodes[i], curr_hash.data);\n            curr_hash = extract_hash(proof.nodes[i], key_nibbles, &mut key_ptr);\n        }\n    }\n    \n    // Only verify the leaf if proof.depth is greater than 0\n    if proof.depth > 0 {\n        verify_node_hash(proof.leaf, curr_hash.data);\n        verify_leaf(proof.leaf, key_nibbles, &mut key_ptr, value);\n    }\n}\n","path":"/home/drone/projects/rione/circuits/ethereum/circuits/lib/src/merkle_patricia_proofs/proof.nr"},"74":{"source":"use dep::std::{mem::zeroed, wrapping_add};\nuse crate::misc::fragment::Fragment;\n\npub fn alter_array<let ARRAY_LEN: u32>(array: [u8; ARRAY_LEN]) -> [u8; ARRAY_LEN] {\n    let mut copy = array.map(|x| x);\n    copy[0] = wrapping_add(copy[0], 1);\n    copy\n}\n\npub fn alter_fragment<let MAX_LEN: u32>(fragment: Fragment<MAX_LEN, u8>) -> Fragment<MAX_LEN, u8> {\n    let mut copy = fragment;\n    copy.set(0, wrapping_add(copy.at(0), 1));\n    copy\n}\n\npub fn field_to_u8_array<let ARRAY_LEN: u32>(array: [Field; ARRAY_LEN]) -> [u8; ARRAY_LEN] {\n    let mut result: [u8; ARRAY_LEN] = zeroed();\n    for i in 0..ARRAY_LEN {\n        result[i] = array[i] as u8;\n    }\n    result\n}\n\npub fn u8_to_field_array<let ARRAY_LEN: u32>(array: [u8; ARRAY_LEN]) -> [Field; ARRAY_LEN] {\n    let mut result: [Field; ARRAY_LEN] = zeroed();\n    for i in 0..ARRAY_LEN {\n        result[i] = array[i] as Field;\n    }\n    result\n}\n\npub fn resize<TItem, let NEW_LEN: u32, let OLD_LEN: u32>(src: [TItem; OLD_LEN]) -> [TItem; NEW_LEN] {\n    assert(NEW_LEN >= OLD_LEN, \"New length must be greater than or equal to old length\");\n    let mut dest = [zeroed(); NEW_LEN];\n    for i in 0..OLD_LEN {\n        dest[i] = src[i];\n    }\n    dest\n}\n\npub(crate) fn memcpy_up_to_length<TItem, let SRC_LEN: u32, let DEST_LEN: u32>(dest: &mut [TItem; DEST_LEN], src: [TItem; SRC_LEN], offset: u32, length: u32) {\n    assert(length <= DEST_LEN, \"Destination index out of bound\");\n    assert(offset + length <= SRC_LEN, \"Source index out of bound\");\n    for i in 0..DEST_LEN {\n        if i < length {\n            (*dest)[i] = src[offset + i];\n        }\n    }\n}\n\n// Fills destination array with content of source array starting from the offset in source array.\npub(crate) fn memcpy<TItem, let SRC_LEN: u32, let DEST_LEN: u32>(dest: &mut [TItem; DEST_LEN], src: [TItem; SRC_LEN], offset: u32) {\n    memcpy_up_to_length(dest, src, offset, DEST_LEN);\n}\n\npub fn subarray_inferred_len<TItem, let SRC_LEN: u32, let DEST_LEN: u32>(src: [TItem; SRC_LEN], offset: u32) -> [TItem; DEST_LEN] {\n    let mut dest = [zeroed(); DEST_LEN];\n    memcpy(&mut dest, src, offset);\n    dest\n}\n\npub fn sub_array_equals_up_to_length<TItem, let SUBARRAY_LEN: u32, let ARRAY_LEN: u32>(\n    subarray: [TItem; SUBARRAY_LEN],\n    array: [TItem; ARRAY_LEN],\n    offset: u32,\n    length: u32\n) -> bool where TItem: Eq {\n    assert(length <= SUBARRAY_LEN, \"Subarray index out of bound\");\n    assert(offset + length <= ARRAY_LEN, \"Array index out of bound\");\n    let mut result = true;\n    for i in 0..SUBARRAY_LEN {\n        if i < length {\n            result &= subarray[i] == array[offset + i];\n        }\n    }\n    result\n}\n\npub fn sub_array_equals<TItem, let SUBARRAY_LEN: u32, let ARRAY_LEN: u32>(\n    subarray: [TItem; SUBARRAY_LEN],\n    array: [TItem; ARRAY_LEN],\n    offset: u32\n) -> bool where TItem: Eq {\n    assert(offset + SUBARRAY_LEN <= ARRAY_LEN, \"Array index out of bound\");\n    let mut result = true;\n    for i in 0..SUBARRAY_LEN {\n        result &= subarray[i] == array[offset + i];\n    }\n    result\n}\n","path":"/home/drone/projects/rione/circuits/ethereum/circuits/lib/src/misc/arrays.nr"},"78":{"source":"use crate::misc::fragment::Fragment;\n\npub fn byte_to_nibbles(byte: u8) -> (u8, u8) {\n    let upper = byte / 16;\n    let lower = byte - 16 * upper;\n\n    (upper, lower)\n}\n\npub fn bytes_to_nibbles<let MAX_NIBBLE_LEN: u32>(bytes: Fragment<MAX_NIBBLE_LEN, u8>) -> Fragment<MAX_NIBBLE_LEN, u8> {\n    assert(\n        MAX_NIBBLE_LEN >= 2 * bytes.length, \"Bytes implicit data length must be at least 2 times larger than bytes explicit length\"\n    );\n\n    let nibbles = &mut Fragment::new_with_length(2 * bytes.length, [0; MAX_NIBBLE_LEN]);\n    bytes.each(\n        |byte, i| {\n        let (hi, lo) = byte_to_nibbles(byte);\n\n        nibbles.set(2 * i, hi);\n        nibbles.set(2 * i + 1, lo);\n    }\n    );\n\n    *nibbles\n}\n\npub fn nibbles_to_byte(upper: u8, lower: u8) -> u8 {\n    assert(upper < 16, \"Nibble value must be less than 16\");\n    assert(lower < 16, \"Nibble value must be less than 16\");\n\n    upper * 16 + lower\n}\n\npub fn nibbles_to_bytes<let BYTES_LEN: u32, let NIB_LEN: u32>(nibbles: [u8; NIB_LEN]) -> [u8; BYTES_LEN] {\n    assert(NIB_LEN == 2 * BYTES_LEN, \"Generic arguments don't match\");\n\n    let mut bytes = [0; BYTES_LEN];\n\n    for i in 0..NIB_LEN / 2 {\n        let byte = nibbles_to_byte(nibbles[2 * i], nibbles[2 * i + 1]);\n        bytes[i] = byte;\n    }\n\n    bytes\n}\n\npub fn right_pad<let N: u32>(arr: [u8; N]) -> BoundedVec<u8, N> {\n    byte_value(arr)\n}\n\npub fn left_to_right_padding<let N: u32>(nibbles: [u8; N]) -> ([u8; N], u32) {\n    let mut BoundedVec {storage: shifted, len} = right_pad(nibbles);\n    if (len % 2 == 1) {\n        shift_right_by_one(&mut shifted);\n        len += 1;\n    }\n\n    let shifted_by = N - len;\n    (shifted, shifted_by)\n}\n\npub fn shift_right_by_one<let N: u32>(arr: &mut [u8; N]) {\n    assert(arr[N - 1] == 0, \"Last element must be zero to shift the array right by one\");\n\n    let mut last = 0;\n    for i in 0..N {\n        let tmp = (*arr)[i];\n        (*arr)[i] = last;\n        last = tmp;\n    }\n}\n\npub(crate) fn left_byte_shift<let N: u32>(input: [u8; N], n: u32) -> [u8; N] {\n    let mut out = [0; N];\n\n    for i in 0..N {\n        let index_ind = (((i + n) as u32) < (N as u32)) as u32;\n        out[i] = (index_ind as u8) * input[index_ind * (i + n)];\n    }\n\n    out\n}\n\n// Converts big-endian byte array to a right-padded one.\npub(crate) fn byte_value<let N: u32>(in_value: [u8; N]) -> BoundedVec<u8, N> {\n    let mut value_length = 0;\n\n    for i in 0..N {\n        let num_bytes_ind = (value_length == 0) as u32;\n        let byte_ind = (in_value[i] != 0) as u32;\n        value_length = num_bytes_ind * byte_ind * (N - i) + (1 - num_bytes_ind) * value_length;\n    }\n\n    let value = left_byte_shift(in_value, N - value_length);\n\n    BoundedVec { storage: value, len: value_length }\n}\n\npub fn add_bigint<let N: u32>(left: [u8; N], right: [u8; N]) -> [u8; N] {\n    let mut carry: u32 = 0;\n    let mut result: [u8; N] = [0; N];\n\n    for j in 0..N {\n        let index = N - j - 1;\n        let sum = left[index] as u32 + right[index] as u32 + carry;\n        result[index] = sum as u8;\n        carry = sum >> 8;\n    }\n\n    assert(carry == 0, \"Addition overflow\");\n\n    result\n}\n","path":"/home/drone/projects/rione/circuits/ethereum/circuits/lib/src/misc/bytes.nr"},"82":{"source":"use crate::misc::{arrays::{memcpy_up_to_length, resize}, iterator::Iterator};\nuse dep::std::mem::zeroed;\n\npub struct Fragment<let MAX_DATA_LEN: u32, T> {\n    pub offset: u32,\n    pub length: u32,\n    pub data: [T; MAX_DATA_LEN]\n}\n\nimpl<let MAX_DATA_LEN: u32, T> Fragment<MAX_DATA_LEN, T> {\n    pub fn empty() -> Fragment<MAX_DATA_LEN, T> {\n        Fragment { offset: 0, length: 0, data: std::mem::zeroed() }\n    }\n\n    pub fn new(offset: u32, length: u32, data: [T; MAX_DATA_LEN]) -> Fragment<MAX_DATA_LEN, T> {\n        assert(offset + length <= data.len(), \"Fragment length exceeds data length\");\n\n        Fragment { offset, length, data }\n    }\n\n    pub fn new_with_length(length: u32, data: [T; MAX_DATA_LEN]) -> Fragment<MAX_DATA_LEN, T> {\n        assert(length <= data.len(), \"Fragment length exceeds data length\");\n\n        Fragment { offset: 0, length, data }\n    }\n\n    pub fn from_array(data: [T; MAX_DATA_LEN]) -> Fragment<MAX_DATA_LEN, T> {\n        Fragment { offset: 0, length: data.len(), data }\n    }\n\n    pub fn from_array_resize<let DATA_LEN: u32>(data: [T; DATA_LEN]) -> Fragment<MAX_DATA_LEN, T> {\n        Fragment { offset: 0, length: data.len(), data: resize(data) }\n    }\n\n    pub fn to_array<let NEW_MAX_LEN: u32>(self) -> [T; NEW_MAX_LEN] {\n        self.focus().data\n    }\n\n    pub fn to_bounded_vec<let N: u32>(self) -> BoundedVec<T, N> {\n        assert(self.length <= N, \"Fragment length exceeds BoundedVec max length\");\n        let bounded_vec: &mut BoundedVec<T, N> = &mut BoundedVec::new();\n        self.each(|x, _| bounded_vec.push(x));\n\n        *bounded_vec\n    }\n\n    pub fn from_vec(vec: BoundedVec<T, MAX_DATA_LEN>) -> Fragment<MAX_DATA_LEN, T> {\n        Fragment::new_with_length(vec.len, vec.storage)\n    }\n\n    pub fn focus<let NEW_MAX_LEN: u32>(self) -> Fragment<NEW_MAX_LEN, T> {\n        assert(NEW_MAX_LEN >= self.length, \"New max length is smaller than fragment length\");\n\n        let mut new_data: [T; NEW_MAX_LEN] = std::mem::zeroed();\n        memcpy_up_to_length(&mut new_data, self.data, self.offset, self.length);\n\n        Fragment { offset: 0, length: self.length, data: new_data }\n    }\n\n    pub fn subfragment(self, offset: u32, length: u32) -> Fragment<MAX_DATA_LEN, T> {\n        assert(offset + length <= self.length, \"Subfragment overflows fragment\");\n\n        Fragment { offset: self.offset + offset, length, data: self.data }\n    }\n\n    pub fn is_empty(self) -> bool {\n        self.length == 0\n    }\n\n    pub fn at(self, index: u32) -> T {\n        assert(index < self.length, \"Index out of bounds\");\n\n        self.data[self.offset + index]\n    }\n\n    pub fn set(&mut self, index: u32, value: T) {\n        let length = self.length;\n        assert(\n            index < self.length, f\"Index out of bounds, tried to set at index {index} but the length is {length}\"\n        );\n\n        self.data[self.offset + index] = value;\n    }\n\n    pub fn pop_front(&mut self) -> T {\n        assert(!self.is_empty(), \"Cannot pop from an empty fragment\");\n        self.offset += 1;\n        self.length -= 1;\n        self.data[self.offset - 1]\n    }\n\n    pub fn pop_front_array<let LEN: u32>(&mut self) -> [T; LEN] {\n        assert(self.length >= LEN, \"Cannot pop array: fragment is too short\");\n        let mut res: [T; LEN] = std::mem::zeroed();\n        res.map(|_| self.pop_front())\n    }\n\n    pub fn pop_back(&mut self) -> T {\n        assert(!self.is_empty(), \"Cannot pop from an empty fragment\");\n        self.length -= 1;\n        self.data[self.offset + self.length]\n    }\n\n    pub fn push_back(&mut self, value: T) {\n        assert(self.offset + self.length + 1 <= MAX_DATA_LEN, \"Cannot push: fragment is full\");\n        self.data[self.offset + self.length] = value;\n        self.length += 1;\n    }\n\n    pub fn extend_back<let LEN: u32>(&mut self, other: [T; LEN]) {\n        for i in 0..LEN {\n            self.push_back(other[i]);\n        }\n    }\n\n    pub fn eq<let OTHER_MAX_DATA_LEN: u32>(self, other: Fragment<OTHER_MAX_DATA_LEN, T>) -> bool where T: Eq {\n        let res = &mut true;\n        if (self.length != other.length) {\n            *res = false;\n        }\n        self.each(\n            |el, i| {\n            if i < other.length {\n                *res &= el == other.at(i);\n            }\n        }\n        );\n\n        *res\n    }\n}\n\nimpl<let MAX_DATA_LEN: u32, T> Eq for Fragment<MAX_DATA_LEN, T> where T: Eq {\n    fn eq(self, other: Fragment<MAX_DATA_LEN, T>) -> bool {\n        let res = &mut true;\n        if self.length != other.length {\n            *res = false;\n        } else {\n            self.each(|el, i| {\n                *res &= el == other.at(i);\n            });\n        };\n\n        *res\n    }\n}\n\nimpl<let MAX_DATA_LEN: u32, T> Iterator<T> for Fragment<MAX_DATA_LEN, T> {\n    fn each<Env>(self, f: fn[Env](T, u32) -> ()) {\n        for i in 0..MAX_DATA_LEN {\n            if i < self.length {\n                f(self.at(i), i);\n            }\n        }\n    }\n}\n","path":"/home/drone/projects/rione/circuits/ethereum/circuits/lib/src/misc/fragment.nr"},"90":{"source":"use dep::std::wrapping_sub;\nuse crate::rlp::types::{RlpList, RlpFragment, RlpHeader, STRING, LIST};\nuse crate::misc::fragment::Fragment;\n\n// Maximum number of bytes required to represent entity length.\n// This means that this library can only decode RLP entities with a length of up to 2^16 - 1 bytes.\nglobal MAX_LEN_IN_BYTES: u32 = 2;\n\npub fn extract_payload_len<let N: u32>(data: Fragment<N, u8>, lenlen: u32) -> u32 {\n    assert(lenlen <= MAX_LEN_IN_BYTES, \"Length of length exceeds maximum\");\n    assert(lenlen <= data.length, \"Length of length exceeds input length\");\n    assert(lenlen != 0, \"Length of length is zero\");\n\n    let mut payload_length = 0;\n\n    for i in 0..MAX_LEN_IN_BYTES {\n        if (i < lenlen & i < data.length) {\n            payload_length = data.at(i) as u32 + payload_length * 256;\n        }\n    }\n\n    payload_length\n}\n\npub fn decode_to_rlp_header<let N: u32>(data: Fragment<N, u8>) -> RlpHeader {\n    let mut data = data;\n    let prefix = data.pop_front();\n\n    if (prefix < 0x80) { // single byte\n        RlpHeader { offset: 0, length: 1, data_type: STRING }\n    } else if (prefix < 0xb8) { // [0, 55] byte string\n        let offset = 1;\n        let length = wrapping_sub(prefix, 0x80) as u32;\n        assert(offset + length <= N, \"Decoded length of short string exceeds input length\");\n\n        RlpHeader { offset, length, data_type: STRING }\n    } else if (prefix < 0xc0) { // > 55 byte string\n        let offset = wrapping_sub(1 + prefix, 0xb7) as u32;\n        let length = extract_payload_len(data, wrapping_sub(prefix, 0xb7) as u32);\n        assert(offset + length <= N, \"Decoded length of long string exceeds input length\");\n\n        RlpHeader { offset, length, data_type: STRING }\n    } else if (prefix < 0xf8) { // [0, 55] byte list\n        let offset = 1;\n        let length = wrapping_sub(prefix, 0xc0) as u32;\n        assert(offset + length <= N, \"Decoded length of short list exceeds input length\");\n\n        RlpHeader { offset, length, data_type: LIST }\n    } else { // > 55 byte list\n        let offset = wrapping_sub(1 + prefix, 0xf7) as u32;\n        let length = extract_payload_len(data, wrapping_sub(prefix, 0xf7) as u32);\n        assert(offset + length <= N, \"Decoded length of long list exceeds input length\");\n\n        RlpHeader { offset, length, data_type: LIST }\n    }\n}\n\npub fn decode_string<let N: u32>(input: Fragment<N, u8>) -> RlpFragment {\n    let mut RlpHeader {offset, length, data_type} = decode_to_rlp_header(input);\n    let total_len = length + offset;\n    assert(total_len <= input.length, \"Total length exceeds input length\");\n\n    RlpFragment { offset, length, data_type: STRING }\n}\n\n// Strings are decoded and offsets point to the start of raw values, while list offsets point to the start of the RLP header.\npub fn decode_list<let N: u32, let MAX_FIELDS: u32>(data: Fragment<N, u8>) -> RlpList<MAX_FIELDS> {\n    let mut rlp_list: RlpList<MAX_FIELDS> = BoundedVec::new();\n\n    let RlpHeader {offset, length, data_type} = decode_to_rlp_header(data);\n    assert(data_type == LIST, \"Expected a list\");\n\n    let total_len = length + offset;\n    assert(total_len <= data.length, \"Total length exceeds input length\");\n\n    let mut current_offset = offset;\n    for _ in 0..MAX_FIELDS {\n        if (current_offset < total_len) {\n            let header: Fragment<N, u8> = data.subfragment(current_offset, data.length - current_offset);\n\n            let RlpHeader {offset: field_off, length: field_len, data_type: field_type} = decode_to_rlp_header(header);\n\n            let mut offset = current_offset;\n            let mut length = field_len;\n            if (field_type == STRING) {\n                offset += field_off;\n            } else {\n                length += field_off;\n            }\n\n            rlp_list.push(RlpFragment { offset, length, data_type: field_type });\n\n            current_offset += field_off + field_len;\n        }\n    }\n    assert(current_offset == total_len, \"Inconsistent rlp length\");\n\n    rlp_list\n}\n\n// The version of decode_list that is cheaper to call, but only works for lists of small strings (<= 55 bytes).\npub fn decode_list_of_small_strings<let N: u32, let NUM_FIELDS: u32>(data: Fragment<N, u8>) -> RlpList<NUM_FIELDS> {\n    let mut rlp_list: RlpList<NUM_FIELDS> = BoundedVec::new();\n\n    let RlpHeader {offset, length, data_type} = decode_to_rlp_header(data);\n    assert(data_type == LIST, \"Expected a list\");\n\n    let total_len = length + offset;\n    assert(total_len <= data.length, \"Total length exceeds input length\");\n\n    let mut current_offset = offset;\n    for _ in 0..NUM_FIELDS {\n        if (current_offset < total_len) {\n            let first_byte = data.at(current_offset);\n\n            let (field_off, field_len) = get_small_string_offset_and_length(first_byte);\n            rlp_list.push(RlpFragment { offset: current_offset + field_off, length: field_len, data_type: STRING });\n\n            current_offset += field_off + field_len;\n        }\n    }\n    assert(current_offset == total_len, \"Inconsistent rlp length\");\n\n    rlp_list\n}\n\npub fn get_small_string_offset_and_length(first_byte: u8) -> (u32, u32) {\n    assert(first_byte < 0xb8, \"Element is not a string of length < 56 bytes\");\n\n    if (first_byte < 0x80) {\n        (0, 1)\n    } else {\n        (1, wrapping_sub(first_byte as u32, 0x80))\n    }\n}\n","path":"/home/drone/projects/rione/circuits/ethereum/circuits/lib/src/rlp/decode.nr"},"91":{"source":"use crate::misc::{arrays::sub_array_equals_up_to_length, fragment::Fragment};\nuse crate::misc::bytes::byte_value;\nuse crate::misc::types::{Address, ADDRESS_LENGTH, Bytes32, BYTES32_LENGTH};\nuse dep::u2b::{u32_to_u8, u64_to_u8};\n\n// Enum for RLP data type\nglobal STRING: u32 = 0;\nglobal LIST: u32 = 1;\n\npub type RlpList<let MAX_FIELDS: u32> = BoundedVec<RlpFragment, MAX_FIELDS>;\n\npub struct RlpHeader {\n    pub offset: u32,\n    pub length: u32,\n    pub data_type: u32,\n}\n\nimpl Eq for RlpHeader {\n    fn eq(self, other: Self) -> bool {\n        (self.offset == other.offset)\n            & (self.length == other.length)\n            & (self.data_type == other.data_type)\n    }\n}\n\npub struct RlpFragment {\n    pub offset: u32,\n    pub length: u32,\n    pub data_type: u32,\n}\n\nimpl RlpFragment {\n    pub fn assert_eq_bytes<let FIELD_NAME_LEN: u32, let MAX_RLP_LEN: u32, let MAX_VALUE_LEN: u32>(\n        self,\n        field_name: str<FIELD_NAME_LEN>,\n        rlp: Fragment<MAX_RLP_LEN, u8>,\n        value: Fragment<MAX_VALUE_LEN, u8>,\n    ) {\n        assert(self.data_type == STRING, f\"{field_name}: Invalid RLP type\");\n        assert(self.length == value.length, f\"{field_name}: Invalid RLP length\");\n        assert(\n            rlp.subfragment(self.offset, self.length).eq(value),\n            f\"{field_name}: Invalid RLP value\",\n        );\n    }\n\n    pub fn assert_eq_bounded_vec<let FIELD_NAME_LEN: u32, let MAX_RLP_LEN: u32, let MAX_VALUE_LEN: u32>(\n        self,\n        field_name: str<FIELD_NAME_LEN>,\n        rlp: Fragment<MAX_RLP_LEN, u8>,\n        value: BoundedVec<u8, MAX_VALUE_LEN>,\n    ) {\n        self.assert_eq_bytes(field_name, rlp, Fragment::from_vec(value));\n    }\n\n    pub fn assert_empty_string<let FIELD_NAME_LEN: u32, let MAX_RLP_LEN: u32>(\n        self,\n        field_name: str<FIELD_NAME_LEN>,\n    ) {\n        assert(self.data_type == STRING, f\"{field_name}: Invalid RLP type\");\n        assert(self.length == 0, f\"{field_name}: Expected empty string\");\n    }\n\n    pub fn assert_eq_u1<let FIELD_NAME_LEN: u32, let MAX_RLP_LEN: u32>(\n        self,\n        field_name: str<FIELD_NAME_LEN>,\n        rlp: Fragment<MAX_RLP_LEN, u8>,\n        value: u1,\n    ) {\n        self.assert_eq_bytes(field_name, rlp, Fragment::from_array([value as u8]));\n    }\n\n    pub fn assert_eq_u8<let FIELD_NAME_LEN: u32, let MAX_RLP_LEN: u32>(\n        self,\n        field_name: str<FIELD_NAME_LEN>,\n        rlp: Fragment<MAX_RLP_LEN, u8>,\n        value: u8,\n    ) {\n        self.assert_eq_bounded_vec(field_name, rlp, byte_value([value]));\n    }\n\n    pub fn assert_eq_u32<let FIELD_NAME_LEN: u32, let MAX_RLP_LEN: u32>(\n        self,\n        field_name: str<FIELD_NAME_LEN>,\n        rlp: Fragment<MAX_RLP_LEN, u8>,\n        value: u32,\n    ) {\n        self.assert_eq_bounded_vec(field_name, rlp, byte_value(u32_to_u8(value)));\n    }\n\n    pub fn assert_eq_u64<let FIELD_NAME_LEN: u32, let MAX_RLP_LEN: u32>(\n        self,\n        field_name: str<FIELD_NAME_LEN>,\n        rlp: Fragment<MAX_RLP_LEN, u8>,\n        value: u64,\n    ) {\n        self.assert_eq_bounded_vec(field_name, rlp, byte_value(u64_to_u8(value)));\n    }\n\n    pub fn assert_eq_u128<let FIELD_NAME_LEN: u32, let MAX_RLP_LEN: u32>(\n        self,\n        field_name: str<FIELD_NAME_LEN>,\n        rlp: Fragment<MAX_RLP_LEN, u8>,\n        value: U128,\n    ) {\n        self.assert_eq_bounded_vec(field_name, rlp, byte_value(value.to_be_bytes()));\n    }\n\n    pub fn assert_eq_address<let FIELD_NAME_LEN: u32, let MAX_RLP_LEN: u32>(\n        self,\n        field_name: str<FIELD_NAME_LEN>,\n        rlp: Fragment<MAX_RLP_LEN, u8>,\n        value: Address,\n    ) {\n        self.assert_eq_bytes(field_name, rlp, Fragment::from_array(value));\n    }\n\n    pub fn assert_eq_bytes32<let FIELD_NAME_LEN: u32, let MAX_RLP_LEN: u32>(\n        self,\n        field_name: str<FIELD_NAME_LEN>,\n        rlp: Fragment<MAX_RLP_LEN, u8>,\n        value: Bytes32,\n    ) {\n        self.assert_eq_bytes(field_name, rlp, Fragment::from_array(value));\n    }\n}\n\nimpl Default for RlpFragment {\n    fn default() -> Self {\n        RlpFragment { offset: 0, length: 0, data_type: 0 }\n    }\n}\n\nimpl Eq for RlpFragment {\n    fn eq(self, other: Self) -> bool {\n        (self.offset == other.offset)\n            & (self.length == other.length)\n            & (self.data_type == other.data_type)\n    }\n}\n","path":"/home/drone/projects/rione/circuits/ethereum/circuits/lib/src/rlp/types.nr"},"93":{"source":"use crate::account::AccountWithinBlock;\nuse crate::account_with_storage::{StorageWithinBlock, Account};\nuse crate::constants::{SR_MAX_DEPTH_NO_LEAF, SR_MAX_PREFIXED_KEY_NIBBLE_LEN, SR_MAX_LEAF_LEN_M, SR_MAX_VALUE_LEN_M};\nuse crate::account::{\n    MAX_ACCOUNT_DEPTH_NO_LEAF_M, MAX_PREFIXED_KEY_NIBBLE_LEN as ACCOUNT_MAX_PREFIXED_KEY_NIBBLE_LEN,\n    MAX_ACCOUNT_STATE_LEN, MAX_ACCOUNT_LEAF_LEN\n};\nuse crate::account_with_storage::{\n    MAX_PREFIXED_KEY_NIBBLE_LEN as STORAGE_MAX_PREFIXED_KEY_NIBBLE_LEN, MAX_STORAGE_DEPTH_NO_LEAF_M,\n    MAX_STORAGE_VALUE_LEN, MAX_STORAGE_LEAF_LEN\n};\nuse crate::misc::{fragment::Fragment, types::{BYTES32_LENGTH, Bytes32, ADDRESS_LENGTH, Address}};\nuse crate::uint256::U256;\nuse crate::merkle_patricia_proofs::proof::{ProofInput, Proof, Node, Leaf, MAX_NODE_LEN};\nuse dep::std::mem::zeroed;\n\ntrait Serde<let LEN: u32> {\n    fn serialize(self) -> [Field; LEN];\n    fn deserialize(data: [Field; LEN]) -> Self;\n}\n\nglobal U128_SERIALIZED_LEN: u32 = 2;\n\nimpl Serde<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self.lo, self.hi]\n    }\n\n    fn deserialize(data: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128 { lo: data[0], hi: data[1] }\n    }\n}\n\nglobal U256_SERIALIZED_LEN: u32 = 4;\n\nimpl Serde<U256_SERIALIZED_LEN> for U256 {\n    fn serialize(self) -> [Field; U256_SERIALIZED_LEN] {\n        [self.low.lo, self.low.hi, self.high.lo, self.high.hi]\n    }\n\n    fn deserialize(data: [Field; U256_SERIALIZED_LEN]) -> Self {\n        U256 { low: U128 { lo: data[0], hi: data[1] }, high: U128 { lo: data[2], hi: data[3] } }\n    }\n}\n\nimpl<let LEN: u32> Serde<LEN> for [u8; LEN] {\n    fn serialize(self) -> [Field; LEN] {\n        let mut result: [Field; LEN] = zeroed();\n        for i in 0..LEN {\n            result[i] = self[i] as Field;\n        }\n        result\n    }\n\n    fn deserialize(data: [Field; LEN]) -> Self {\n        let mut result: [u8; LEN] = zeroed();\n        for i in 0..LEN {\n            result[i] = data[i] as u8;\n        }\n        result\n    }\n}\n\nglobal ACCOUNT_LEN: u32 = 1 + 1 + BYTES32_LENGTH + BYTES32_LENGTH;\n\nimpl Serde<ACCOUNT_LEN> for Account {\n    fn serialize(self) -> [Field; ACCOUNT_LEN] {\n        let mut data: BoundedVec<Field, ACCOUNT_LEN> = BoundedVec::new();\n        data.push(self.nonce as Field);\n        data.push(self.balance);\n        data.extend_from_array(self.storage_root.serialize());\n        data.extend_from_array(self.code_hash.serialize());\n        data.storage\n    }\n\n    fn deserialize(data: [Field; ACCOUNT_LEN]) -> Self {\n        let mut fragment = Fragment::from_array(data);\n        let nonce = fragment.pop_front() as u64;\n        let balance = fragment.pop_front();\n        let storage_root: Bytes32 = fragment.pop_front_array().deserialize();\n        let code_hash: Bytes32 = fragment.pop_front_array().deserialize();\n        Account {\n            nonce,\n            balance,\n            storage_root,\n            code_hash,\n        }\n    }\n}\n\nglobal ACCOUNT_BLOCK_LEN: u32 = ACCOUNT_LEN + BYTES32_LENGTH;\n\nimpl Serde<ACCOUNT_BLOCK_LEN> for AccountWithinBlock {\n    fn serialize(self) -> [Field; ACCOUNT_BLOCK_LEN] {\n        let mut data: BoundedVec<Field, ACCOUNT_BLOCK_LEN> = BoundedVec::new();\n        data.extend_from_array(self.account.serialize());\n        data.extend_from_array(self.block_hash.serialize());\n        data.storage\n    }\n\n    fn deserialize(data: [Field; ACCOUNT_BLOCK_LEN]) -> Self {\n        let mut fragment = Fragment::from_array(data);\n        let account = Account::deserialize(fragment.pop_front_array());\n        let block_hash = fragment.pop_front_array().deserialize();\n        AccountWithinBlock {\n            account,\n            block_hash,\n        }\n    }\n}\n\nglobal STORAGE_BLOCK_LEN: u32 = BYTES32_LENGTH + ACCOUNT_LEN + BYTES32_LENGTH;\n\nimpl Serde<STORAGE_BLOCK_LEN> for StorageWithinBlock<1> {\n    fn serialize(self) -> [Field; STORAGE_BLOCK_LEN] {\n        let mut data: BoundedVec<Field, STORAGE_BLOCK_LEN> = BoundedVec::new();\n        data.extend_from_array(self.block_hash.serialize());\n        data.extend_from_array(self.account.serialize());\n        data.extend_from_array(self.values[0].serialize());\n        data.storage\n    }\n\n    fn deserialize(data: [Field; STORAGE_BLOCK_LEN]) -> Self {\n        let mut fragment = Fragment::from_array(data);\n        let block_hash = fragment.pop_front_array().deserialize();\n        let account = Account::deserialize(fragment.pop_front_array());\n        let values = [fragment.pop_front_array().deserialize()];\n        StorageWithinBlock {\n            block_hash,\n            account,\n            values,\n        }\n    }\n}\n\n/** STATE PROOF INPUT **/\n\nglobal STATE_NODES_LEN_M: u32 = 5320; // MAX_NODE_LEN * MAX_ACCOUNT_DEPTH_NO_LEAF_M\n\npub fn serialize_state_nodes(nodes: [Node; MAX_ACCOUNT_DEPTH_NO_LEAF_M]) -> [Field; STATE_NODES_LEN_M] {\n    let mut data: BoundedVec<Field, STATE_NODES_LEN_M> = BoundedVec::new();\n    for i in 0..MAX_ACCOUNT_DEPTH_NO_LEAF_M {\n        data.extend_from_array(nodes[i].serialize());\n    }\n    data.storage\n}\n\npub fn deserialize_state_nodes(data: [Field; STATE_NODES_LEN_M]) -> [Node; MAX_ACCOUNT_DEPTH_NO_LEAF_M] {\n    let mut result: Fragment<MAX_ACCOUNT_DEPTH_NO_LEAF_M, Node> = Fragment::empty();\n    let mut fragment = Fragment::from_array(data);\n    for _ in 0..MAX_ACCOUNT_DEPTH_NO_LEAF_M {\n        let node: Node = fragment.pop_front_array().deserialize();\n        result.push_back(node);\n    }\n    result.data\n}\n\nglobal STATE_PROOF_LEN_M: u32 = 5469; // STATE_NODES_LEN_M + MAX_ACCOUNT_LEAF_LEN + 1\n\nimpl Serde<STATE_PROOF_LEN_M> for Proof<MAX_ACCOUNT_DEPTH_NO_LEAF_M, MAX_ACCOUNT_LEAF_LEN> {\n    fn serialize(self) -> [Field; STATE_PROOF_LEN_M] {\n        let mut data: BoundedVec<Field, STATE_PROOF_LEN_M> = BoundedVec::new();\n        data.extend_from_array(serialize_state_nodes(self.nodes));\n        data.extend_from_array(self.leaf.serialize());\n        data.push(self.depth as Field);\n        data.storage\n    }\n\n    fn deserialize(data: [Field; STATE_PROOF_LEN_M]) -> Self {\n        let mut fragment = Fragment::from_array(data);\n        let nodes = deserialize_state_nodes(fragment.pop_front_array());\n        let leaf = fragment.pop_front_array().deserialize();\n        let depth = fragment.pop_front() as u64;\n        Proof {\n            nodes,\n            leaf,\n            depth,\n        }\n    }\n}\n\nglobal STATE_PROOF_INPUT_LEN_M: u32 = 5645; // ACCOUNT_MAX_PREFIXED_KEY_NIBBLE_LEN + MAX_ACCOUNT_STATE_LEN + STATE_PROOF_LEN_M\n\nimpl Serde<STATE_PROOF_INPUT_LEN_M> for ProofInput<ACCOUNT_MAX_PREFIXED_KEY_NIBBLE_LEN, MAX_ACCOUNT_STATE_LEN, MAX_ACCOUNT_DEPTH_NO_LEAF_M, MAX_ACCOUNT_LEAF_LEN> {\n    fn serialize(self) -> [Field; STATE_PROOF_INPUT_LEN_M] {\n        let mut data: BoundedVec<Field, STATE_PROOF_INPUT_LEN_M> = BoundedVec::new();\n        data.extend_from_array(self.key.serialize());\n        data.extend_from_array(self.value.serialize());\n        data.extend_from_array(self.proof.serialize());\n        data.storage\n    }\n\n    fn deserialize(data: [Field; STATE_PROOF_INPUT_LEN_M]) -> Self {\n        let mut fragment = Fragment::from_array(data);\n        let key = fragment.pop_front_array().deserialize();\n        let value = fragment.pop_front_array().deserialize();\n        let proof = Serde::<STATE_PROOF_LEN_M>::deserialize(fragment.pop_front_array());\n        ProofInput {\n            key,\n            value,\n            proof\n        }\n    }\n}\n\n/** STORAGE PROOF INPUT **/\n\nglobal STORAGE_NODES_LEN_M: u32 = 3192; // MAX_NODE_LEN * MAX_STORAGE_DEPTH_NO_LEAF_M\n\npub fn serialize_storage_nodes(nodes: [Node; MAX_STORAGE_DEPTH_NO_LEAF_M]) -> [Field; STORAGE_NODES_LEN_M] {\n    let mut data: BoundedVec<Field, STORAGE_NODES_LEN_M> = BoundedVec::new();\n    for i in 0..MAX_STORAGE_DEPTH_NO_LEAF_M {\n        data.extend_from_array(nodes[i].serialize());\n    }\n    data.storage\n}\n\npub fn deserialize_storage_nodes(data: [Field; STORAGE_NODES_LEN_M]) -> [Node; MAX_STORAGE_DEPTH_NO_LEAF_M] {\n    let mut result: Fragment<MAX_STORAGE_DEPTH_NO_LEAF_M, Node> = Fragment::empty();\n    let mut fragment = Fragment::from_array(data);\n    for _ in 0..MAX_STORAGE_DEPTH_NO_LEAF_M {\n        let node: Node = fragment.pop_front_array().deserialize();\n        result.push_back(node);\n    }\n    result.data\n}\n\nglobal STORAGE_PROOF_LEN_M: u32 = 3262; // STORAGE_NODES_LEN_M + MAX_STORAGE_LEAF_LEN + 1\n\nimpl Serde<STORAGE_PROOF_LEN_M> for Proof<MAX_STORAGE_DEPTH_NO_LEAF_M, MAX_STORAGE_LEAF_LEN> {\n    fn serialize(self) -> [Field; STORAGE_PROOF_LEN_M] {\n        let mut data: BoundedVec<Field, STORAGE_PROOF_LEN_M> = BoundedVec::new();\n        data.extend_from_array(serialize_storage_nodes(self.nodes));\n        data.extend_from_array(self.leaf.serialize());\n        data.push(self.depth as Field);\n        data.storage\n    }\n\n    fn deserialize(data: [Field; STORAGE_PROOF_LEN_M]) -> Self {\n        let mut fragment = Fragment::from_array(data);\n        let nodes = deserialize_storage_nodes(fragment.pop_front_array());\n        let leaf = fragment.pop_front_array().deserialize();\n        let depth = fragment.pop_front() as u64;\n        Proof {\n            nodes,\n            leaf,\n            depth,\n        }\n    }\n}\n\nglobal STORAGE_PROOF_INPUT_LEN_M: u32 = 3360; // STORAGE_MAX_PREFIXED_KEY_NIBBLE_LEN + MAX_STORAGE_VALUE_LEN + STORAGE_PROOF_LEN_M\n\nimpl Serde<STORAGE_PROOF_INPUT_LEN_M> for ProofInput<STORAGE_MAX_PREFIXED_KEY_NIBBLE_LEN, MAX_STORAGE_VALUE_LEN, MAX_STORAGE_DEPTH_NO_LEAF_M, MAX_STORAGE_LEAF_LEN> {\n    fn serialize(self) -> [Field; STORAGE_PROOF_INPUT_LEN_M] {\n        let mut data: BoundedVec<Field, STORAGE_PROOF_INPUT_LEN_M> = BoundedVec::new();\n        data.extend_from_array(self.key.serialize());\n        data.extend_from_array(self.value.serialize());\n        data.extend_from_array(self.proof.serialize());\n        data.storage\n    }\n\n    fn deserialize(data: [Field; STORAGE_PROOF_INPUT_LEN_M]) -> Self {\n        let mut fragment = Fragment::from_array(data);\n        let key = fragment.pop_front_array().deserialize();\n        let value = fragment.pop_front_array().deserialize();\n        let proof = Serde::<STORAGE_PROOF_LEN_M>::deserialize(fragment.pop_front_array());\n        ProofInput {\n            key,\n            value,\n            proof\n        }\n    }\n}\n\n/** RECEIPT PROOF INPUT **/\n\nglobal RECEIPT_NODES_LEN_M: u32 = 3192; // MAX_NODE_LEN * SR_MAX_DEPTH_NO_LEAF\n\npub fn serialize_receipt_nodes(nodes: [Node; SR_MAX_DEPTH_NO_LEAF]) -> [Field; RECEIPT_NODES_LEN_M] {\n    let mut data: BoundedVec<Field, RECEIPT_NODES_LEN_M> = BoundedVec::new();\n    for i in 0..SR_MAX_DEPTH_NO_LEAF {\n        data.extend_from_array(nodes[i].serialize());\n    }\n    data.storage\n}\n\npub fn deserialize_receipt_nodes(data: [Field; RECEIPT_NODES_LEN_M]) -> [Node; SR_MAX_DEPTH_NO_LEAF] {\n    let mut result: Fragment<SR_MAX_DEPTH_NO_LEAF, Node> = Fragment::empty();\n    let mut fragment = Fragment::from_array(data);\n    for _ in 0..SR_MAX_DEPTH_NO_LEAF {\n        let node: Node = fragment.pop_front_array().deserialize();\n        result.push_back(node);\n    }\n    result.data\n}\n\nglobal RECEIPT_PROOF_LEN_M: u32 = 3262; // RECEIPT_NODES_LEN_M + SR_MAX_LEAF_LEN_M + 1\n\nimpl Serde<RECEIPT_PROOF_LEN_M> for Proof<SR_MAX_DEPTH_NO_LEAF, SR_MAX_LEAF_LEN_M> {\n    fn serialize(self) -> [Field; RECEIPT_PROOF_LEN_M] {\n        let mut data: BoundedVec<Field, RECEIPT_PROOF_LEN_M> = BoundedVec::new();\n        data.extend_from_array(serialize_receipt_nodes(self.nodes));\n        data.extend_from_array(self.leaf.serialize());\n        data.push(self.depth as Field);\n        data.storage\n    }\n\n    fn deserialize(data: [Field; RECEIPT_PROOF_LEN_M]) -> Self {\n        let mut fragment = Fragment::from_array(data);\n        let nodes = deserialize_receipt_nodes(fragment.pop_front_array());\n        let leaf = fragment.pop_front_array().deserialize();\n        let depth = fragment.pop_front() as u64;\n        Proof {\n            nodes,\n            leaf,\n            depth,\n        }\n    }\n}\n\nglobal RECEIPT_PROOF_INPUT_LEN_M: u32 = 3360; // SR_MAX_PREFIXED_KEY_NIBBLE_LEN + SR_MAX_VALUE_LEN_M + RECEIPT_PROOF_LEN_M\n\nimpl Serde<RECEIPT_PROOF_INPUT_LEN_M> for ProofInput<SR_MAX_PREFIXED_KEY_NIBBLE_LEN, SR_MAX_VALUE_LEN_M, SR_MAX_DEPTH_NO_LEAF, SR_MAX_LEAF_LEN_M> {\n    fn serialize(self) -> [Field; RECEIPT_PROOF_INPUT_LEN_M] {\n        let mut data: BoundedVec<Field, RECEIPT_PROOF_INPUT_LEN_M> = BoundedVec::new();\n        data.extend_from_array(self.key.serialize());\n        data.extend_from_array(self.value.serialize());\n        data.extend_from_array(self.proof.serialize());\n        data.storage\n    }\n\n    fn deserialize(data: [Field; RECEIPT_PROOF_INPUT_LEN_M]) -> Self {\n        let mut fragment = Fragment::from_array(data);\n        let key = fragment.pop_front_array().deserialize();\n        let value = fragment.pop_front_array().deserialize();\n        let proof = Serde::<RECEIPT_PROOF_LEN_M>::deserialize(fragment.pop_front_array());\n        ProofInput {\n            key,\n            value,\n            proof\n        }\n    }\n}\n\n/** TRANSACTION PROOF INPUT **/\npub global TX_PROOF_INPUT_LEN_M: u32 = 3360;  // Same as RECEIPT_PROOF_INPUT_LEN_M for now\n","path":"/home/drone/projects/rione/circuits/ethereum/circuits/lib/src/serde.nr"},"96":{"source":"use crate::account::{Account, MAX_PREFIXED_KEY_NIBBLE_LEN, MAX_ACCOUNT_STATE_LEN, MAX_ACCOUNT_LEAF_LEN};\nuse crate::misc::{types::{Address, ADDRESS_LENGTH}, bytes::right_pad, fragment::Fragment};\nuse crate::rlp::decode::decode_list_of_small_strings;\nuse crate::rlp::types::RlpList;\nuse crate::merkle_patricia_proofs::proof::{ProofInput, verify_merkle_proof};\nuse crate::HASH_LEN;\n\nuse dep::std::hash::keccak256;\n\nglobal ACCOUNT_FIELDS_COUNT: u32 = 4;\nglobal NONCE_INDEX: u32 = 0;\nglobal BALANCE_INDEX: u32 = 1;\nglobal STORAGE_ROOT_INDEX: u32 = 2;\nglobal CODE_HASH_INDEX: u32 = 3;\n\npub(crate) fn assert_account_equals(account_rlp_left_padded: [u8; MAX_ACCOUNT_STATE_LEN], account: Account) {\n    let account_rlp_right_padded = right_pad(account_rlp_left_padded).storage;\n    let account_rlp_list: RlpList<ACCOUNT_FIELDS_COUNT> = decode_list_of_small_strings(Fragment::from_array(account_rlp_right_padded));\n    assert(account_rlp_list.len == ACCOUNT_FIELDS_COUNT, \"Invalid number of fields in account RLP\");\n\n    let account_rlp = Fragment::from_array(account_rlp_right_padded);\n    account_rlp_list.get(NONCE_INDEX).assert_eq_u64(\"Nonce\", account_rlp, account.nonce);\n    account_rlp_list.get(BALANCE_INDEX).assert_eq_u128(\"Balance\", account_rlp, U128::from_integer(account.balance));\n\n    account_rlp_list.get(STORAGE_ROOT_INDEX).assert_eq_bytes32(\"Storage root\", account_rlp, account.storage_root);\n    account_rlp_list.get(CODE_HASH_INDEX).assert_eq_bytes32(\"Code hash\", account_rlp, account.code_hash);\n}\n\nfn assert_address_equals(address_hash: [u8; MAX_PREFIXED_KEY_NIBBLE_LEN], address: Address) {\n    let address_hash_fragment = Fragment::new(MAX_PREFIXED_KEY_NIBBLE_LEN - HASH_LEN, HASH_LEN, address_hash);\n    let other_address_hash_fragment = Fragment::from_array(keccak256(address, ADDRESS_LENGTH as u32));\n    assert(address_hash_fragment.eq(other_address_hash_fragment), \"Address mismatch\");\n}\n\npub fn verify_account<let MAX_DEPTH_NO_LEAF: u32>(\n    address: Address,\n    account: Account,\n    state_proof_input: ProofInput<MAX_PREFIXED_KEY_NIBBLE_LEN, MAX_ACCOUNT_STATE_LEN, MAX_DEPTH_NO_LEAF, MAX_ACCOUNT_LEAF_LEN>,\n    state_root: [u8; HASH_LEN]\n) {\n    assert_address_equals(state_proof_input.key, address);\n    assert_account_equals(state_proof_input.value, account);\n    verify_merkle_proof(\n        state_proof_input.key,\n        state_proof_input.value,\n        state_root,\n        state_proof_input.proof\n    );\n}\n","path":"/home/drone/projects/rione/circuits/ethereum/circuits/lib/src/verifiers/account.nr"},"97":{"source":"use dep::std::hash::keccak256;\n\nuse crate::chain::{ETHEREUM_MAINNET_ID, ETHEREUM_SEPOLIA_ID};\nuse crate::HASH_LEN;\nuse crate::header::{BlockHeaderPartial, BlockHeaderRlp};\nuse crate::misc::{arrays::sub_array_equals, fragment::Fragment};\nuse crate::rlp::decode::decode_list;\nuse crate::rlp::types::RlpList;\n\nglobal MAX_HEADER_FIELDS_COUNT: u32 = 20;\nglobal STATE_ROOT_INDEX: u32 = 3;\nglobal TRANSACTIONS_ROOT_INDEX: u32 = 4;\nglobal RECEIPTS_ROOT_INDEX: u32 = 5;\nglobal BLOCK_NUM_INDEX: u32 = 8;\n\nglobal LONDON_BLOCK_NUM: u64 = 12_965_000;\nglobal PARIS_BLOCK_NUM: u64 = 15_537_394;\nglobal CANCUN_BLOCK_NUM: u64 = 19_426_587;\n\npub(crate) fn get_header_fields_count(chain_id: Field, block_number: u64) -> u32 {\n    let mut fields_count = 15;\n    if chain_id == ETHEREUM_MAINNET_ID {\n        fields_count = 20;\n    } else if chain_id == ETHEREUM_SEPOLIA_ID {\n        fields_count = 20;\n    } else {\n        assert(false, \"Unsupported chain ID\");\n    }\n    \n    fields_count\n}\n\npub fn verify_header(\n    chain_id: Field,\n    block_header_partial: BlockHeaderPartial,\n    block_header_rlp: BlockHeaderRlp,\n) {\n    let block_header_rlp = Fragment::from_vec(block_header_rlp);\n    let header_rlp_list: RlpList<MAX_HEADER_FIELDS_COUNT> = decode_list(block_header_rlp);\n    let expected_header_fields_count =\n        get_header_fields_count(chain_id, block_header_partial.number);\n\n    assert(\n        expected_header_fields_count == header_rlp_list.len,\n        \"number of header RLP fields does not match\",\n    );\n\n    header_rlp_list.get(BLOCK_NUM_INDEX).assert_eq_u64(\n        \"Block number\",\n        block_header_rlp,\n        block_header_partial.number,\n    );\n    header_rlp_list.get(STATE_ROOT_INDEX).assert_eq_bytes32(\n        \"State root\",\n        block_header_rlp,\n        block_header_partial.state_root,\n    );\n    header_rlp_list.get(TRANSACTIONS_ROOT_INDEX).assert_eq_bytes32(\n        \"Transactions root\",\n        block_header_rlp,\n        block_header_partial.transactions_root,\n    );\n    header_rlp_list.get(RECEIPTS_ROOT_INDEX).assert_eq_bytes32(\n        \"Receipts root\",\n        block_header_rlp,\n        block_header_partial.receipts_root,\n    );\n\n   \n}\n","path":"/home/drone/projects/rione/circuits/ethereum/circuits/lib/src/verifiers/header.nr"},"100":{"source":"use crate::misc::types::Bytes32;\nuse crate::account::MAX_PREFIXED_KEY_NIBBLE_LEN;\nuse crate::account_with_storage::{MAX_STORAGE_VALUE_LEN, MAX_STORAGE_LEAF_LEN};\nuse crate::merkle_patricia_proofs::proof::{ProofInput, verify_merkle_proof};\nuse crate::header::{BlockHeaderPartial, get_header};\n\npub fn verify_storage_values<let N: u32, let MAX_STORAGE_DEPTH_NO_LEAF: u32>(\n    proof_inputs: [ProofInput<MAX_PREFIXED_KEY_NIBBLE_LEN, MAX_STORAGE_VALUE_LEN, MAX_STORAGE_DEPTH_NO_LEAF, MAX_STORAGE_LEAF_LEN>; N],\n    storage_root: Bytes32\n) {\n    for i in 0..N {\n        let proof_input = proof_inputs[i];\n        verify_merkle_proof(\n            proof_input.key,\n            proof_input.value,\n            storage_root,\n            proof_input.proof\n        );\n    }\n}\n\npub fn verify_storage_values_against_block<let N: u32, let MAX_STORAGE_DEPTH_NO_LEAF: u32>(\n    chain_id: Field,\n    block_number: u64,\n    proof_inputs: [ProofInput<MAX_PREFIXED_KEY_NIBBLE_LEN, MAX_STORAGE_VALUE_LEN, MAX_STORAGE_DEPTH_NO_LEAF, MAX_STORAGE_LEAF_LEN>; N],\n    storage_root: Bytes32\n) {\n\n    let header = unsafe { get_header(chain_id, block_number) };\n    \n    assert(header.number == block_number, \"Block number mismatch in storage verification\");\n    \n    verify_storage_values(proof_inputs, storage_root);\n}\n","path":"/home/drone/projects/rione/circuits/ethereum/circuits/lib/src/verifiers/storage.nr"},"107":{"source":"pub fn u32_to_u8(num: u32) -> [u8; 4] {\n    let mut out: [u8; 4] = [0; 4];\n    for i in 0..4 {\n        let shift: u8 = (24 - (i * 8));\n        out[i] = (num >> shift) as u8;\n    }\n\n    out\n}\n\n#[test]\nfn test_u32() {\n    let small = u32_to_u8(10);\n    assert(small.len() == 4);\n    assert(small[0] == 0);\n    assert(small[1] == 0);\n    assert(small[2] == 0);\n    assert(small[3] == 10);\n\n    let two_byte = u32_to_u8(256);\n    assert(two_byte[0] == 0x00);\n    assert(two_byte[1] == 0x00);\n    assert(two_byte[2] == 0x01);\n    assert(two_byte[3] == 0x00);\n\n    let ceil = u32_to_u8(4294967295);\n    assert(ceil[0] == 0xff);\n    assert(ceil[1] == 0xff);\n    assert(ceil[2] == 0xff);\n    assert(ceil[3] == 0xff);\n}\n\npub fn u64_to_u8(num: u64) -> [u8; 8] {\n    let mut out: [u8; 8] = [0; 8];\n    for i in 0..8 {\n        let shift: u8 = 56 - (i * 8);\n        out[i] = (num >> shift) as u8;\n    }\n\n    out\n}\n\n#[test]\nfn test_u64() {\n    let small = u64_to_u8(10);\n    assert(small.len() == 8);\n    assert(small[0] == 0);\n    assert(small[1] == 0);\n    assert(small[2] == 0);\n    assert(small[3] == 0);\n    assert(small[4] == 0);\n    assert(small[5] == 0);\n    assert(small[6] == 0);\n    assert(small[7] == 10);\n\n    let two_byte = u64_to_u8(256);\n    assert(two_byte[0] == 0x00);\n    assert(two_byte[1] == 0x00);\n    assert(two_byte[2] == 0x00);\n    assert(two_byte[3] == 0x00);\n    assert(two_byte[4] == 0x00);\n    assert(two_byte[5] == 0x00);\n    assert(two_byte[6] == 0x01);\n    assert(two_byte[7] == 0x00);\n\n    let random = u64_to_u8(0x1cbe443030);\n    assert(random[0] == 0x00);\n    assert(random[1] == 0x00);\n    assert(random[2] == 0x00);\n    assert(random[3] == 0x1c);\n    assert(random[4] == 0xbe);\n    assert(random[5] == 0x44);\n    assert(random[6] == 0x30);\n    assert(random[7] == 0x30);\n\n    let ceil = u64_to_u8(18446744073709551615);\n    assert(ceil[0] == 0xff);\n    assert(ceil[1] == 0xff);\n    assert(ceil[2] == 0xff);\n    assert(ceil[3] == 0xff);\n    assert(ceil[4] == 0xff);\n    assert(ceil[5] == 0xff);\n    assert(ceil[6] == 0xff);\n    assert(ceil[7] == 0xff);\n}\n","path":"/home/drone/nargo/github.com/vlayer-xyz/noir-u2b/v0.3.4/src/lib.nr"},"109":{"source":"use crate::bn254::ks;\n\n#[field(bn254)]\npub fn decrypt<let R: u32>(ciphers: [Field; R], key:[Field; 4],  iv:[Field; 4]) -> [Field; R] {\n    let mut plains = [0; R];\n    let (mut state, extended_key) = ks::hydra_body(key, iv);\n    let mut ks = ks::hydra_first_head(state, extended_key);\n    if R <= 8 as u32 {\n        for i in 0..R {\n            plains[i] = ciphers[i] - ks[i];\n        }\n    } else {\n        for i in 0..8 {\n            plains[i] = ciphers[i] - ks[i];\n        }\n        for i in 8..R {\n            let off = i % 8;\n            if off == 0 {\n                let result = ks::hydra_head(state, extended_key, off);\n                state = result.0;\n                ks = result.1;\n            }\n            plains[i] = ciphers[i] - ks[off];\n        }\n    }\n    plains\n}\n","path":"/home/drone/projects/rione/circuits/lib/noir-hydra/src/bn254/dec.nr"},"110":{"source":"use crate::bn254::ks;\n\n//encrypts up to 8000 Field Elements\n#[field(bn254)]\npub fn encrypt<let R: u32>(plains: [Field; R], key:[Field; 4],  iv:[Field; 4]) -> [Field; R] {\n    let mut ciphers = [0; R];\n    let (mut state, extended_key) = ks::hydra_body(key, iv);\n    let mut ks = ks::hydra_first_head(state, extended_key);\n    if R <= 8 as u32 {\n        for i in 0..R {\n            ciphers[i] = plains[i] + ks[i];\n        }\n    } else {\n        for i in 0..8 {\n            ciphers[i] = plains[i] + ks[i];\n        }\n        for i in 8..R {\n            let off = i % 8;\n            if off == 0 {\n                let result = ks::hydra_head(state, extended_key, off);\n                state = result.0;\n                ks = result.1;\n            }\n            ciphers[i] = plains[i] + ks[off];\n        }\n    }\n    ciphers\n}\n","path":"/home/drone/projects/rione/circuits/lib/noir-hydra/src/bn254/enc.nr"},"111":{"source":"use crate::bn254::consts;\n\n#[field(bn254)]\npub(crate) fn hydra_body(key: [Field; 4], iv: [Field; 4]) -> ([Field; 8], [Field; 8]) {\n    let (mut state, z) = permutation_b(vec_add(iv, key));\n    state = vec_add(state, key);\n    (vec_concat(state, z), vec_concat(key, matrix_e(key)))\n}\n\n#[field(bn254)]\npub(crate) fn hydra_first_head<let R: u32>(state: [Field; 8], key: [Field; 8]) ->  [Field; 8] {\n    vec_add(permutation_h(state, key), state)\n}\n\n#[field(bn254)]\npub(crate) fn hydra_head<let R: u32>(state: [Field; 8], key: [Field; 8], index: u32) -> ([Field; 8], [Field; 8]) {\n    let roll = rolling(state, index);\n    (roll, vec_add(permutation_h(roll, key), roll))\n}\n\n\nfn rolling(state: [Field; 8], index: u32) -> [Field; 8] {\n    let (y, z) = vec_split(state);\n    let (y, z) = non_linear_r(y, z);\n    let y_perm = matrix_i(y, consts::Mi);\n    let z_perm = matrix_i(z, consts::Mi);\n    vec_add(vec_concat(y_perm, z_perm), consts::rc_r[index])\n}\n\nfn permutation_h(mut roll: [Field; 8], extended_key: [Field; 8]) -> [Field; 8] {\n    for i in 0..consts::Rh {\n        roll = non_linear_h(roll);\n        roll = matrix_i(roll, consts::Mh);\n        roll = vec_add(roll, consts::rc_h[i]);\n        roll = vec_add(roll, extended_key);\n    }\n    roll\n}\n\nfn permutation_b(state: [Field; 4]) -> ([Field;4], [Field; 4]) {\n    let mut acc = [0; 4];\n    let mut state = matrix_e(state);\n    for i in 0..consts::Re_1 {\n        state = non_linear_e(state);\n        state = matrix_e(state);\n        state = vec_add(state, consts::rc_b[i]);\n        acc = vec_add(acc, state);\n    }\n    for i in 0..consts::Ri {\n        state = non_linear_i(state);\n        state = matrix_i(state, consts::Mi);\n        state = vec_add(state, consts::rc_b[i + consts::Re_1]);\n        acc = vec_add(acc, state);\n    }\n    for i in consts::Re_1..consts::Re_1 + consts::Re_2 - 1 {\n        state = non_linear_e(state);\n        state = matrix_e(state);\n        state = vec_add(state, consts::rc_b[i + consts::Ri]);\n        acc = vec_add(acc, state);\n    }\n\n    //one more time but without addition\n    state = non_linear_e(state);\n    state = matrix_e(state);\n    state = vec_add(state, consts::rc_b[consts::Re_1 + consts::Re_2 - 1 + consts::Ri]);\n    (state, acc)\n}\n\n#[field(bn254)]\npub(crate) fn hydra_body_ks(key: [Field; 4], iv: [Field; 4]) -> [Field; 4] {\n    let state = vec_add(key, iv);\n    let mut state = matrix_e(state);\n    for i in 0..consts::Re_1 {\n        state = non_linear_e(state);\n        state = matrix_e(state);\n        state = vec_add(state, consts::rc_b[i]);\n    }\n    for i in 0..consts::Ri {\n        state = non_linear_i(state);\n        state = matrix_i(state, consts::Mi);\n        state = vec_add(state, consts::rc_b[i + consts::Re_1]);\n    }\n    for i in consts::Re_1..consts::Re_1 + consts::Re_2 {\n        state = non_linear_e(state);\n        state = matrix_e(state);\n        state = vec_add(state, consts::rc_b[i + consts::Ri]);\n    }\n    vec_add(state, key)\n}\n\nfn matrix_e<let R: u32>(state: [Field; R]) -> [Field; R] {\n    let sum = state.reduce(|a,b| a + b);\n    let rot_state = rotate_left(state);\n    let mut result = [0; R];\n    for i in 0..R {\n        result[i] = sum + rot_state[i] + state[i] + state[i];\n    }\n    result\n}\n\nfn matrix_i<let R: u32, let L: u32>(state: [Field; R], mat:[[Field; R]; L]) -> [Field; R] {\n    let sum = state.reduce(|a,b| a + b);\n    let mut out = [sum; R];\n    out[0] += state[0] * mat[0][0];\n    for i in 1..R {\n        out[i] += (state[0] * mat[i][0]) + (state[i] * mat[i][i]);\n    }\n    out\n}\n\nfn rotate_left<let R: u32>(mat: [Field; R]) -> [Field; R] {\n    let mut rotated = [0; R];\n    for i in 1..R {\n        rotated[i-1] = mat[i];\n    }\n    rotated[R-1] = mat[0];\n    rotated\n}\n\nfn non_linear_h(roll: [Field; 8]) -> [Field; 8] {\n    let mut dot = roll[0] + roll[1] + roll[2] + roll[3] - roll[4] - roll[5] - roll[6] - roll[7];\n    dot = square(dot);\n    roll.map(|r| r + dot)\n}\n\nfn non_linear_e(state: [Field;4]) -> [Field; 4] {\n    [state[0].pow_32(5), state[1].pow_32(5), state[2].pow_32(5), state[3].pow_32(5)]\n}\n\nfn non_linear_i(state: [Field; 4]) -> [Field;4] {\n    let (dot1, dot2) = get_lm_dot(state);\n    let sum = square(square(dot1) + dot2);\n    [state[0] + sum, state[1] + sum, state[2] + sum, state[3] + sum]\n}\n\nfn non_linear_r(y: [Field;4], z: [Field; 4]) -> ([Field; 4], [Field; 4]) {\n    let (vy, wy) = get_lm_dot(y);\n    let (wz, vz) = get_lm_dot(z);\n    let v = (vy * vz);\n    let w = (wy * wz);\n    (y.map(|yi| yi + v), z.map(|zi| zi + w))\n}\n\nfn get_lm_dot(state: [Field; 4]) -> (Field, Field) {\n    let tmp = state[0] - state[3];\n    (tmp - state[1] + state[2], tmp + state[1] - state[2])\n}\n\nfn square(x: Field) -> Field {\n    x * x\n}\n\nfn vec_concat(lhs:  [Field; 4], rhs: [Field; 4]) -> [Field; 8] {\n    [lhs[0], lhs[1], lhs[2], lhs[3], rhs[0], rhs[1], rhs[2], rhs[3]]\n}\n\nfn vec_split(vec:  [Field; 8]) -> ([Field; 4], [Field; 4]) {\n    ([vec[0], vec[1], vec[2], vec[3]], [vec[4], vec[5], vec[6], vec[7]])\n}\n\nfn vec_add<let R: u32>(lhs: [Field; R], rhs: [Field; R]) -> [Field; R] {\n    let mut result = [0; R];\n    for i in 0..R {\n        result[i] = lhs[i] + rhs[i];\n    }\n    result\n}\n\n#[test]\nfn test_rotate_left() {\n    let test = [0, 1, 2, 3, 4, 5, 6, 7];\n    assert(rotate_left(test) == [1, 2, 3, 4, 5, 6, 7, 0]);\n}\n\n#[test]\nfn test_get_lm_dot() {\n    let (dot1, dot2) = get_lm_dot([17162050878538720375407210140639637720303994375562539862452690421292386592590,\n            11912527370530146728703046717149243981430064476687468213603991691404411193217,\n            18430438893156814166144129663793173051281448131580613239977654404180923080739,\n            7614633435608198927774246011281602559236719354621200488645904294064394220068]);\n    assert(dot1 == 16065328965557188885074047076001964230918658675834484400180448840004504260044);\n    assert(dot2 == 3029505920303854010191881182714106091215891366048194347433123414451480485000);\n}\n\n#[test]\nfn test_non_linear_h() {\n    let state = non_linear_h([17311339206079525542322783825459319113913165622286561296721622612914673407804,\n            16276728151221844182140219810267241649985535582588722449384727866117202327093,\n            10801048258802086965858707507694761799252711922965390030528950861087300763030,\n            3638652786377497073268842010725440468491752112825502524378677961251293024759,\n            7645315248887656730315052486323154491745884763740850513982583264261456826307,\n            10323065323391982836294143162837377995469044206483281154564046348037825339388,\n            20343326181502906791617898953771792194510136932068335746318866730568328752863,\n            17802268834568716074000952286650978346952421838604678848244855399442974823193]);\n    assert(state == [4547325791835956019343387175706495521510639735313024107278926563682326597476,\n        3512714736978274659160823160514418057583009695615185259942031816884855516765,\n        19925277716397792665125716603199213295398550436407887184784458998430762448319,\n        12762882243973202772535851106229891964637590626267999678634186098594754710048,\n        16769544706483362429582061581827605987891723277183347668238091401604918511596,\n        19447294780987688535561152258341829491614882719925778308819554485381287024677,\n        7579312767259337268638502304018968602107611045094798556876170681335981942535,\n        5038255420325146551021555636898154754549895951631141658802159350210628012865]);\n}\n\n#[test]\nfn test_non_linear_i() {\n    let state = non_linear_i([17162050878538720375407210140639637720303994375562539862452690421292386592590,\n            11912527370530146728703046717149243981430064476687468213603991691404411193217,\n            18430438893156814166144129663793173051281448131580613239977654404180923080739,\n            7614633435608198927774246011281602559236719354621200488645904294064394220068]);\n    assert(state == [4309430684818317694633606829961546606191461818288188130026024885465599697736,\n        20948150048649019270175849151728427955865896319829150824875530342153432793980,\n        5577818699436411485370526353115081937168915574306261507550988868354136185885,\n        16650256113727071469247048445860786533672551197762883099917442944813415820831]);\n}\n\n#[test]\nfn test_non_linear_e() {\n    assert(non_linear_e([10, 8, 8, 9]) == [100000, 32768, 32768, 59049]);\n}\n\n#[test]\nfn test_non_linear_r() {\n    let y_in = [17311339206079525542322783825459319113913165622286561296721622612914673407804,\n        16276728151221844182140219810267241649985535582588722449384727866117202327093,\n        10801048258802086965858707507694761799252711922965390030528950861087300763030,\n        3638652786377497073268842010725440468491752112825502524378677961251293024759];\n    let z_in = [7645315248887656730315052486323154491745884763740850513982583264261456826307,\n        10323065323391982836294143162837377995469044206483281154564046348037825339388,\n        20343326181502906791617898953771792194510136932068335746318866730568328752863,\n        17802268834568716074000952286650978346952421838604678848244855399442974823193];\n    let (y_out, z_out) = non_linear_r(y_in, z_in);\n    assert(y_out == [16474558665066990056068011496692118409558256462734362411538742665023636404753,\n        15439947610209308695885447481500040945630626423036523564201847918226165324042,\n        9964267717789551479603935178927561094897802763413191145346070913196263759979,\n        2801872245364961587014069681958239764136842953273303639195798013360256021708]);\n    assert(z_out == [18800231885746230730599298706870897921156360762149932570264867923720730257667,\n        21477981960250556836578389383385121424879520204892363210846331007497098770748,\n        9609999946522205569655739429062260535372248530061383458902947203451793688606,\n        7068942599588014852038792761941446687814533436597726560828935872326439758936]);\n}\n\n#[test]\nfn test_matrix_e() {\n    assert(matrix_e([2, 1, 1, 1]) == [10, 8, 8, 9]);\n}\n","path":"/home/drone/projects/rione/circuits/lib/noir-hydra/src/bn254/ks.nr"},"114":{"source":"\r\nuse std::runtime::is_unconstrained;\r\nuse std::hash::keccak::keccakf1600;\r\n\r\nglobal BLOCK_SIZE_IN_BYTES: u32 = 136; //(1600 - BITS * 2) / WORD_SIZE;\r\nglobal WORD_SIZE: u32 = 8; // Limbs are made up of u64s so 8 bytes each.\r\nglobal LIMBS_PER_BLOCK: u32 = BLOCK_SIZE_IN_BYTES / WORD_SIZE;\r\nglobal NUM_KECCAK_LANES: u32 = 25;\r\n\r\n#[no_predicates]\r\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32] {\r\n    assert(N >= message_size);\r\n\r\n    // Copy input to block bytes. For that we'll need at least input bytes (N)\r\n    // but we want it to be padded to a multiple of BLOCK_SIZE_IN_BYTES.\r\n    let mut block_bytes = [0; ((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES];\r\n    if is_unconstrained() {\r\n        for i in 0..message_size {\r\n            block_bytes[i] = input[i];\r\n        }\r\n    } else {\r\n        for i in 0..N {\r\n            if i < message_size {\r\n                block_bytes[i] = input[i];\r\n            }\r\n        }\r\n    }\r\n\r\n    //1. format_input_lanes\r\n    let max_blocks = (N + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\r\n    //maximum number of bytes to hash\r\n    let real_max_blocks = (message_size + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\r\n    let real_blocks_bytes = real_max_blocks * BLOCK_SIZE_IN_BYTES;\r\n\r\n    block_bytes[message_size] = 1;\r\n    block_bytes[real_blocks_bytes - 1] = 0x80;\r\n\r\n    // populate a vector of 64-bit limbs from our byte array\r\n    let mut sliced_buffer =\r\n        [0; (((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES) / WORD_SIZE];\r\n    for i in 0..sliced_buffer.len() {\r\n        let limb_start = WORD_SIZE * i;\r\n\r\n        let mut sliced = 0;\r\n        let mut v = 1;\r\n        for k in 0..WORD_SIZE {\r\n            sliced += v * (block_bytes[limb_start + k] as Field);\r\n            v *= 256;\r\n        }\r\n\r\n        sliced_buffer[i] = sliced as u64;\r\n    }\r\n\r\n    //2. sponge_absorb\r\n    let mut state: [u64; NUM_KECCAK_LANES] = [0; NUM_KECCAK_LANES];\r\n    // When in an unconstrained runtime we can take advantage of runtime loop bounds,\r\n    // thus allowing us to simplify the loop body.\r\n    if is_unconstrained() {\r\n        for i in 0..real_max_blocks {\r\n            if (i == 0) {\r\n                for j in 0..LIMBS_PER_BLOCK {\r\n                    state[j] = sliced_buffer[j];\r\n                }\r\n            } else {\r\n                for j in 0..LIMBS_PER_BLOCK {\r\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\r\n                }\r\n            }\r\n            state = keccakf1600(state);\r\n        }\r\n    } else {\r\n        // `real_max_blocks` is guaranteed to at least be `1`\r\n        // We peel out the first block as to avoid a conditional inside of the loop.\r\n        // Otherwise, a dynamic predicate can cause a blowup in a constrained runtime.\r\n        for j in 0..LIMBS_PER_BLOCK {\r\n            state[j] = sliced_buffer[j];\r\n        }\r\n        state = keccakf1600(state);\r\n        for i in 1..max_blocks {\r\n            if i < real_max_blocks {\r\n                for j in 0..LIMBS_PER_BLOCK {\r\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\r\n                }\r\n                state = keccakf1600(state);\r\n            }\r\n        }\r\n    }\r\n\r\n    //3. sponge_squeeze\r\n    let mut result = [0; 32];\r\n    for i in 0..4 {\r\n        let lane = state[i] as Field;\r\n        let lane_le: [u8; 8] = lane.to_le_bytes();\r\n        for j in 0..8 {\r\n            result[8 * i + j] = lane_le[j];\r\n        }\r\n    }\r\n    result\r\n}","path":"/home/drone/projects/rione/circuits/lib/keccak256/src/keccak256.nr"}},"names":["main"],"brillig_names":["u64_to_ascii_bytes","get_account_with_storage","directive_invert","directive_integer_quotient","directive_to_radix"]}